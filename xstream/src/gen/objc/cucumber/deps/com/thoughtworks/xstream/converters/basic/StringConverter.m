//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/converters/basic/StringConverter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/basic/AbstractSingleValueConverter.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/basic/StringConverter.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/util/WeakCache.h"
#include "java/util/Collections.h"
#include "java/util/Map.h"

@interface CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter () {
 @public
  /*!
   @brief A Map to store strings as long as needed to map similar strings onto the same instance
  and conserve memory.The map can be set from the outside during construction, so it can
  be a LRU map or a weak map, synchronised or not.
   */
  id<JavaUtilMap> cache_;
  jint lengthLimit_;
}

@end

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter, cache_, id<JavaUtilMap>)

inline jint CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_get_LENGTH_LIMIT(void);
#define CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_LENGTH_LIMIT 38
J2OBJC_STATIC_FIELD_CONSTANT(CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter, LENGTH_LIMIT, jint)

@implementation CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)map
                                      withInt:(jint)lengthLimit {
  CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_initWithJavaUtilMap_withInt_(self, map, lengthLimit);
  return self;
}

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)map {
  CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_initWithJavaUtilMap_(self, map);
  return self;
}

- (instancetype __nonnull)initWithInt:(jint)lengthLimit {
  CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_initWithInt_(self, lengthLimit);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  return [((IOSClass *) nil_chk(type)) isEqual:NSString_class_()];
}

- (id)fromStringWithNSString:(NSString *)str {
  if (cache_ != nil && str != nil && (lengthLimit_ < 0 || [str java_length] <= lengthLimit_)) {
    NSString *s = (NSString *) cast_chk([cache_ getWithId:str], [NSString class]);
    if (s == nil) {
      [cache_ putWithId:str withId:str];
      s = str;
    }
    return s;
  }
  else {
    return str;
  }
}

- (void)dealloc {
  RELEASE_(cache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilMap:withInt:);
  methods[1].selector = @selector(initWithJavaUtilMap:);
  methods[2].selector = @selector(initWithInt:);
  methods[3].selector = @selector(init);
  methods[4].selector = @selector(canConvertWithIOSClass:);
  methods[5].selector = @selector(fromStringWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LENGTH_LIMIT", "I", .constantValue.asInt = CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_LENGTH_LIMIT, 0x1a, -1, -1, -1, -1 },
    { "cache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lengthLimit_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilMap;I", "LJavaUtilMap;", "I", "canConvert", "LIOSClass;", "fromString", "LNSString;" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter = { "StringConverter", "cucumber.deps.com.thoughtworks.xstream.converters.basic", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter;
}

@end

void CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_initWithJavaUtilMap_withInt_(CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter *self, id<JavaUtilMap> map, jint lengthLimit) {
  CucumberDepsComThoughtworksXstreamConvertersBasicAbstractSingleValueConverter_init(self);
  JreStrongAssign(&self->cache_, map);
  self->lengthLimit_ = lengthLimit;
}

CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter *new_CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_initWithJavaUtilMap_withInt_(id<JavaUtilMap> map, jint lengthLimit) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter, initWithJavaUtilMap_withInt_, map, lengthLimit)
}

CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter *create_CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_initWithJavaUtilMap_withInt_(id<JavaUtilMap> map, jint lengthLimit) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter, initWithJavaUtilMap_withInt_, map, lengthLimit)
}

void CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_initWithJavaUtilMap_(CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter *self, id<JavaUtilMap> map) {
  CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_initWithJavaUtilMap_withInt_(self, map, CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_LENGTH_LIMIT);
}

CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter *new_CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_initWithJavaUtilMap_(id<JavaUtilMap> map) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter, initWithJavaUtilMap_, map)
}

CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter *create_CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_initWithJavaUtilMap_(id<JavaUtilMap> map) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter, initWithJavaUtilMap_, map)
}

void CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_initWithInt_(CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter *self, jint lengthLimit) {
  CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_initWithJavaUtilMap_withInt_(self, JavaUtilCollections_synchronizedMapWithJavaUtilMap_(create_CucumberDepsComThoughtworksXstreamCoreUtilWeakCache_init()), lengthLimit);
}

CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter *new_CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_initWithInt_(jint lengthLimit) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter, initWithInt_, lengthLimit)
}

CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter *create_CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_initWithInt_(jint lengthLimit) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter, initWithInt_, lengthLimit)
}

void CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_init(CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter *self) {
  CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_initWithInt_(self, CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_LENGTH_LIMIT);
}

CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter *new_CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_init() {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter, init)
}

CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter *create_CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter_init() {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamConvertersBasicStringConverter)
