//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/annotations/XStreamConverter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/XStream.h"
#include "cucumber/deps/com/thoughtworks/xstream/annotations/XStreamConverter.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/annotation/Documented.h"
#include "java/lang/annotation/ElementType.h"
#include "java/lang/annotation/Retention.h"
#include "java/lang/annotation/RetentionPolicy.h"
#include "java/lang/annotation/Target.h"

__attribute__((unused)) static IOSObjectArray *CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter__Annotations$0(void);

@implementation CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter

@synthesize value = value_;
@synthesize priority = priority_;
@synthesize useImplicitType = useImplicitType_;
@synthesize types = types_;
@synthesize strings = strings_;
@synthesize bytes = bytes_;
@synthesize chars = chars_;
@synthesize shorts = shorts_;
@synthesize ints = ints_;
@synthesize longs = longs_;
@synthesize floats = floats_;
@synthesize doubles = doubles_;
@synthesize booleans = booleans_;

+ (jint)priorityDefault {
  return 0;
}

+ (jboolean)useImplicitTypeDefault {
  return true;
}

+ (IOSObjectArray *)typesDefault {
  return [IOSObjectArray arrayWithLength:0 type:IOSClass_class_()];
}

+ (IOSObjectArray *)stringsDefault {
  return [IOSObjectArray arrayWithLength:0 type:NSString_class_()];
}

+ (IOSByteArray *)bytesDefault {
  return [IOSByteArray arrayWithLength:0];
}

+ (IOSCharArray *)charsDefault {
  return [IOSCharArray arrayWithLength:0];
}

+ (IOSShortArray *)shortsDefault {
  return [IOSShortArray arrayWithLength:0];
}

+ (IOSIntArray *)intsDefault {
  return [IOSIntArray arrayWithLength:0];
}

+ (IOSLongArray *)longsDefault {
  return [IOSLongArray arrayWithLength:0];
}

+ (IOSFloatArray *)floatsDefault {
  return [IOSFloatArray arrayWithLength:0];
}

+ (IOSDoubleArray *)doublesDefault {
  return [IOSDoubleArray arrayWithLength:0];
}

+ (IOSBooleanArray *)booleansDefault {
  return [IOSBooleanArray arrayWithLength:0];
}

- (IOSClass *)annotationType {
  return CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter_class_();
}

- (NSString *)description {
  return [NSString stringWithFormat:@"@cucumber.deps.com.thoughtworks.xstream.annotations.XStreamConverter(value=%@, priority=%d, useImplicitType=%d, types=%@, strings=%@, bytes=%@, chars=%@, shorts=%@, ints=%@, longs=%@, floats=%@, doubles=%@, booleans=%@)", value_, priority_, useImplicitType_, types_, strings_, bytes_, chars_, shorts_, ints_, longs_, floats_, doubles_, booleans_];
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

- (void)dealloc {
  RELEASE_(value_);
  RELEASE_(types_);
  RELEASE_(strings_);
  RELEASE_(bytes_);
  RELEASE_(chars_);
  RELEASE_(shorts_);
  RELEASE_(ints_);
  RELEASE_(longs_);
  RELEASE_(floats_);
  RELEASE_(doubles_);
  RELEASE_(booleans_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIOSClass;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LIOSClass;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[S", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[J", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[F", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[D", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[Z", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(value);
  methods[1].selector = @selector(priority);
  methods[2].selector = @selector(useImplicitType);
  methods[3].selector = @selector(types);
  methods[4].selector = @selector(strings);
  methods[5].selector = @selector(bytes);
  methods[6].selector = @selector(chars);
  methods[7].selector = @selector(shorts);
  methods[8].selector = @selector(ints);
  methods[9].selector = @selector(longs);
  methods[10].selector = @selector(floats);
  methods[11].selector = @selector(doubles);
  methods[12].selector = @selector(booleans);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LIOSClass;", .constantValue.asLong = 0, 0x1000, -1, -1, 0, -1 },
    { "priority_", "I", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "useImplicitType_", "Z", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "types_", "[LIOSClass;", .constantValue.asLong = 0, 0x1000, -1, -1, 1, -1 },
    { "strings_", "[LNSString;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "bytes_", "[B", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "chars_", "[C", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "shorts_", "[S", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "ints_", "[I", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "longs_", "[J", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "floats_", "[F", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "doubles_", "[D", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "booleans_", "[Z", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Ljava/lang/Class<+Lcucumber/deps/com/thoughtworks/xstream/converters/ConverterMatcher;>;", "[Ljava/lang/Class<*>;", (void *)&CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter__Annotations$0 };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter = { "XStreamConverter", "cucumber.deps.com.thoughtworks.xstream.annotations", ptrTable, methods, fields, 7, 0x2609, 13, 13, -1, -1, -1, -1, 2 };
  return &_CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter;
}

@end

id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter> create_CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter(IOSBooleanArray *booleans, IOSByteArray *bytes, IOSCharArray *chars, IOSDoubleArray *doubles, IOSFloatArray *floats, IOSIntArray *ints, IOSLongArray *longs, jint priority, IOSShortArray *shorts, IOSObjectArray *strings, IOSObjectArray *types, jboolean useImplicitType, IOSClass *value) {
  CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter *self = AUTORELEASE([[CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter alloc] init]);
  self->booleans_ = RETAIN_(booleans);
  self->bytes_ = RETAIN_(bytes);
  self->chars_ = RETAIN_(chars);
  self->doubles_ = RETAIN_(doubles);
  self->floats_ = RETAIN_(floats);
  self->ints_ = RETAIN_(ints);
  self->longs_ = RETAIN_(longs);
  self->priority_ = priority;
  self->shorts_ = RETAIN_(shorts);
  self->strings_ = RETAIN_(strings);
  self->types_ = RETAIN_(types);
  self->useImplicitType_ = useImplicitType;
  self->value_ = RETAIN_(value);
  return self;
}

IOSObjectArray *CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, TYPE), JreLoadEnum(JavaLangAnnotationElementType, FIELD) } count:2 type:JavaLangAnnotationElementType_class_()]), create_JavaLangAnnotationDocumented() } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter)
