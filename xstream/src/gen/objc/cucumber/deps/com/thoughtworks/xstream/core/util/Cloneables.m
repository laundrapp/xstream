//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/core/util/Cloneables.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/reflection/ObjectAccessException.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/util/Cloneables.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Array.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"

@implementation CucumberDepsComThoughtworksXstreamCoreUtilCloneables

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberDepsComThoughtworksXstreamCoreUtilCloneables_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id)cloneWithId:(id)o {
  return CucumberDepsComThoughtworksXstreamCoreUtilCloneables_cloneWithId_(o);
}

+ (id)cloneIfPossibleWithId:(id)o {
  return CucumberDepsComThoughtworksXstreamCoreUtilCloneables_cloneIfPossibleWithId_(o);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(cloneWithId:);
  methods[2].selector = @selector(cloneIfPossibleWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "clone", "LNSObject;", "cloneIfPossible" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamCoreUtilCloneables = { "Cloneables", "cucumber.deps.com.thoughtworks.xstream.core.util", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamCoreUtilCloneables;
}

@end

void CucumberDepsComThoughtworksXstreamCoreUtilCloneables_init(CucumberDepsComThoughtworksXstreamCoreUtilCloneables *self) {
  NSObject_init(self);
}

CucumberDepsComThoughtworksXstreamCoreUtilCloneables *new_CucumberDepsComThoughtworksXstreamCoreUtilCloneables_init() {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamCoreUtilCloneables, init)
}

CucumberDepsComThoughtworksXstreamCoreUtilCloneables *create_CucumberDepsComThoughtworksXstreamCoreUtilCloneables_init() {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamCoreUtilCloneables, init)
}

id CucumberDepsComThoughtworksXstreamCoreUtilCloneables_cloneWithId_(id o) {
  CucumberDepsComThoughtworksXstreamCoreUtilCloneables_initialize();
  if ([NSCopying_class_() isInstance:o]) {
    if ([[nil_chk(o) java_getClass] isArray]) {
      IOSClass *componentType = [[o java_getClass] getComponentType];
      if (![((IOSClass *) nil_chk(componentType)) isPrimitive]) {
        return [((IOSObjectArray *) cast_check(o, IOSClass_arrayType(NSObject_class_(), 1))) java_clone];
      }
      else {
        jint length = JavaLangReflectArray_getLengthWithId_(o);
        id clone = JavaLangReflectArray_newInstanceWithIOSClass_withInt_(componentType, length);
        while (length-- > 0) {
          JavaLangReflectArray_setWithId_withInt_withId_(clone, length, JavaLangReflectArray_getWithId_withInt_(o, length));
        }
        return clone;
      }
    }
    else {
      @try {
        JavaLangReflectMethod *clone = [[o java_getClass] getMethod:@"clone" parameterTypes:nil];
        return [((JavaLangReflectMethod *) nil_chk(clone)) invokeWithId:o withNSObjectArray:nil];
      }
      @catch (JavaLangNoSuchMethodException *e) {
        @throw create_CucumberDepsComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(@"Cloneable type has no clone method", e);
      }
      @catch (JavaLangIllegalAccessException *e) {
        @throw create_CucumberDepsComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(@"Cannot clone Cloneable type", e);
      }
      @catch (JavaLangReflectInvocationTargetException *e) {
        @throw create_CucumberDepsComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(@"Exception cloning Cloneable type", [e getCause]);
      }
    }
  }
  return nil;
}

id CucumberDepsComThoughtworksXstreamCoreUtilCloneables_cloneIfPossibleWithId_(id o) {
  CucumberDepsComThoughtworksXstreamCoreUtilCloneables_initialize();
  id clone = CucumberDepsComThoughtworksXstreamCoreUtilCloneables_cloneWithId_(o);
  return clone == nil ? o : clone;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamCoreUtilCloneables)
