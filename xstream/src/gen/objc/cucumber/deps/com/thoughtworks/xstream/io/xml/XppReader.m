//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/io/xml/XppReader.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/ErrorWriter.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/StreamException.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/naming/NameCoder.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/xml/AbstractPullReader.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/xml/XmlFriendlyNameCoder.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/xml/XmlFriendlyReplacer.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/xml/XppReader.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/InstantiationException.h"
#include "org/xmlpull/v1/XmlPullParser.h"
#include "org/xmlpull/v1/XmlPullParserException.h"

@interface CucumberDepsComThoughtworksXstreamIoXmlXppReader () {
 @public
  id<OrgXmlpullV1XmlPullParser> parser_;
  JavaIoReader *reader_;
}

@end

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamIoXmlXppReader, parser_, id<OrgXmlpullV1XmlPullParser>)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamIoXmlXppReader, reader_, JavaIoReader *)

@implementation CucumberDepsComThoughtworksXstreamIoXmlXppReader

- (instancetype __nonnull)initWithJavaIoReader:(JavaIoReader *)reader
                 withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser {
  CucumberDepsComThoughtworksXstreamIoXmlXppReader_initWithJavaIoReader_withOrgXmlpullV1XmlPullParser_(self, reader, parser);
  return self;
}

- (instancetype __nonnull)initWithJavaIoReader:(JavaIoReader *)reader
                 withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser
withCucumberDepsComThoughtworksXstreamIoNamingNameCoder:(id<CucumberDepsComThoughtworksXstreamIoNamingNameCoder>)nameCoder {
  CucumberDepsComThoughtworksXstreamIoXmlXppReader_initWithJavaIoReader_withOrgXmlpullV1XmlPullParser_withCucumberDepsComThoughtworksXstreamIoNamingNameCoder_(self, reader, parser, nameCoder);
  return self;
}

- (instancetype __nonnull)initWithJavaIoReader:(JavaIoReader *)reader {
  CucumberDepsComThoughtworksXstreamIoXmlXppReader_initWithJavaIoReader_(self, reader);
  return self;
}

- (instancetype __nonnull)initWithJavaIoReader:(JavaIoReader *)reader
withCucumberDepsComThoughtworksXstreamIoXmlXmlFriendlyReplacer:(CucumberDepsComThoughtworksXstreamIoXmlXmlFriendlyReplacer *)replacer {
  CucumberDepsComThoughtworksXstreamIoXmlXppReader_initWithJavaIoReader_withCucumberDepsComThoughtworksXstreamIoXmlXmlFriendlyReplacer_(self, reader, replacer);
  return self;
}

- (id<OrgXmlpullV1XmlPullParser>)createParser {
  JavaLangException *exception = nil;
  @try {
    return (id<OrgXmlpullV1XmlPullParser>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_initialize_classLoader_(@"org.xmlpull.mxp1.MXParser", true, [OrgXmlpullV1XmlPullParser_class_() getClassLoader]))) newInstance], OrgXmlpullV1XmlPullParser_class_());
  }
  @catch (JavaLangInstantiationException *e) {
    exception = e;
  }
  @catch (JavaLangIllegalAccessException *e) {
    exception = e;
  }
  @catch (JavaLangClassNotFoundException *e) {
    exception = e;
  }
  @throw create_CucumberDepsComThoughtworksXstreamIoStreamException_initWithNSString_withJavaLangThrowable_(@"Cannot create Xpp3 parser instance.", exception);
}

- (jint)pullNextEvent {
  @try {
    switch ([((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser_)) next]) {
      case OrgXmlpullV1XmlPullParser_START_DOCUMENT:
      case OrgXmlpullV1XmlPullParser_START_TAG:
      return CucumberDepsComThoughtworksXstreamIoXmlAbstractPullReader_START_NODE;
      case OrgXmlpullV1XmlPullParser_END_DOCUMENT:
      case OrgXmlpullV1XmlPullParser_END_TAG:
      return CucumberDepsComThoughtworksXstreamIoXmlAbstractPullReader_END_NODE;
      case OrgXmlpullV1XmlPullParser_TEXT:
      return CucumberDepsComThoughtworksXstreamIoXmlAbstractPullReader_TEXT;
      case OrgXmlpullV1XmlPullParser_COMMENT:
      return CucumberDepsComThoughtworksXstreamIoXmlAbstractPullReader_COMMENT;
      default:
      return CucumberDepsComThoughtworksXstreamIoXmlAbstractPullReader_OTHER;
    }
  }
  @catch (OrgXmlpullV1XmlPullParserException *e) {
    @throw create_CucumberDepsComThoughtworksXstreamIoStreamException_initWithJavaLangThrowable_(e);
  }
  @catch (JavaIoIOException *e) {
    @throw create_CucumberDepsComThoughtworksXstreamIoStreamException_initWithJavaLangThrowable_(e);
  }
}

- (NSString *)pullElementName {
  return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser_)) getName];
}

- (NSString *)pullText {
  return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser_)) getText];
}

- (NSString *)getAttributeWithNSString:(NSString *)name {
  return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser_)) getAttributeValueWithNSString:nil withNSString:[self encodeAttributeWithNSString:name]];
}

- (NSString *)getAttributeWithInt:(jint)index {
  return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser_)) getAttributeValueWithInt:index];
}

- (jint)getAttributeCount {
  return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser_)) getAttributeCount];
}

- (NSString *)getAttributeNameWithInt:(jint)index {
  return [self decodeAttributeWithNSString:[((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser_)) getAttributeNameWithInt:index]];
}

- (void)appendErrorsWithCucumberDepsComThoughtworksXstreamConvertersErrorWriter:(id<CucumberDepsComThoughtworksXstreamConvertersErrorWriter>)errorWriter {
  [((id<CucumberDepsComThoughtworksXstreamConvertersErrorWriter>) nil_chk(errorWriter)) addWithNSString:@"line number" withNSString:NSString_java_valueOfInt_([((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser_)) getLineNumber])];
}

- (void)close {
  @try {
    [((JavaIoReader *) nil_chk(reader_)) close];
  }
  @catch (JavaIoIOException *e) {
    @throw create_CucumberDepsComThoughtworksXstreamIoStreamException_initWithJavaLangThrowable_(e);
  }
}

- (void)dealloc {
  RELEASE_(parser_);
  RELEASE_(reader_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlPullParser;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoReader:withOrgXmlpullV1XmlPullParser:);
  methods[1].selector = @selector(initWithJavaIoReader:withOrgXmlpullV1XmlPullParser:withCucumberDepsComThoughtworksXstreamIoNamingNameCoder:);
  methods[2].selector = @selector(initWithJavaIoReader:);
  methods[3].selector = @selector(initWithJavaIoReader:withCucumberDepsComThoughtworksXstreamIoXmlXmlFriendlyReplacer:);
  methods[4].selector = @selector(createParser);
  methods[5].selector = @selector(pullNextEvent);
  methods[6].selector = @selector(pullElementName);
  methods[7].selector = @selector(pullText);
  methods[8].selector = @selector(getAttributeWithNSString:);
  methods[9].selector = @selector(getAttributeWithInt:);
  methods[10].selector = @selector(getAttributeCount);
  methods[11].selector = @selector(getAttributeNameWithInt:);
  methods[12].selector = @selector(appendErrorsWithCucumberDepsComThoughtworksXstreamConvertersErrorWriter:);
  methods[13].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parser_", "LOrgXmlpullV1XmlPullParser;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "reader_", "LJavaIoReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoReader;LOrgXmlpullV1XmlPullParser;", "LJavaIoReader;LOrgXmlpullV1XmlPullParser;LCucumberDepsComThoughtworksXstreamIoNamingNameCoder;", "LJavaIoReader;", "LJavaIoReader;LCucumberDepsComThoughtworksXstreamIoXmlXmlFriendlyReplacer;", "getAttribute", "LNSString;", "I", "getAttributeName", "appendErrors", "LCucumberDepsComThoughtworksXstreamConvertersErrorWriter;" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamIoXmlXppReader = { "XppReader", "cucumber.deps.com.thoughtworks.xstream.io.xml", ptrTable, methods, fields, 7, 0x1, 14, 2, -1, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamIoXmlXppReader;
}

@end

void CucumberDepsComThoughtworksXstreamIoXmlXppReader_initWithJavaIoReader_withOrgXmlpullV1XmlPullParser_(CucumberDepsComThoughtworksXstreamIoXmlXppReader *self, JavaIoReader *reader, id<OrgXmlpullV1XmlPullParser> parser) {
  CucumberDepsComThoughtworksXstreamIoXmlXppReader_initWithJavaIoReader_withOrgXmlpullV1XmlPullParser_withCucumberDepsComThoughtworksXstreamIoNamingNameCoder_(self, reader, parser, create_CucumberDepsComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_init());
}

CucumberDepsComThoughtworksXstreamIoXmlXppReader *new_CucumberDepsComThoughtworksXstreamIoXmlXppReader_initWithJavaIoReader_withOrgXmlpullV1XmlPullParser_(JavaIoReader *reader, id<OrgXmlpullV1XmlPullParser> parser) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamIoXmlXppReader, initWithJavaIoReader_withOrgXmlpullV1XmlPullParser_, reader, parser)
}

CucumberDepsComThoughtworksXstreamIoXmlXppReader *create_CucumberDepsComThoughtworksXstreamIoXmlXppReader_initWithJavaIoReader_withOrgXmlpullV1XmlPullParser_(JavaIoReader *reader, id<OrgXmlpullV1XmlPullParser> parser) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamIoXmlXppReader, initWithJavaIoReader_withOrgXmlpullV1XmlPullParser_, reader, parser)
}

void CucumberDepsComThoughtworksXstreamIoXmlXppReader_initWithJavaIoReader_withOrgXmlpullV1XmlPullParser_withCucumberDepsComThoughtworksXstreamIoNamingNameCoder_(CucumberDepsComThoughtworksXstreamIoXmlXppReader *self, JavaIoReader *reader, id<OrgXmlpullV1XmlPullParser> parser, id<CucumberDepsComThoughtworksXstreamIoNamingNameCoder> nameCoder) {
  CucumberDepsComThoughtworksXstreamIoXmlAbstractPullReader_initWithCucumberDepsComThoughtworksXstreamIoNamingNameCoder_(self, nameCoder);
  JreStrongAssign(&self->parser_, parser);
  JreStrongAssign(&self->reader_, reader);
  @try {
    [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser)) setInputWithJavaIoReader:self->reader_];
  }
  @catch (OrgXmlpullV1XmlPullParserException *e) {
    @throw create_CucumberDepsComThoughtworksXstreamIoStreamException_initWithJavaLangThrowable_(e);
  }
  [self moveDown];
}

CucumberDepsComThoughtworksXstreamIoXmlXppReader *new_CucumberDepsComThoughtworksXstreamIoXmlXppReader_initWithJavaIoReader_withOrgXmlpullV1XmlPullParser_withCucumberDepsComThoughtworksXstreamIoNamingNameCoder_(JavaIoReader *reader, id<OrgXmlpullV1XmlPullParser> parser, id<CucumberDepsComThoughtworksXstreamIoNamingNameCoder> nameCoder) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamIoXmlXppReader, initWithJavaIoReader_withOrgXmlpullV1XmlPullParser_withCucumberDepsComThoughtworksXstreamIoNamingNameCoder_, reader, parser, nameCoder)
}

CucumberDepsComThoughtworksXstreamIoXmlXppReader *create_CucumberDepsComThoughtworksXstreamIoXmlXppReader_initWithJavaIoReader_withOrgXmlpullV1XmlPullParser_withCucumberDepsComThoughtworksXstreamIoNamingNameCoder_(JavaIoReader *reader, id<OrgXmlpullV1XmlPullParser> parser, id<CucumberDepsComThoughtworksXstreamIoNamingNameCoder> nameCoder) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamIoXmlXppReader, initWithJavaIoReader_withOrgXmlpullV1XmlPullParser_withCucumberDepsComThoughtworksXstreamIoNamingNameCoder_, reader, parser, nameCoder)
}

void CucumberDepsComThoughtworksXstreamIoXmlXppReader_initWithJavaIoReader_(CucumberDepsComThoughtworksXstreamIoXmlXppReader *self, JavaIoReader *reader) {
  CucumberDepsComThoughtworksXstreamIoXmlXppReader_initWithJavaIoReader_withCucumberDepsComThoughtworksXstreamIoXmlXmlFriendlyReplacer_(self, reader, create_CucumberDepsComThoughtworksXstreamIoXmlXmlFriendlyReplacer_init());
}

CucumberDepsComThoughtworksXstreamIoXmlXppReader *new_CucumberDepsComThoughtworksXstreamIoXmlXppReader_initWithJavaIoReader_(JavaIoReader *reader) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamIoXmlXppReader, initWithJavaIoReader_, reader)
}

CucumberDepsComThoughtworksXstreamIoXmlXppReader *create_CucumberDepsComThoughtworksXstreamIoXmlXppReader_initWithJavaIoReader_(JavaIoReader *reader) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamIoXmlXppReader, initWithJavaIoReader_, reader)
}

void CucumberDepsComThoughtworksXstreamIoXmlXppReader_initWithJavaIoReader_withCucumberDepsComThoughtworksXstreamIoXmlXmlFriendlyReplacer_(CucumberDepsComThoughtworksXstreamIoXmlXppReader *self, JavaIoReader *reader, CucumberDepsComThoughtworksXstreamIoXmlXmlFriendlyReplacer *replacer) {
  CucumberDepsComThoughtworksXstreamIoXmlAbstractPullReader_initWithCucumberDepsComThoughtworksXstreamIoXmlXmlFriendlyReplacer_(self, replacer);
  @try {
    JreStrongAssign(&self->parser_, [self createParser]);
    JreStrongAssign(&self->reader_, reader);
    [((id<OrgXmlpullV1XmlPullParser>) nil_chk(self->parser_)) setInputWithJavaIoReader:self->reader_];
    [self moveDown];
  }
  @catch (OrgXmlpullV1XmlPullParserException *e) {
    @throw create_CucumberDepsComThoughtworksXstreamIoStreamException_initWithJavaLangThrowable_(e);
  }
}

CucumberDepsComThoughtworksXstreamIoXmlXppReader *new_CucumberDepsComThoughtworksXstreamIoXmlXppReader_initWithJavaIoReader_withCucumberDepsComThoughtworksXstreamIoXmlXmlFriendlyReplacer_(JavaIoReader *reader, CucumberDepsComThoughtworksXstreamIoXmlXmlFriendlyReplacer *replacer) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamIoXmlXppReader, initWithJavaIoReader_withCucumberDepsComThoughtworksXstreamIoXmlXmlFriendlyReplacer_, reader, replacer)
}

CucumberDepsComThoughtworksXstreamIoXmlXppReader *create_CucumberDepsComThoughtworksXstreamIoXmlXppReader_initWithJavaIoReader_withCucumberDepsComThoughtworksXstreamIoXmlXmlFriendlyReplacer_(JavaIoReader *reader, CucumberDepsComThoughtworksXstreamIoXmlXmlFriendlyReplacer *replacer) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamIoXmlXppReader, initWithJavaIoReader_withCucumberDepsComThoughtworksXstreamIoXmlXmlFriendlyReplacer_, reader, replacer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamIoXmlXppReader)
