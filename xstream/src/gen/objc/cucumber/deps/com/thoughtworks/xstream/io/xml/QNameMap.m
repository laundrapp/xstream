//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/io/xml/QNameMap.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/xml/QNameMap.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "javax/xml/namespace/QName.h"

@interface CucumberDepsComThoughtworksXstreamIoXmlQNameMap () {
 @public
  id<JavaUtilMap> qnameToJava_;
  id<JavaUtilMap> javaToQName_;
  NSString *defaultPrefix_;
  NSString *defaultNamespace_;
}

@end

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamIoXmlQNameMap, qnameToJava_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamIoXmlQNameMap, javaToQName_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamIoXmlQNameMap, defaultPrefix_, NSString *)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamIoXmlQNameMap, defaultNamespace_, NSString *)

@implementation CucumberDepsComThoughtworksXstreamIoXmlQNameMap

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberDepsComThoughtworksXstreamIoXmlQNameMap_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getJavaClassNameWithJavaxXmlNamespaceQName:(JavaxXmlNamespaceQName *)qname {
  if (qnameToJava_ != nil) {
    NSString *answer = (NSString *) cast_chk([qnameToJava_ getWithId:qname], [NSString class]);
    if (answer != nil) {
      return answer;
    }
  }
  return [((JavaxXmlNamespaceQName *) nil_chk(qname)) getLocalPart];
}

- (JavaxXmlNamespaceQName *)getQNameWithNSString:(NSString *)javaClassName {
  if (javaToQName_ != nil) {
    JavaxXmlNamespaceQName *answer = (JavaxXmlNamespaceQName *) cast_chk([javaToQName_ getWithId:javaClassName], [JavaxXmlNamespaceQName class]);
    if (answer != nil) {
      return answer;
    }
  }
  return create_JavaxXmlNamespaceQName_initWithNSString_withNSString_withNSString_(defaultNamespace_, javaClassName, defaultPrefix_);
}

- (void)registerMappingWithJavaxXmlNamespaceQName:(JavaxXmlNamespaceQName *)qname
                                     withNSString:(NSString *)javaClassName {
  @synchronized(self) {
    if (javaToQName_ == nil) {
      JreStrongAssign(&javaToQName_, JavaUtilCollections_synchronizedMapWithJavaUtilMap_(create_JavaUtilHashMap_init()));
    }
    if (qnameToJava_ == nil) {
      JreStrongAssign(&qnameToJava_, JavaUtilCollections_synchronizedMapWithJavaUtilMap_(create_JavaUtilHashMap_init()));
    }
    [((id<JavaUtilMap>) nil_chk(javaToQName_)) putWithId:javaClassName withId:qname];
    [((id<JavaUtilMap>) nil_chk(qnameToJava_)) putWithId:qname withId:javaClassName];
  }
}

- (void)registerMappingWithJavaxXmlNamespaceQName:(JavaxXmlNamespaceQName *)qname
                                     withIOSClass:(IOSClass *)type {
  @synchronized(self) {
    [self registerMappingWithJavaxXmlNamespaceQName:qname withNSString:[((IOSClass *) nil_chk(type)) getName]];
  }
}

- (NSString *)getDefaultNamespace {
  return defaultNamespace_;
}

- (void)setDefaultNamespaceWithNSString:(NSString *)defaultNamespace {
  JreStrongAssign(&self->defaultNamespace_, defaultNamespace);
}

- (NSString *)getDefaultPrefix {
  return defaultPrefix_;
}

- (void)setDefaultPrefixWithNSString:(NSString *)defaultPrefix {
  JreStrongAssign(&self->defaultPrefix_, defaultPrefix);
}

- (void)dealloc {
  RELEASE_(qnameToJava_);
  RELEASE_(javaToQName_);
  RELEASE_(defaultPrefix_);
  RELEASE_(defaultNamespace_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaxXmlNamespaceQName;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 4, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getJavaClassNameWithJavaxXmlNamespaceQName:);
  methods[2].selector = @selector(getQNameWithNSString:);
  methods[3].selector = @selector(registerMappingWithJavaxXmlNamespaceQName:withNSString:);
  methods[4].selector = @selector(registerMappingWithJavaxXmlNamespaceQName:withIOSClass:);
  methods[5].selector = @selector(getDefaultNamespace);
  methods[6].selector = @selector(setDefaultNamespaceWithNSString:);
  methods[7].selector = @selector(getDefaultPrefix);
  methods[8].selector = @selector(setDefaultPrefixWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "qnameToJava_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "javaToQName_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defaultPrefix_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defaultNamespace_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getJavaClassName", "LJavaxXmlNamespaceQName;", "getQName", "LNSString;", "registerMapping", "LJavaxXmlNamespaceQName;LNSString;", "LJavaxXmlNamespaceQName;LIOSClass;", "setDefaultNamespace", "setDefaultPrefix" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamIoXmlQNameMap = { "QNameMap", "cucumber.deps.com.thoughtworks.xstream.io.xml", ptrTable, methods, fields, 7, 0x1, 9, 4, -1, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamIoXmlQNameMap;
}

@end

void CucumberDepsComThoughtworksXstreamIoXmlQNameMap_init(CucumberDepsComThoughtworksXstreamIoXmlQNameMap *self) {
  NSObject_init(self);
  JreStrongAssign(&self->defaultPrefix_, @"");
  JreStrongAssign(&self->defaultNamespace_, @"");
}

CucumberDepsComThoughtworksXstreamIoXmlQNameMap *new_CucumberDepsComThoughtworksXstreamIoXmlQNameMap_init() {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamIoXmlQNameMap, init)
}

CucumberDepsComThoughtworksXstreamIoXmlQNameMap *create_CucumberDepsComThoughtworksXstreamIoXmlQNameMap_init() {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamIoXmlQNameMap, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamIoXmlQNameMap)
