//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/converters/basic/DateConverter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/ConversionException.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/ErrorWriter.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/basic/AbstractSingleValueConverter.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/basic/DateConverter.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/JVM.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/util/ThreadSafeSimpleDateFormat.h"
#include "java/text/ParseException.h"
#include "java/util/ArrayList.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"

@interface CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter () {
 @public
  CucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *defaultFormat_;
  CucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *defaultEraFormat_;
  IOSObjectArray *acceptableFormats_;
  JavaUtilLocale *locale_;
}

@end

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, defaultFormat_, CucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, defaultEraFormat_, CucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, acceptableFormats_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, locale_, JavaUtilLocale *)

inline IOSObjectArray *CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_get_DEFAULT_ACCEPTABLE_FORMATS(void);
static IOSObjectArray *CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ACCEPTABLE_FORMATS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, DEFAULT_ACCEPTABLE_FORMATS, IOSObjectArray *)

inline NSString *CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_get_DEFAULT_PATTERN(void);
static NSString *CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, DEFAULT_PATTERN, NSString *)

inline NSString *CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_get_DEFAULT_ERA_PATTERN(void);
static NSString *CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ERA_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, DEFAULT_ERA_PATTERN, NSString *)

inline JavaUtilTimeZone *CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_get_UTC(void);
static JavaUtilTimeZone *CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_UTC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, UTC, JavaUtilTimeZone *)

inline jlong CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_get_ERA_START(void);
static jlong CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_ERA_START;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, ERA_START, jlong)

J2OBJC_INITIALIZED_DEFN(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter)

@implementation CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithJavaUtilTimeZone_(self, timeZone);
  return self;
}

- (instancetype __nonnull)initWithBoolean:(jboolean)lenient {
  CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithBoolean_(self, lenient);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)defaultFormat
                         withNSStringArray:(IOSObjectArray *)acceptableFormats {
  CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_(self, defaultFormat, acceptableFormats);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)defaultFormat
                         withNSStringArray:(IOSObjectArray *)acceptableFormats
                      withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_(self, defaultFormat, acceptableFormats, timeZone);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)defaultFormat
                         withNSStringArray:(IOSObjectArray *)acceptableFormats
                               withBoolean:(jboolean)lenient {
  CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withBoolean_(self, defaultFormat, acceptableFormats, lenient);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)defaultFormat
                         withNSStringArray:(IOSObjectArray *)acceptableFormats
                      withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                               withBoolean:(jboolean)lenient {
  CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_withBoolean_(self, defaultFormat, acceptableFormats, timeZone, lenient);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)defaultEraFormat
                              withNSString:(NSString *)defaultFormat
                         withNSStringArray:(IOSObjectArray *)acceptableFormats
                        withJavaUtilLocale:(JavaUtilLocale *)locale
                      withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                               withBoolean:(jboolean)lenient {
  CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSString_withNSStringArray_withJavaUtilLocale_withJavaUtilTimeZone_withBoolean_(self, defaultEraFormat, defaultFormat, acceptableFormats, locale, timeZone, lenient);
  return self;
}

- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  return [((IOSClass *) nil_chk(type)) isEqual:JavaUtilDate_class_()];
}

- (id)fromStringWithNSString:(NSString *)str {
  if (defaultEraFormat_ != nil) {
    @try {
      return [defaultEraFormat_ parseWithNSString:str];
    }
    @catch (JavaTextParseException *e) {
    }
  }
  if (defaultEraFormat_ != defaultFormat_) {
    @try {
      return [((CucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *) nil_chk(defaultFormat_)) parseWithNSString:str];
    }
    @catch (JavaTextParseException *e) {
    }
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(acceptableFormats_))->size_; i++) {
    @try {
      return [((CucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *) nil_chk(IOSObjectArray_Get(acceptableFormats_, i))) parseWithNSString:str];
    }
    @catch (JavaTextParseException *e3) {
    }
  }
  @throw create_CucumberDepsComThoughtworksXstreamConvertersConversionException_initWithNSString_(JreStrcat("$$", @"Cannot parse date ", str));
}

- (NSString *)toStringWithId:(id)obj {
  JavaUtilDate *date = (JavaUtilDate *) cast_chk(obj, [JavaUtilDate class]);
  if ([((JavaUtilDate *) nil_chk(date)) getTime] < CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_ERA_START && defaultEraFormat_ != nil) {
    return [defaultEraFormat_ formatWithJavaUtilDate:date];
  }
  else {
    return [((CucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *) nil_chk(defaultFormat_)) formatWithJavaUtilDate:date];
  }
}

- (void)appendErrorsWithCucumberDepsComThoughtworksXstreamConvertersErrorWriter:(id<CucumberDepsComThoughtworksXstreamConvertersErrorWriter>)errorWriter {
  [((id<CucumberDepsComThoughtworksXstreamConvertersErrorWriter>) nil_chk(errorWriter)) addWithNSString:@"Default date pattern" withNSString:[((CucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *) nil_chk(defaultFormat_)) description]];
  if (defaultEraFormat_ != nil) {
    [errorWriter addWithNSString:@"Default era date pattern" withNSString:[defaultEraFormat_ description]];
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(acceptableFormats_))->size_; i++) {
    [errorWriter addWithNSString:@"Alternative date pattern" withNSString:[((CucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *) nil_chk(IOSObjectArray_Get(acceptableFormats_, i))) description]];
  }
}

- (void)dealloc {
  RELEASE_(defaultFormat_);
  RELEASE_(defaultEraFormat_);
  RELEASE_(acceptableFormats_);
  RELEASE_(locale_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaUtilTimeZone:);
  methods[2].selector = @selector(initWithBoolean:);
  methods[3].selector = @selector(initWithNSString:withNSStringArray:);
  methods[4].selector = @selector(initWithNSString:withNSStringArray:withJavaUtilTimeZone:);
  methods[5].selector = @selector(initWithNSString:withNSStringArray:withBoolean:);
  methods[6].selector = @selector(initWithNSString:withNSStringArray:withJavaUtilTimeZone:withBoolean:);
  methods[7].selector = @selector(initWithNSString:withNSString:withNSStringArray:withJavaUtilLocale:withJavaUtilTimeZone:withBoolean:);
  methods[8].selector = @selector(canConvertWithIOSClass:);
  methods[9].selector = @selector(fromStringWithNSString:);
  methods[10].selector = @selector(toStringWithId:);
  methods[11].selector = @selector(appendErrorsWithCucumberDepsComThoughtworksXstreamConvertersErrorWriter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_ACCEPTABLE_FORMATS", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "DEFAULT_PATTERN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "DEFAULT_ERA_PATTERN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "UTC", "LJavaUtilTimeZone;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "ERA_START", "J", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "defaultFormat_", "LCucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "defaultEraFormat_", "LCucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "acceptableFormats_", "[LCucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "locale_", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilTimeZone;", "Z", "LNSString;[LNSString;", "LNSString;[LNSString;LJavaUtilTimeZone;", "LNSString;[LNSString;Z", "LNSString;[LNSString;LJavaUtilTimeZone;Z", "LNSString;LNSString;[LNSString;LJavaUtilLocale;LJavaUtilTimeZone;Z", "canConvert", "LIOSClass;", "fromString", "LNSString;", "toString", "LNSObject;", "appendErrors", "LCucumberDepsComThoughtworksXstreamConvertersErrorWriter;", &CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ACCEPTABLE_FORMATS, &CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_PATTERN, &CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ERA_PATTERN, &CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_UTC, &CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_ERA_START };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter = { "DateConverter", "cucumber.deps.com.thoughtworks.xstream.converters.basic", ptrTable, methods, fields, 7, 0x1, 12, 9, -1, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter;
}

+ (void)initialize {
  if (self == [CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter class]) {
    {
      JreStrongAssign(&CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_UTC, JavaUtilTimeZone_getTimeZoneWithNSString_(@"UTC"));
      NSString *defaultPattern = @"yyyy-MM-dd HH:mm:ss.S z";
      NSString *defaultEraPattern = @"yyyy-MM-dd G HH:mm:ss.S z";
      id<JavaUtilList> acceptablePatterns = create_JavaUtilArrayList_init();
      jboolean utcSupported = CucumberDepsComThoughtworksXstreamCoreJVM_canParseUTCDateFormat();
      JreStrongAssign(&CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_PATTERN, utcSupported ? defaultPattern : @"yyyy-MM-dd HH:mm:ss.S 'UTC'");
      JreStrongAssign(&CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ERA_PATTERN, utcSupported ? defaultEraPattern : @"yyyy-MM-dd G HH:mm:ss.S 'UTC'");
      [acceptablePatterns addWithId:@"yyyy-MM-dd HH:mm:ss.S z"];
      if (!utcSupported) {
        [acceptablePatterns addWithId:defaultPattern];
      }
      [acceptablePatterns addWithId:@"yyyy-MM-dd HH:mm:ss.S a"];
      [acceptablePatterns addWithId:@"yyyy-MM-dd HH:mm:ssz"];
      [acceptablePatterns addWithId:@"yyyy-MM-dd HH:mm:ss z"];
      if (!utcSupported) {
        [acceptablePatterns addWithId:@"yyyy-MM-dd HH:mm:ss 'UTC'"];
      }
      [acceptablePatterns addWithId:@"yyyy-MM-dd HH:mm:ssa"];
      JreStrongAssign(&CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ACCEPTABLE_FORMATS, (IOSObjectArray *) cast_check([acceptablePatterns toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[acceptablePatterns size] type:NSString_class_()]], IOSClass_arrayType(NSString_class_(), 1)));
      JavaUtilCalendar *cal = JavaUtilCalendar_getInstance();
      [((JavaUtilCalendar *) nil_chk(cal)) setTimeZoneWithJavaUtilTimeZone:CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_UTC];
      [cal clear];
      [cal setWithInt:1 withInt:JavaUtilCalendar_JANUARY withInt:1];
      CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_ERA_START = [((JavaUtilDate *) nil_chk([cal getTime])) getTime];
    }
    J2OBJC_SET_INITIALIZED(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter)
  }
}

@end

void CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_init(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *self) {
  CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithBoolean_(self, false);
}

CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *new_CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_init() {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, init)
}

CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *create_CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_init() {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, init)
}

void CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithJavaUtilTimeZone_(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *self, JavaUtilTimeZone *timeZone) {
  CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_(self, CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_PATTERN, CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ACCEPTABLE_FORMATS, timeZone);
}

CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *new_CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithJavaUtilTimeZone_(JavaUtilTimeZone *timeZone) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, initWithJavaUtilTimeZone_, timeZone)
}

CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *create_CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithJavaUtilTimeZone_(JavaUtilTimeZone *timeZone) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, initWithJavaUtilTimeZone_, timeZone)
}

void CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithBoolean_(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *self, jboolean lenient) {
  CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withBoolean_(self, CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_PATTERN, CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ACCEPTABLE_FORMATS, lenient);
}

CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *new_CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithBoolean_(jboolean lenient) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, initWithBoolean_, lenient)
}

CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *create_CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithBoolean_(jboolean lenient) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, initWithBoolean_, lenient)
}

void CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *self, NSString *defaultFormat, IOSObjectArray *acceptableFormats) {
  CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withBoolean_(self, defaultFormat, acceptableFormats, false);
}

CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *new_CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_(NSString *defaultFormat, IOSObjectArray *acceptableFormats) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, initWithNSString_withNSStringArray_, defaultFormat, acceptableFormats)
}

CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *create_CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_(NSString *defaultFormat, IOSObjectArray *acceptableFormats) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, initWithNSString_withNSStringArray_, defaultFormat, acceptableFormats)
}

void CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *self, NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilTimeZone *timeZone) {
  CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_withBoolean_(self, defaultFormat, acceptableFormats, timeZone, false);
}

CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *new_CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_(NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilTimeZone *timeZone) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, initWithNSString_withNSStringArray_withJavaUtilTimeZone_, defaultFormat, acceptableFormats, timeZone)
}

CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *create_CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_(NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilTimeZone *timeZone) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, initWithNSString_withNSStringArray_withJavaUtilTimeZone_, defaultFormat, acceptableFormats, timeZone)
}

void CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withBoolean_(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *self, NSString *defaultFormat, IOSObjectArray *acceptableFormats, jboolean lenient) {
  CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_withBoolean_(self, defaultFormat, acceptableFormats, CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_UTC, lenient);
}

CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *new_CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withBoolean_(NSString *defaultFormat, IOSObjectArray *acceptableFormats, jboolean lenient) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, initWithNSString_withNSStringArray_withBoolean_, defaultFormat, acceptableFormats, lenient)
}

CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *create_CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withBoolean_(NSString *defaultFormat, IOSObjectArray *acceptableFormats, jboolean lenient) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, initWithNSString_withNSStringArray_withBoolean_, defaultFormat, acceptableFormats, lenient)
}

void CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_withBoolean_(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *self, NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilTimeZone *timeZone, jboolean lenient) {
  CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSString_withNSStringArray_withJavaUtilLocale_withJavaUtilTimeZone_withBoolean_(self, CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ERA_PATTERN, defaultFormat, acceptableFormats, JreLoadStatic(JavaUtilLocale, ENGLISH), timeZone, lenient);
}

CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *new_CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_withBoolean_(NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilTimeZone *timeZone, jboolean lenient) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, initWithNSString_withNSStringArray_withJavaUtilTimeZone_withBoolean_, defaultFormat, acceptableFormats, timeZone, lenient)
}

CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *create_CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_withBoolean_(NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilTimeZone *timeZone, jboolean lenient) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, initWithNSString_withNSStringArray_withJavaUtilTimeZone_withBoolean_, defaultFormat, acceptableFormats, timeZone, lenient)
}

void CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSString_withNSStringArray_withJavaUtilLocale_withJavaUtilTimeZone_withBoolean_(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *self, NSString *defaultEraFormat, NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilLocale *locale, JavaUtilTimeZone *timeZone, jboolean lenient) {
  CucumberDepsComThoughtworksXstreamConvertersBasicAbstractSingleValueConverter_init(self);
  JreStrongAssign(&self->locale_, locale);
  if (defaultEraFormat != nil) {
    JreStrongAssignAndConsume(&self->defaultEraFormat_, new_CucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withInt_withInt_withBoolean_(defaultEraFormat, timeZone, locale, 4, 20, lenient));
  }
  else {
    JreStrongAssign(&self->defaultEraFormat_, nil);
  }
  JreStrongAssignAndConsume(&self->defaultFormat_, new_CucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withInt_withInt_withBoolean_(defaultFormat, timeZone, locale, 4, 20, lenient));
  JreStrongAssign(&self->acceptableFormats_, acceptableFormats != nil ? [IOSObjectArray arrayWithLength:acceptableFormats->size_ type:CucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat_class_()] : [IOSObjectArray arrayWithLength:0 type:CucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat_class_()]);
  for (jint i = 0; i < self->acceptableFormats_->size_; i++) {
    IOSObjectArray_SetAndConsume(self->acceptableFormats_, i, new_CucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat_initWithNSString_withJavaUtilTimeZone_withInt_withInt_withBoolean_(IOSObjectArray_Get(nil_chk(acceptableFormats), i), timeZone, 1, 20, lenient));
  }
}

CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *new_CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSString_withNSStringArray_withJavaUtilLocale_withJavaUtilTimeZone_withBoolean_(NSString *defaultEraFormat, NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilLocale *locale, JavaUtilTimeZone *timeZone, jboolean lenient) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, initWithNSString_withNSString_withNSStringArray_withJavaUtilLocale_withJavaUtilTimeZone_withBoolean_, defaultEraFormat, defaultFormat, acceptableFormats, locale, timeZone, lenient)
}

CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter *create_CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSString_withNSStringArray_withJavaUtilLocale_withJavaUtilTimeZone_withBoolean_(NSString *defaultEraFormat, NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilLocale *locale, JavaUtilTimeZone *timeZone, jboolean lenient) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter, initWithNSString_withNSString_withNSStringArray_withJavaUtilLocale_withJavaUtilTimeZone_withBoolean_, defaultEraFormat, defaultFormat, acceptableFormats, locale, timeZone, lenient)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamConvertersBasicDateConverter)
