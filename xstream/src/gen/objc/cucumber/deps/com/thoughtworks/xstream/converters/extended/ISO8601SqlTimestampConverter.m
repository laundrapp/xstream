//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/converters/extended/ISO8601SqlTimestampConverter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/extended/ISO8601DateConverter.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/extended/ISO8601SqlTimestampConverter.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/sql/Timestamp.h"
#include "java/util/Date.h"

inline NSString *CucumberDepsComThoughtworksXstreamConvertersExtendedISO8601SqlTimestampConverter_get_PADDING(void);
static NSString *CucumberDepsComThoughtworksXstreamConvertersExtendedISO8601SqlTimestampConverter_PADDING = @"000000000";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberDepsComThoughtworksXstreamConvertersExtendedISO8601SqlTimestampConverter, PADDING, NSString *)

@implementation CucumberDepsComThoughtworksXstreamConvertersExtendedISO8601SqlTimestampConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberDepsComThoughtworksXstreamConvertersExtendedISO8601SqlTimestampConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  return [((IOSClass *) nil_chk(type)) isEqual:JavaSqlTimestamp_class_()];
}

- (id)fromStringWithNSString:(NSString *)str {
  jint idxFraction = [((NSString *) nil_chk(str)) java_lastIndexOf:'.'];
  jint nanos = 0;
  if (idxFraction > 0) {
    jint idx;
    for (idx = idxFraction + 1; JavaLangCharacter_isDigitWithChar_([str charAtWithInt:idx]); ++idx)
    ;
    nanos = JavaLangInteger_parseIntWithNSString_([str java_substring:idxFraction + 1 endIndex:idx]);
    str = JreStrcat("$$", [str java_substring:0 endIndex:idxFraction], [str java_substring:idx]);
  }
  JavaUtilDate *date = (JavaUtilDate *) cast_chk([super fromStringWithNSString:str], [JavaUtilDate class]);
  JavaSqlTimestamp *timestamp = create_JavaSqlTimestamp_initWithLong_([((JavaUtilDate *) nil_chk(date)) getTime]);
  [timestamp setNanosWithInt:nanos];
  return timestamp;
}

- (NSString *)toStringWithId:(id)obj {
  JavaSqlTimestamp *timestamp = (JavaSqlTimestamp *) cast_chk(obj, [JavaSqlTimestamp class]);
  NSString *str = [super toStringWithId:create_JavaUtilDate_initWithLong_(([((JavaSqlTimestamp *) nil_chk(timestamp)) getTime] / 1000) * 1000)];
  NSString *nanos = NSString_java_valueOfInt_([timestamp getNanos]);
  jint idxFraction = [((NSString *) nil_chk(str)) java_lastIndexOf:'.'];
  str = JreStrcat("$$$$", [str java_substring:0 endIndex:idxFraction + 1], [((NSString *) nil_chk(CucumberDepsComThoughtworksXstreamConvertersExtendedISO8601SqlTimestampConverter_PADDING)) java_substring:[((NSString *) nil_chk(nanos)) java_length]], nanos, [str java_substring:idxFraction + 4]);
  return str;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(canConvertWithIOSClass:);
  methods[2].selector = @selector(fromStringWithNSString:);
  methods[3].selector = @selector(toStringWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PADDING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "canConvert", "LIOSClass;", "fromString", "LNSString;", "toString", "LNSObject;", &CucumberDepsComThoughtworksXstreamConvertersExtendedISO8601SqlTimestampConverter_PADDING };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamConvertersExtendedISO8601SqlTimestampConverter = { "ISO8601SqlTimestampConverter", "cucumber.deps.com.thoughtworks.xstream.converters.extended", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamConvertersExtendedISO8601SqlTimestampConverter;
}

@end

void CucumberDepsComThoughtworksXstreamConvertersExtendedISO8601SqlTimestampConverter_init(CucumberDepsComThoughtworksXstreamConvertersExtendedISO8601SqlTimestampConverter *self) {
  CucumberDepsComThoughtworksXstreamConvertersExtendedISO8601DateConverter_init(self);
}

CucumberDepsComThoughtworksXstreamConvertersExtendedISO8601SqlTimestampConverter *new_CucumberDepsComThoughtworksXstreamConvertersExtendedISO8601SqlTimestampConverter_init() {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamConvertersExtendedISO8601SqlTimestampConverter, init)
}

CucumberDepsComThoughtworksXstreamConvertersExtendedISO8601SqlTimestampConverter *create_CucumberDepsComThoughtworksXstreamConvertersExtendedISO8601SqlTimestampConverter_init() {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamConvertersExtendedISO8601SqlTimestampConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamConvertersExtendedISO8601SqlTimestampConverter)
