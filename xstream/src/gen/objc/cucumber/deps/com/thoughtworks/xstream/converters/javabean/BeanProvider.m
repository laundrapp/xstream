//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/converters/javabean/BeanProvider.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/javabean/BeanProvider.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/javabean/ComparingPropertySorter.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/javabean/JavaBeanProvider.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/javabean/NativePropertySorter.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/javabean/PropertyDictionary.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/reflection/ObjectAccessException.h"
#include "java/beans/PropertyDescriptor.h"
#include "java/lang/ExceptionInInitializerError.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/ArrayList.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_Visitor : NSObject

@end

J2OBJC_INITIALIZED_DEFN(CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider)

IOSObjectArray *CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_NO_PARAMS;

@implementation CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithJavaUtilComparator:(id<JavaUtilComparator>)propertyNameComparator {
  CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_initWithJavaUtilComparator_(self, propertyNameComparator);
  return self;
}

- (instancetype __nonnull)initWithCucumberDepsComThoughtworksXstreamConvertersJavabeanPropertyDictionary:(CucumberDepsComThoughtworksXstreamConvertersJavabeanPropertyDictionary *)propertyDictionary {
  CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_initWithCucumberDepsComThoughtworksXstreamConvertersJavabeanPropertyDictionary_(self, propertyDictionary);
  return self;
}

- (id)newInstanceWithIOSClass:(IOSClass *)type {
  @try {
    return [((IOSClass *) nil_chk(type)) newInstance];
  }
  @catch (JavaLangInstantiationException *e) {
    @throw create_CucumberDepsComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Cannot construct ", [type getName]), e);
  }
  @catch (JavaLangIllegalAccessException *e) {
    @throw create_CucumberDepsComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Cannot construct ", [type getName]), e);
  }
  @catch (JavaLangSecurityException *e) {
    @throw create_CucumberDepsComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Cannot construct ", [type getName]), e);
  }
  @catch (JavaLangExceptionInInitializerError *e) {
    @throw create_CucumberDepsComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Cannot construct ", [type getName]), e);
  }
}

- (void)visitSerializablePropertiesWithId:(id)object
withCucumberDepsComThoughtworksXstreamConvertersJavabeanJavaBeanProvider_Visitor:(id<CucumberDepsComThoughtworksXstreamConvertersJavabeanJavaBeanProvider_Visitor>)visitor {
  IOSObjectArray *propertyDescriptors = [self getSerializablePropertiesWithId:object];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(propertyDescriptors))->size_; i++) {
    JavaBeansPropertyDescriptor *property = IOSObjectArray_Get(propertyDescriptors, i);
    @try {
      JavaLangReflectMethod *readMethod = [((JavaBeansPropertyDescriptor *) nil_chk(property)) getReadMethod];
      NSString *name = [property getName];
      IOSClass *definedIn = [((JavaLangReflectMethod *) nil_chk(readMethod)) getDeclaringClass];
      if ([((id<CucumberDepsComThoughtworksXstreamConvertersJavabeanJavaBeanProvider_Visitor>) nil_chk(visitor)) shouldVisitWithNSString:name withIOSClass:definedIn]) {
        id value = [readMethod invokeWithId:object withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
        [visitor visitWithNSString:name withIOSClass:[property getPropertyType] withIOSClass:definedIn withId:value];
      }
    }
    @catch (JavaLangIllegalArgumentException *e) {
      @throw create_CucumberDepsComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@C$", @"Could not get property ", [nil_chk(object) java_getClass], '.', [property getName]), e);
    }
    @catch (JavaLangIllegalAccessException *e) {
      @throw create_CucumberDepsComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@C$", @"Could not get property ", [nil_chk(object) java_getClass], '.', [property getName]), e);
    }
    @catch (JavaLangReflectInvocationTargetException *e) {
      @throw create_CucumberDepsComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@C$", @"Could not get property ", [nil_chk(object) java_getClass], '.', [property getName]), e);
    }
  }
}

- (void)writePropertyWithId:(id)object
               withNSString:(NSString *)propertyName
                     withId:(id)value {
  JavaBeansPropertyDescriptor *property = [self getPropertyWithNSString:propertyName withIOSClass:[nil_chk(object) java_getClass]];
  @try {
    [((JavaLangReflectMethod *) nil_chk([((JavaBeansPropertyDescriptor *) nil_chk(property)) getWriteMethod])) invokeWithId:object withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ value } count:1 type:NSObject_class_()]];
  }
  @catch (JavaLangIllegalArgumentException *e) {
    @throw create_CucumberDepsComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@C$", @"Could not set property ", [object java_getClass], '.', [property getName]), e);
  }
  @catch (JavaLangIllegalAccessException *e) {
    @throw create_CucumberDepsComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@C$", @"Could not set property ", [object java_getClass], '.', [property getName]), e);
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    @throw create_CucumberDepsComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@C$", @"Could not set property ", [object java_getClass], '.', [property getName]), e);
  }
}

- (IOSClass *)getPropertyTypeWithId:(id)object
                       withNSString:(NSString *)name {
  return [((JavaBeansPropertyDescriptor *) nil_chk([self getPropertyWithNSString:name withIOSClass:[nil_chk(object) java_getClass]])) getPropertyType];
}

- (jboolean)propertyDefinedInClassWithNSString:(NSString *)name
                                  withIOSClass:(IOSClass *)type {
  return [self getPropertyWithNSString:name withIOSClass:type] != nil;
}

- (jboolean)canInstantiateWithIOSClass:(IOSClass *)type {
  @try {
    return [self newInstanceWithIOSClass:type] != nil;
  }
  @catch (CucumberDepsComThoughtworksXstreamConvertersReflectionObjectAccessException *e) {
    return false;
  }
}

- (JavaLangReflectConstructor *)getDefaultConstrutorWithIOSClass:(IOSClass *)type {
  IOSObjectArray *constructors = [((IOSClass *) nil_chk(type)) getConstructors];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(constructors))->size_; i++) {
    JavaLangReflectConstructor *c = IOSObjectArray_Get(constructors, i);
    if (((IOSObjectArray *) nil_chk([((JavaLangReflectConstructor *) nil_chk(c)) getParameterTypes]))->size_ == 0 && JavaLangReflectModifier_isPublicWithInt_([c getModifiers])) return c;
  }
  return nil;
}

- (IOSObjectArray *)getSerializablePropertiesWithId:(id)object {
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  for (id<JavaUtilIterator> iter = [((CucumberDepsComThoughtworksXstreamConvertersJavabeanPropertyDictionary *) nil_chk(propertyDictionary_)) propertiesForWithIOSClass:[nil_chk(object) java_getClass]]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    JavaBeansPropertyDescriptor *descriptor = (JavaBeansPropertyDescriptor *) cast_chk([iter next], [JavaBeansPropertyDescriptor class]);
    if ([self canStreamPropertyWithJavaBeansPropertyDescriptor:descriptor]) {
      [result addWithId:descriptor];
    }
  }
  return (IOSObjectArray *) cast_check([result toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[result size] type:JavaBeansPropertyDescriptor_class_()]], IOSClass_arrayType(JavaBeansPropertyDescriptor_class_(), 1));
}

- (jboolean)canStreamPropertyWithJavaBeansPropertyDescriptor:(JavaBeansPropertyDescriptor *)descriptor {
  return [((JavaBeansPropertyDescriptor *) nil_chk(descriptor)) getReadMethod] != nil && [descriptor getWriteMethod] != nil;
}

- (jboolean)propertyWriteableWithNSString:(NSString *)name
                             withIOSClass:(IOSClass *)type {
  JavaBeansPropertyDescriptor *property = [self getPropertyWithNSString:name withIOSClass:type];
  return [((JavaBeansPropertyDescriptor *) nil_chk(property)) getWriteMethod] != nil;
}

- (JavaBeansPropertyDescriptor *)getPropertyWithNSString:(NSString *)name
                                            withIOSClass:(IOSClass *)type {
  return [((CucumberDepsComThoughtworksXstreamConvertersJavabeanPropertyDictionary *) nil_chk(propertyDictionary_)) propertyDescriptorWithIOSClass:type withNSString:name];
}

- (void)dealloc {
  RELEASE_(propertyDictionary_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 3, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectConstructor;", 0x4, 13, 3, -1, -1, -1, -1 },
    { NULL, "[LJavaBeansPropertyDescriptor;", 0x4, 14, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 11, -1, -1, -1, -1 },
    { NULL, "LJavaBeansPropertyDescriptor;", 0x4, 19, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaUtilComparator:);
  methods[2].selector = @selector(initWithCucumberDepsComThoughtworksXstreamConvertersJavabeanPropertyDictionary:);
  methods[3].selector = @selector(newInstanceWithIOSClass:);
  methods[4].selector = @selector(visitSerializablePropertiesWithId:withCucumberDepsComThoughtworksXstreamConvertersJavabeanJavaBeanProvider_Visitor:);
  methods[5].selector = @selector(writePropertyWithId:withNSString:withId:);
  methods[6].selector = @selector(getPropertyTypeWithId:withNSString:);
  methods[7].selector = @selector(propertyDefinedInClassWithNSString:withIOSClass:);
  methods[8].selector = @selector(canInstantiateWithIOSClass:);
  methods[9].selector = @selector(getDefaultConstrutorWithIOSClass:);
  methods[10].selector = @selector(getSerializablePropertiesWithId:);
  methods[11].selector = @selector(canStreamPropertyWithJavaBeansPropertyDescriptor:);
  methods[12].selector = @selector(propertyWriteableWithNSString:withIOSClass:);
  methods[13].selector = @selector(getPropertyWithNSString:withIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NO_PARAMS", "[LNSObject;", .constantValue.asLong = 0, 0x1c, -1, 20, -1, -1 },
    { "propertyDictionary_", "LCucumberDepsComThoughtworksXstreamConvertersJavabeanPropertyDictionary;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilComparator;", "LCucumberDepsComThoughtworksXstreamConvertersJavabeanPropertyDictionary;", "newInstance", "LIOSClass;", "visitSerializableProperties", "LNSObject;LCucumberDepsComThoughtworksXstreamConvertersJavabeanJavaBeanProvider_Visitor;", "writeProperty", "LNSObject;LNSString;LNSObject;", "getPropertyType", "LNSObject;LNSString;", "propertyDefinedInClass", "LNSString;LIOSClass;", "canInstantiate", "getDefaultConstrutor", "getSerializableProperties", "LNSObject;", "canStreamProperty", "LJavaBeansPropertyDescriptor;", "propertyWriteable", "getProperty", &CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_NO_PARAMS, "LCucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_Visitor;" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider = { "BeanProvider", "cucumber.deps.com.thoughtworks.xstream.converters.javabean", ptrTable, methods, fields, 7, 0x1, 14, 2, -1, 21, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider;
}

+ (void)initialize {
  if (self == [CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider class]) {
    JreStrongAssignAndConsume(&CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_NO_PARAMS, [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
    J2OBJC_SET_INITIALIZED(CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider)
  }
}

@end

void CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_init(CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider *self) {
  CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_initWithCucumberDepsComThoughtworksXstreamConvertersJavabeanPropertyDictionary_(self, create_CucumberDepsComThoughtworksXstreamConvertersJavabeanPropertyDictionary_initWithCucumberDepsComThoughtworksXstreamConvertersJavabeanPropertySorter_(create_CucumberDepsComThoughtworksXstreamConvertersJavabeanNativePropertySorter_init()));
}

CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider *new_CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_init() {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider, init)
}

CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider *create_CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_init() {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider, init)
}

void CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_initWithJavaUtilComparator_(CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider *self, id<JavaUtilComparator> propertyNameComparator) {
  CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_initWithCucumberDepsComThoughtworksXstreamConvertersJavabeanPropertyDictionary_(self, create_CucumberDepsComThoughtworksXstreamConvertersJavabeanPropertyDictionary_initWithCucumberDepsComThoughtworksXstreamConvertersJavabeanPropertySorter_(create_CucumberDepsComThoughtworksXstreamConvertersJavabeanComparingPropertySorter_initWithJavaUtilComparator_(propertyNameComparator)));
}

CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider *new_CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_initWithJavaUtilComparator_(id<JavaUtilComparator> propertyNameComparator) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider, initWithJavaUtilComparator_, propertyNameComparator)
}

CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider *create_CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_initWithJavaUtilComparator_(id<JavaUtilComparator> propertyNameComparator) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider, initWithJavaUtilComparator_, propertyNameComparator)
}

void CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_initWithCucumberDepsComThoughtworksXstreamConvertersJavabeanPropertyDictionary_(CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider *self, CucumberDepsComThoughtworksXstreamConvertersJavabeanPropertyDictionary *propertyDictionary) {
  NSObject_init(self);
  JreStrongAssign(&self->propertyDictionary_, propertyDictionary);
}

CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider *new_CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_initWithCucumberDepsComThoughtworksXstreamConvertersJavabeanPropertyDictionary_(CucumberDepsComThoughtworksXstreamConvertersJavabeanPropertyDictionary *propertyDictionary) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider, initWithCucumberDepsComThoughtworksXstreamConvertersJavabeanPropertyDictionary_, propertyDictionary)
}

CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider *create_CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_initWithCucumberDepsComThoughtworksXstreamConvertersJavabeanPropertyDictionary_(CucumberDepsComThoughtworksXstreamConvertersJavabeanPropertyDictionary *propertyDictionary) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider, initWithCucumberDepsComThoughtworksXstreamConvertersJavabeanPropertyDictionary_, propertyDictionary)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider)

@implementation CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_Visitor

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { "LCucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider;" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_Visitor = { "Visitor", "cucumber.deps.com.thoughtworks.xstream.converters.javabean", ptrTable, NULL, NULL, 7, 0x609, 0, 0, 0, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_Visitor;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamConvertersJavabeanBeanProvider_Visitor)
