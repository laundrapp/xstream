//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/core/JVM.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/reflection/FieldDictionary.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/reflection/ObjectAccessException.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/reflection/PureJavaReflectionProvider.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/reflection/ReflectionProvider.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/JVM.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/util/CustomObjectOutputStream.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/util/DependencyInjectionFactory.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/util/PresortedMap.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/util/PresortedSet.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Double.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IncompatibleClassChangeError.h"
#include "java/lang/Integer.h"
#include "java/lang/LinkageError.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Short.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Method.h"
#include "java/text/AttributedString.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Comparator.h"
#include "java/util/Date.h"
#include "java/util/Set.h"
#include "java/util/SortedMap.h"
#include "java/util/SortedSet.h"
#include "java/util/TreeMap.h"
#include "java/util/TreeSet.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface CucumberDepsComThoughtworksXstreamCoreJVM () {
 @public
  id<CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider_;
}

/*!
 @brief Parses the java version system property to determine the major java version,
  i.e.1.x
 @return A float of the form 1.x
 */
+ (jfloat)getMajorJavaVersion;

+ (jboolean)isIBM;

/*!
 @since 1.4
 */
+ (jboolean)isAndroid;

+ (jboolean)canUseSunUnsafeReflectionProvider;

+ (jboolean)canUseSunLimitedUnsafeReflectionProvider;

@end

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamCoreJVM, reflectionProvider_, id<CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider>)

inline jboolean CucumberDepsComThoughtworksXstreamCoreJVM_get_isAWTAvailable_(void);
static jboolean CucumberDepsComThoughtworksXstreamCoreJVM_isAWTAvailable_;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(CucumberDepsComThoughtworksXstreamCoreJVM, isAWTAvailable_, jboolean)

inline jboolean CucumberDepsComThoughtworksXstreamCoreJVM_get_isSwingAvailable_(void);
static jboolean CucumberDepsComThoughtworksXstreamCoreJVM_isSwingAvailable_;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(CucumberDepsComThoughtworksXstreamCoreJVM, isSwingAvailable_, jboolean)

inline jboolean CucumberDepsComThoughtworksXstreamCoreJVM_get_isSQLAvailable_(void);
static jboolean CucumberDepsComThoughtworksXstreamCoreJVM_isSQLAvailable_;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(CucumberDepsComThoughtworksXstreamCoreJVM, isSQLAvailable_, jboolean)

inline jboolean CucumberDepsComThoughtworksXstreamCoreJVM_get_canAllocateWithUnsafe(void);
static jboolean CucumberDepsComThoughtworksXstreamCoreJVM_canAllocateWithUnsafe;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(CucumberDepsComThoughtworksXstreamCoreJVM, canAllocateWithUnsafe, jboolean)

inline jboolean CucumberDepsComThoughtworksXstreamCoreJVM_get_canWriteWithUnsafe(void);
static jboolean CucumberDepsComThoughtworksXstreamCoreJVM_canWriteWithUnsafe;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(CucumberDepsComThoughtworksXstreamCoreJVM, canWriteWithUnsafe, jboolean)

inline jboolean CucumberDepsComThoughtworksXstreamCoreJVM_get_optimizedTreeSetAddAll(void);
static jboolean CucumberDepsComThoughtworksXstreamCoreJVM_optimizedTreeSetAddAll;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(CucumberDepsComThoughtworksXstreamCoreJVM, optimizedTreeSetAddAll, jboolean)

inline jboolean CucumberDepsComThoughtworksXstreamCoreJVM_get_optimizedTreeMapPutAll(void);
static jboolean CucumberDepsComThoughtworksXstreamCoreJVM_optimizedTreeMapPutAll;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(CucumberDepsComThoughtworksXstreamCoreJVM, optimizedTreeMapPutAll, jboolean)

inline jboolean CucumberDepsComThoughtworksXstreamCoreJVM_get_canParseUTCDateFormat_(void);
static jboolean CucumberDepsComThoughtworksXstreamCoreJVM_canParseUTCDateFormat_;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(CucumberDepsComThoughtworksXstreamCoreJVM, canParseUTCDateFormat_, jboolean)

inline jboolean CucumberDepsComThoughtworksXstreamCoreJVM_get_canCreateDerivedObjectOutputStream_(void);
static jboolean CucumberDepsComThoughtworksXstreamCoreJVM_canCreateDerivedObjectOutputStream_;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(CucumberDepsComThoughtworksXstreamCoreJVM, canCreateDerivedObjectOutputStream_, jboolean)

inline NSString *CucumberDepsComThoughtworksXstreamCoreJVM_get_vendor(void);
static NSString *CucumberDepsComThoughtworksXstreamCoreJVM_vendor;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberDepsComThoughtworksXstreamCoreJVM, vendor, NSString *)

inline jfloat CucumberDepsComThoughtworksXstreamCoreJVM_get_majorJavaVersion(void);
static jfloat CucumberDepsComThoughtworksXstreamCoreJVM_majorJavaVersion;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(CucumberDepsComThoughtworksXstreamCoreJVM, majorJavaVersion, jfloat)

inline jfloat CucumberDepsComThoughtworksXstreamCoreJVM_get_DEFAULT_JAVA_VERSION(void);
#define CucumberDepsComThoughtworksXstreamCoreJVM_DEFAULT_JAVA_VERSION 1.4f
J2OBJC_STATIC_FIELD_CONSTANT(CucumberDepsComThoughtworksXstreamCoreJVM, DEFAULT_JAVA_VERSION, jfloat)

inline jboolean CucumberDepsComThoughtworksXstreamCoreJVM_get_reverseFieldOrder(void);
#define CucumberDepsComThoughtworksXstreamCoreJVM_reverseFieldOrder false
J2OBJC_STATIC_FIELD_CONSTANT(CucumberDepsComThoughtworksXstreamCoreJVM, reverseFieldOrder, jboolean)

inline IOSClass *CucumberDepsComThoughtworksXstreamCoreJVM_get_reflectionProviderType(void);
static IOSClass *CucumberDepsComThoughtworksXstreamCoreJVM_reflectionProviderType;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberDepsComThoughtworksXstreamCoreJVM, reflectionProviderType, IOSClass *)

__attribute__((unused)) static jfloat CucumberDepsComThoughtworksXstreamCoreJVM_getMajorJavaVersion(void);

__attribute__((unused)) static jboolean CucumberDepsComThoughtworksXstreamCoreJVM_isIBM(void);

__attribute__((unused)) static jboolean CucumberDepsComThoughtworksXstreamCoreJVM_isAndroid(void);

__attribute__((unused)) static jboolean CucumberDepsComThoughtworksXstreamCoreJVM_canUseSunUnsafeReflectionProvider(void);

__attribute__((unused)) static jboolean CucumberDepsComThoughtworksXstreamCoreJVM_canUseSunLimitedUnsafeReflectionProvider(void);

@interface CucumberDepsComThoughtworksXstreamCoreJVM_Test () {
 @public
  id o_;
  jchar c_;
  jbyte b_;
  jshort s_;
  jint i_;
  jlong l_;
  jfloat f_;
  jdouble d_;
  jboolean bool__;
}

@end

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamCoreJVM_Test, o_, id)

@interface CucumberDepsComThoughtworksXstreamCoreJVM_1 : NSObject < JavaUtilComparator >

- (instancetype __nonnull)init;

- (jint)compareWithId:(id)o1
               withId:(id)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberDepsComThoughtworksXstreamCoreJVM_1)

__attribute__((unused)) static void CucumberDepsComThoughtworksXstreamCoreJVM_1_init(CucumberDepsComThoughtworksXstreamCoreJVM_1 *self);

__attribute__((unused)) static CucumberDepsComThoughtworksXstreamCoreJVM_1 *new_CucumberDepsComThoughtworksXstreamCoreJVM_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberDepsComThoughtworksXstreamCoreJVM_1 *create_CucumberDepsComThoughtworksXstreamCoreJVM_1_init(void);

J2OBJC_INITIALIZED_DEFN(CucumberDepsComThoughtworksXstreamCoreJVM)

@implementation CucumberDepsComThoughtworksXstreamCoreJVM

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberDepsComThoughtworksXstreamCoreJVM_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jfloat)getMajorJavaVersion {
  return CucumberDepsComThoughtworksXstreamCoreJVM_getMajorJavaVersion();
}

+ (jboolean)is14 {
  return CucumberDepsComThoughtworksXstreamCoreJVM_is14();
}

+ (jboolean)is15 {
  return CucumberDepsComThoughtworksXstreamCoreJVM_is15();
}

+ (jboolean)is16 {
  return CucumberDepsComThoughtworksXstreamCoreJVM_is16();
}

+ (jboolean)is17 {
  return CucumberDepsComThoughtworksXstreamCoreJVM_is17();
}

+ (jboolean)is18 {
  return CucumberDepsComThoughtworksXstreamCoreJVM_is18();
}

+ (jboolean)isIBM {
  return CucumberDepsComThoughtworksXstreamCoreJVM_isIBM();
}

+ (jboolean)isAndroid {
  return CucumberDepsComThoughtworksXstreamCoreJVM_isAndroid();
}

+ (IOSClass *)loadClassForNameWithNSString:(NSString *)name {
  return CucumberDepsComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_(name);
}

- (IOSClass *)loadClassWithNSString:(NSString *)name {
  return CucumberDepsComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_withBoolean_(name, true);
}

+ (IOSClass *)loadClassForNameWithNSString:(NSString *)name
                               withBoolean:(jboolean)initialize_ {
  return CucumberDepsComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_withBoolean_(name, initialize_);
}

- (IOSClass *)loadClassWithNSString:(NSString *)name
                        withBoolean:(jboolean)initialize_ {
  return CucumberDepsComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_withBoolean_(name, initialize_);
}

+ (id<CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider>)newReflectionProvider {
  return CucumberDepsComThoughtworksXstreamCoreJVM_newReflectionProvider();
}

+ (id<CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider>)newReflectionProviderWithCucumberDepsComThoughtworksXstreamConvertersReflectionFieldDictionary:(CucumberDepsComThoughtworksXstreamConvertersReflectionFieldDictionary *)dictionary {
  return CucumberDepsComThoughtworksXstreamCoreJVM_newReflectionProviderWithCucumberDepsComThoughtworksXstreamConvertersReflectionFieldDictionary_(dictionary);
}

+ (IOSClass *)getStaxInputFactory {
  return CucumberDepsComThoughtworksXstreamCoreJVM_getStaxInputFactory();
}

+ (IOSClass *)getStaxOutputFactory {
  return CucumberDepsComThoughtworksXstreamCoreJVM_getStaxOutputFactory();
}

- (id<CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider>)bestReflectionProvider {
  @synchronized(self) {
    if (reflectionProvider_ == nil) {
      JreStrongAssign(&reflectionProvider_, CucumberDepsComThoughtworksXstreamCoreJVM_newReflectionProvider());
    }
    return JreRetainedLocalValue(reflectionProvider_);
  }
}

+ (jboolean)canUseSunUnsafeReflectionProvider {
  return CucumberDepsComThoughtworksXstreamCoreJVM_canUseSunUnsafeReflectionProvider();
}

+ (jboolean)canUseSunLimitedUnsafeReflectionProvider {
  return CucumberDepsComThoughtworksXstreamCoreJVM_canUseSunLimitedUnsafeReflectionProvider();
}

+ (jboolean)reverseFieldDefinition {
  return CucumberDepsComThoughtworksXstreamCoreJVM_reverseFieldDefinition();
}

+ (jboolean)isAWTAvailable {
  return CucumberDepsComThoughtworksXstreamCoreJVM_isAWTAvailable();
}

- (jboolean)supportsAWT {
  return CucumberDepsComThoughtworksXstreamCoreJVM_isAWTAvailable_;
}

+ (jboolean)isSwingAvailable {
  return CucumberDepsComThoughtworksXstreamCoreJVM_isSwingAvailable();
}

- (jboolean)supportsSwing {
  return CucumberDepsComThoughtworksXstreamCoreJVM_isSwingAvailable_;
}

+ (jboolean)isSQLAvailable {
  return CucumberDepsComThoughtworksXstreamCoreJVM_isSQLAvailable();
}

- (jboolean)supportsSQL {
  return CucumberDepsComThoughtworksXstreamCoreJVM_isSQLAvailable_;
}

+ (jboolean)hasOptimizedTreeSetAddAll {
  return CucumberDepsComThoughtworksXstreamCoreJVM_hasOptimizedTreeSetAddAll();
}

+ (jboolean)hasOptimizedTreeMapPutAll {
  return CucumberDepsComThoughtworksXstreamCoreJVM_hasOptimizedTreeMapPutAll();
}

+ (jboolean)canParseUTCDateFormat {
  return CucumberDepsComThoughtworksXstreamCoreJVM_canParseUTCDateFormat();
}

+ (jboolean)canCreateDerivedObjectOutputStream {
  return CucumberDepsComThoughtworksXstreamCoreJVM_canCreateDerivedObjectOutputStream();
}

- (void)flushCache {
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  CucumberDepsComThoughtworksXstreamCoreJVM_mainWithNSStringArray_(args);
}

- (void)dealloc {
  RELEASE_(reflectionProvider_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1a, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider;", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x9, -1, -1, 6, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x9, -1, -1, 6, -1, -1, -1 },
    { NULL, "LCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMajorJavaVersion);
  methods[2].selector = @selector(is14);
  methods[3].selector = @selector(is15);
  methods[4].selector = @selector(is16);
  methods[5].selector = @selector(is17);
  methods[6].selector = @selector(is18);
  methods[7].selector = @selector(isIBM);
  methods[8].selector = @selector(isAndroid);
  methods[9].selector = @selector(loadClassForNameWithNSString:);
  methods[10].selector = @selector(loadClassWithNSString:);
  methods[11].selector = @selector(loadClassForNameWithNSString:withBoolean:);
  methods[12].selector = @selector(loadClassWithNSString:withBoolean:);
  methods[13].selector = @selector(newReflectionProvider);
  methods[14].selector = @selector(newReflectionProviderWithCucumberDepsComThoughtworksXstreamConvertersReflectionFieldDictionary:);
  methods[15].selector = @selector(getStaxInputFactory);
  methods[16].selector = @selector(getStaxOutputFactory);
  methods[17].selector = @selector(bestReflectionProvider);
  methods[18].selector = @selector(canUseSunUnsafeReflectionProvider);
  methods[19].selector = @selector(canUseSunLimitedUnsafeReflectionProvider);
  methods[20].selector = @selector(reverseFieldDefinition);
  methods[21].selector = @selector(isAWTAvailable);
  methods[22].selector = @selector(supportsAWT);
  methods[23].selector = @selector(isSwingAvailable);
  methods[24].selector = @selector(supportsSwing);
  methods[25].selector = @selector(isSQLAvailable);
  methods[26].selector = @selector(supportsSQL);
  methods[27].selector = @selector(hasOptimizedTreeSetAddAll);
  methods[28].selector = @selector(hasOptimizedTreeMapPutAll);
  methods[29].selector = @selector(canParseUTCDateFormat);
  methods[30].selector = @selector(canCreateDerivedObjectOutputStream);
  methods[31].selector = @selector(flushCache);
  methods[32].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "reflectionProvider_", "LCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isAWTAvailable_", "Z", .constantValue.asLong = 0, 0x1a, 9, 10, -1, -1 },
    { "isSwingAvailable_", "Z", .constantValue.asLong = 0, 0x1a, 11, 12, -1, -1 },
    { "isSQLAvailable_", "Z", .constantValue.asLong = 0, 0x1a, 13, 14, -1, -1 },
    { "canAllocateWithUnsafe", "Z", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "canWriteWithUnsafe", "Z", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "optimizedTreeSetAddAll", "Z", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "optimizedTreeMapPutAll", "Z", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "canParseUTCDateFormat_", "Z", .constantValue.asLong = 0, 0x1a, 19, 20, -1, -1 },
    { "canCreateDerivedObjectOutputStream_", "Z", .constantValue.asLong = 0, 0x1a, 21, 22, -1, -1 },
    { "vendor", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "majorJavaVersion", "F", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "DEFAULT_JAVA_VERSION", "F", .constantValue.asFloat = CucumberDepsComThoughtworksXstreamCoreJVM_DEFAULT_JAVA_VERSION, 0x1a, -1, -1, -1, -1 },
    { "reverseFieldOrder", "Z", .constantValue.asBOOL = CucumberDepsComThoughtworksXstreamCoreJVM_reverseFieldOrder, 0x1a, -1, -1, -1, -1 },
    { "reflectionProviderType", "LIOSClass;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
  };
  static const void *ptrTable[] = { "loadClassForName", "LNSString;", "loadClass", "LNSString;Z", "newReflectionProvider", "LCucumberDepsComThoughtworksXstreamConvertersReflectionFieldDictionary;", "LJavaLangClassNotFoundException;", "main", "[LNSString;", "isAWTAvailable", &CucumberDepsComThoughtworksXstreamCoreJVM_isAWTAvailable_, "isSwingAvailable", &CucumberDepsComThoughtworksXstreamCoreJVM_isSwingAvailable_, "isSQLAvailable", &CucumberDepsComThoughtworksXstreamCoreJVM_isSQLAvailable_, &CucumberDepsComThoughtworksXstreamCoreJVM_canAllocateWithUnsafe, &CucumberDepsComThoughtworksXstreamCoreJVM_canWriteWithUnsafe, &CucumberDepsComThoughtworksXstreamCoreJVM_optimizedTreeSetAddAll, &CucumberDepsComThoughtworksXstreamCoreJVM_optimizedTreeMapPutAll, "canParseUTCDateFormat", &CucumberDepsComThoughtworksXstreamCoreJVM_canParseUTCDateFormat_, "canCreateDerivedObjectOutputStream", &CucumberDepsComThoughtworksXstreamCoreJVM_canCreateDerivedObjectOutputStream_, &CucumberDepsComThoughtworksXstreamCoreJVM_vendor, &CucumberDepsComThoughtworksXstreamCoreJVM_majorJavaVersion, &CucumberDepsComThoughtworksXstreamCoreJVM_reflectionProviderType, "LCucumberDepsComThoughtworksXstreamCoreJVM_Test;" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamCoreJVM = { "JVM", "cucumber.deps.com.thoughtworks.xstream.core", ptrTable, methods, fields, 7, 0x1, 33, 15, -1, 26, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamCoreJVM;
}

+ (void)initialize {
  if (self == [CucumberDepsComThoughtworksXstreamCoreJVM class]) {
    JreStrongAssign(&CucumberDepsComThoughtworksXstreamCoreJVM_vendor, JavaLangSystem_getPropertyWithNSString_(@"java.vm.vendor"));
    CucumberDepsComThoughtworksXstreamCoreJVM_majorJavaVersion = CucumberDepsComThoughtworksXstreamCoreJVM_getMajorJavaVersion();
    {
      jboolean test = true;
      id unsafe = nil;
      @try {
        IOSClass *unsafeClass = IOSClass_forName_(@"sun.misc.Unsafe");
        JavaLangReflectField *unsafeField = [((IOSClass *) nil_chk(unsafeClass)) getDeclaredField:@"theUnsafe"];
        [((JavaLangReflectField *) nil_chk(unsafeField)) setAccessibleWithBoolean:true];
        unsafe = [unsafeField getWithId:nil];
        JavaLangReflectMethod *allocateInstance = [unsafeClass getDeclaredMethod:@"allocateInstance" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ IOSClass_class_() } count:1 type:IOSClass_class_()]];
        [((JavaLangReflectMethod *) nil_chk(allocateInstance)) setAccessibleWithBoolean:true];
        test = ([allocateInstance invokeWithId:unsafe withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ CucumberDepsComThoughtworksXstreamCoreJVM_Test_class_() } count:1 type:NSObject_class_()]] != nil);
      }
      @catch (JavaLangException *e) {
        test = false;
      }
      @catch (JavaLangError *e) {
        test = false;
      }
      CucumberDepsComThoughtworksXstreamCoreJVM_canAllocateWithUnsafe = test;
      test = false;
      IOSClass *type = CucumberDepsComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider_class_();
      if (CucumberDepsComThoughtworksXstreamCoreJVM_canUseSunUnsafeReflectionProvider()) {
        IOSClass *cls = CucumberDepsComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_(@"cucumber.deps.com.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider");
        if (cls != nil) {
          @try {
            id<CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider> provider = (id<CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider>) cast_check(CucumberDepsComThoughtworksXstreamCoreUtilDependencyInjectionFactory_newInstanceWithIOSClass_withNSObjectArray_(cls, nil), CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider_class_());
            CucumberDepsComThoughtworksXstreamCoreJVM_Test *t = (CucumberDepsComThoughtworksXstreamCoreJVM_Test *) cast_chk([((id<CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(provider)) newInstanceWithIOSClass:CucumberDepsComThoughtworksXstreamCoreJVM_Test_class_()], [CucumberDepsComThoughtworksXstreamCoreJVM_Test class]);
            @try {
              [provider writeFieldWithId:t withNSString:@"o" withId:@"object" withIOSClass:CucumberDepsComThoughtworksXstreamCoreJVM_Test_class_()];
              [provider writeFieldWithId:t withNSString:@"c" withId:create_JavaLangCharacter_initWithChar_('c') withIOSClass:CucumberDepsComThoughtworksXstreamCoreJVM_Test_class_()];
              [provider writeFieldWithId:t withNSString:@"b" withId:create_JavaLangByte_initWithByte_((jbyte) 1) withIOSClass:CucumberDepsComThoughtworksXstreamCoreJVM_Test_class_()];
              [provider writeFieldWithId:t withNSString:@"s" withId:create_JavaLangShort_initWithShort_((jshort) 1) withIOSClass:CucumberDepsComThoughtworksXstreamCoreJVM_Test_class_()];
              [provider writeFieldWithId:t withNSString:@"i" withId:create_JavaLangInteger_initWithInt_(1) withIOSClass:CucumberDepsComThoughtworksXstreamCoreJVM_Test_class_()];
              [provider writeFieldWithId:t withNSString:@"l" withId:create_JavaLangLong_initWithLong_(1) withIOSClass:CucumberDepsComThoughtworksXstreamCoreJVM_Test_class_()];
              [provider writeFieldWithId:t withNSString:@"f" withId:create_JavaLangFloat_initWithFloat_(1) withIOSClass:CucumberDepsComThoughtworksXstreamCoreJVM_Test_class_()];
              [provider writeFieldWithId:t withNSString:@"d" withId:create_JavaLangDouble_initWithDouble_(1) withIOSClass:CucumberDepsComThoughtworksXstreamCoreJVM_Test_class_()];
              [provider writeFieldWithId:t withNSString:@"bool" withId:JreLoadStatic(JavaLangBoolean, TRUE) withIOSClass:CucumberDepsComThoughtworksXstreamCoreJVM_Test_class_()];
              test = true;
            }
            @catch (JavaLangIncompatibleClassChangeError *e) {
              cls = nil;
            }
            @catch (CucumberDepsComThoughtworksXstreamConvertersReflectionObjectAccessException *e) {
              cls = nil;
            }
            if (cls == nil) {
              cls = CucumberDepsComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_(@"cucumber.deps.com.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider");
            }
            type = cls;
          }
          @catch (CucumberDepsComThoughtworksXstreamConvertersReflectionObjectAccessException *e) {
          }
        }
      }
      JreStrongAssign(&CucumberDepsComThoughtworksXstreamCoreJVM_reflectionProviderType, type);
      CucumberDepsComThoughtworksXstreamCoreJVM_canWriteWithUnsafe = test;
      id<JavaUtilComparator> comparator = create_CucumberDepsComThoughtworksXstreamCoreJVM_1_init();
      id<JavaUtilSortedMap> map = create_CucumberDepsComThoughtworksXstreamCoreUtilPresortedMap_initWithJavaUtilComparator_(comparator);
      [map putWithId:@"one" withId:nil];
      [map putWithId:@"two" withId:nil];
      @try {
        [create_JavaUtilTreeMap_initWithJavaUtilComparator_(comparator) putAllWithJavaUtilMap:map];
        test = true;
      }
      @catch (JavaLangRuntimeException *e) {
        test = false;
      }
      CucumberDepsComThoughtworksXstreamCoreJVM_optimizedTreeMapPutAll = test;
      id<JavaUtilSortedSet> set = create_CucumberDepsComThoughtworksXstreamCoreUtilPresortedSet_initWithJavaUtilComparator_(comparator);
      [set addAllWithJavaUtilCollection:[map keySet]];
      @try {
        [create_JavaUtilTreeSet_initWithJavaUtilComparator_(comparator) addAllWithJavaUtilCollection:set];
        test = true;
      }
      @catch (JavaLangRuntimeException *e) {
        test = false;
      }
      CucumberDepsComThoughtworksXstreamCoreJVM_optimizedTreeSetAddAll = test;
      @try {
        [create_JavaTextSimpleDateFormat_initWithNSString_(@"z") parseWithNSString:@"UTC"];
        test = true;
      }
      @catch (JavaTextParseException *e) {
        test = false;
      }
      CucumberDepsComThoughtworksXstreamCoreJVM_canParseUTCDateFormat_ = test;
      @try {
        test = (create_CucumberDepsComThoughtworksXstreamCoreUtilCustomObjectOutputStream_initWithCucumberDepsComThoughtworksXstreamCoreUtilCustomObjectOutputStream_StreamCallback_(nil) != nil);
      }
      @catch (JavaLangRuntimeException *e) {
        test = false;
      }
      @catch (JavaIoIOException *e) {
        test = false;
      }
      CucumberDepsComThoughtworksXstreamCoreJVM_canCreateDerivedObjectOutputStream_ = test;
      CucumberDepsComThoughtworksXstreamCoreJVM_isAWTAvailable_ = (CucumberDepsComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_withBoolean_(@"java.awt.Color", false) != nil);
      CucumberDepsComThoughtworksXstreamCoreJVM_isSwingAvailable_ = (CucumberDepsComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_withBoolean_(@"javax.swing.LookAndFeel", false) != nil);
      CucumberDepsComThoughtworksXstreamCoreJVM_isSQLAvailable_ = (CucumberDepsComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_(@"java.sql.Date") != nil);
    }
    J2OBJC_SET_INITIALIZED(CucumberDepsComThoughtworksXstreamCoreJVM)
  }
}

@end

void CucumberDepsComThoughtworksXstreamCoreJVM_init(CucumberDepsComThoughtworksXstreamCoreJVM *self) {
  NSObject_init(self);
}

CucumberDepsComThoughtworksXstreamCoreJVM *new_CucumberDepsComThoughtworksXstreamCoreJVM_init() {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamCoreJVM, init)
}

CucumberDepsComThoughtworksXstreamCoreJVM *create_CucumberDepsComThoughtworksXstreamCoreJVM_init() {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamCoreJVM, init)
}

jfloat CucumberDepsComThoughtworksXstreamCoreJVM_getMajorJavaVersion() {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  @try {
    return CucumberDepsComThoughtworksXstreamCoreJVM_isAndroid() ? 1.5f : JavaLangFloat_parseFloatWithNSString_(JavaLangSystem_getPropertyWithNSString_(@"java.specification.version"));
  }
  @catch (JavaLangNumberFormatException *e) {
    return CucumberDepsComThoughtworksXstreamCoreJVM_DEFAULT_JAVA_VERSION;
  }
}

jboolean CucumberDepsComThoughtworksXstreamCoreJVM_is14() {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  return CucumberDepsComThoughtworksXstreamCoreJVM_majorJavaVersion >= 1.4f;
}

jboolean CucumberDepsComThoughtworksXstreamCoreJVM_is15() {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  return CucumberDepsComThoughtworksXstreamCoreJVM_majorJavaVersion >= 1.5f;
}

jboolean CucumberDepsComThoughtworksXstreamCoreJVM_is16() {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  return CucumberDepsComThoughtworksXstreamCoreJVM_majorJavaVersion >= 1.6f;
}

jboolean CucumberDepsComThoughtworksXstreamCoreJVM_is17() {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  return CucumberDepsComThoughtworksXstreamCoreJVM_majorJavaVersion >= 1.7f;
}

jboolean CucumberDepsComThoughtworksXstreamCoreJVM_is18() {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  return CucumberDepsComThoughtworksXstreamCoreJVM_majorJavaVersion >= 1.8f;
}

jboolean CucumberDepsComThoughtworksXstreamCoreJVM_isIBM() {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  return [((NSString *) nil_chk(CucumberDepsComThoughtworksXstreamCoreJVM_vendor)) java_indexOfString:@"IBM"] != -1;
}

jboolean CucumberDepsComThoughtworksXstreamCoreJVM_isAndroid() {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  return [((NSString *) nil_chk(CucumberDepsComThoughtworksXstreamCoreJVM_vendor)) java_indexOfString:@"Android"] != -1;
}

IOSClass *CucumberDepsComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_(NSString *name) {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  return CucumberDepsComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_withBoolean_(name, true);
}

IOSClass *CucumberDepsComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_withBoolean_(NSString *name, jboolean initialize_) {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  @try {
    IOSClass *clazz = IOSClass_forName_initialize_classLoader_(name, initialize_, [CucumberDepsComThoughtworksXstreamCoreJVM_class_() getClassLoader]);
    return clazz;
  }
  @catch (JavaLangLinkageError *e) {
    return nil;
  }
  @catch (JavaLangClassNotFoundException *e) {
    return nil;
  }
}

id<CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider> CucumberDepsComThoughtworksXstreamCoreJVM_newReflectionProvider() {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  return (id<CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider>) cast_check(CucumberDepsComThoughtworksXstreamCoreUtilDependencyInjectionFactory_newInstanceWithIOSClass_withNSObjectArray_(CucumberDepsComThoughtworksXstreamCoreJVM_reflectionProviderType, nil), CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider_class_());
}

id<CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider> CucumberDepsComThoughtworksXstreamCoreJVM_newReflectionProviderWithCucumberDepsComThoughtworksXstreamConvertersReflectionFieldDictionary_(CucumberDepsComThoughtworksXstreamConvertersReflectionFieldDictionary *dictionary) {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  return (id<CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider>) cast_check(CucumberDepsComThoughtworksXstreamCoreUtilDependencyInjectionFactory_newInstanceWithIOSClass_withNSObjectArray_(CucumberDepsComThoughtworksXstreamCoreJVM_reflectionProviderType, [IOSObjectArray arrayWithObjects:(id[]){ dictionary } count:1 type:NSObject_class_()]), CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider_class_());
}

IOSClass *CucumberDepsComThoughtworksXstreamCoreJVM_getStaxInputFactory() {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  if (CucumberDepsComThoughtworksXstreamCoreJVM_is16()) {
    if (CucumberDepsComThoughtworksXstreamCoreJVM_isIBM()) {
      return IOSClass_forName_(@"com.ibm.xml.xlxp.api.stax.XMLInputFactoryImpl");
    }
    else {
      return IOSClass_forName_(@"com.sun.xml.internal.stream.XMLInputFactoryImpl");
    }
  }
  return nil;
}

IOSClass *CucumberDepsComThoughtworksXstreamCoreJVM_getStaxOutputFactory() {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  if (CucumberDepsComThoughtworksXstreamCoreJVM_is16()) {
    if (CucumberDepsComThoughtworksXstreamCoreJVM_isIBM()) {
      return IOSClass_forName_(@"com.ibm.xml.xlxp.api.stax.XMLOutputFactoryImpl");
    }
    else {
      return IOSClass_forName_(@"com.sun.xml.internal.stream.XMLOutputFactoryImpl");
    }
  }
  return nil;
}

jboolean CucumberDepsComThoughtworksXstreamCoreJVM_canUseSunUnsafeReflectionProvider() {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  return CucumberDepsComThoughtworksXstreamCoreJVM_canAllocateWithUnsafe && CucumberDepsComThoughtworksXstreamCoreJVM_is14();
}

jboolean CucumberDepsComThoughtworksXstreamCoreJVM_canUseSunLimitedUnsafeReflectionProvider() {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  return CucumberDepsComThoughtworksXstreamCoreJVM_canWriteWithUnsafe;
}

jboolean CucumberDepsComThoughtworksXstreamCoreJVM_reverseFieldDefinition() {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  return CucumberDepsComThoughtworksXstreamCoreJVM_reverseFieldOrder;
}

jboolean CucumberDepsComThoughtworksXstreamCoreJVM_isAWTAvailable() {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  return CucumberDepsComThoughtworksXstreamCoreJVM_isAWTAvailable_;
}

jboolean CucumberDepsComThoughtworksXstreamCoreJVM_isSwingAvailable() {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  return CucumberDepsComThoughtworksXstreamCoreJVM_isSwingAvailable_;
}

jboolean CucumberDepsComThoughtworksXstreamCoreJVM_isSQLAvailable() {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  return CucumberDepsComThoughtworksXstreamCoreJVM_isSQLAvailable_;
}

jboolean CucumberDepsComThoughtworksXstreamCoreJVM_hasOptimizedTreeSetAddAll() {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  return CucumberDepsComThoughtworksXstreamCoreJVM_optimizedTreeSetAddAll;
}

jboolean CucumberDepsComThoughtworksXstreamCoreJVM_hasOptimizedTreeMapPutAll() {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  return CucumberDepsComThoughtworksXstreamCoreJVM_optimizedTreeMapPutAll;
}

jboolean CucumberDepsComThoughtworksXstreamCoreJVM_canParseUTCDateFormat() {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  return CucumberDepsComThoughtworksXstreamCoreJVM_canParseUTCDateFormat_;
}

jboolean CucumberDepsComThoughtworksXstreamCoreJVM_canCreateDerivedObjectOutputStream() {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  return CucumberDepsComThoughtworksXstreamCoreJVM_canCreateDerivedObjectOutputStream_;
}

void CucumberDepsComThoughtworksXstreamCoreJVM_mainWithNSStringArray_(IOSObjectArray *args) {
  CucumberDepsComThoughtworksXstreamCoreJVM_initialize();
  jboolean reverseJDK = false;
  IOSObjectArray *fields = [JavaTextAttributedString_class_() getDeclaredFields];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; i++) {
    if ([((NSString *) nil_chk([((JavaLangReflectField *) nil_chk(IOSObjectArray_Get(fields, i))) getName])) isEqual:@"text"]) {
      reverseJDK = (i > 3);
      break;
    }
  }
  jboolean reverseLocal = false;
  fields = [CucumberDepsComThoughtworksXstreamCoreJVM_Test_class_() getDeclaredFields];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; i++) {
    if ([((NSString *) nil_chk([((JavaLangReflectField *) nil_chk(IOSObjectArray_Get(fields, i))) getName])) isEqual:@"o"]) {
      reverseLocal = (i > 3);
      break;
    }
  }
  NSString *staxInputFactory = nil;
  @try {
    staxInputFactory = [((IOSClass *) nil_chk(CucumberDepsComThoughtworksXstreamCoreJVM_getStaxInputFactory())) getName];
  }
  @catch (JavaLangClassNotFoundException *e) {
    staxInputFactory = [e getMessage];
  }
  @catch (JavaLangNullPointerException *e) {
  }
  NSString *staxOutputFactory = nil;
  @try {
    staxOutputFactory = [((IOSClass *) nil_chk(CucumberDepsComThoughtworksXstreamCoreJVM_getStaxOutputFactory())) getName];
  }
  @catch (JavaLangClassNotFoundException *e) {
    staxOutputFactory = [e getMessage];
  }
  @catch (JavaLangNullPointerException *e) {
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"XStream JVM diagnostics"];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"java.specification.version: ", JavaLangSystem_getPropertyWithNSString_(@"java.specification.version"))];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"java.specification.vendor: ", JavaLangSystem_getPropertyWithNSString_(@"java.specification.vendor"))];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"java.specification.name: ", JavaLangSystem_getPropertyWithNSString_(@"java.specification.name"))];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"java.vm.vendor: ", CucumberDepsComThoughtworksXstreamCoreJVM_vendor)];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"java.vendor: ", JavaLangSystem_getPropertyWithNSString_(@"java.vendor"))];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"java.vm.name: ", JavaLangSystem_getPropertyWithNSString_(@"java.vm.name"))];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$F", @"Version: ", CucumberDepsComThoughtworksXstreamCoreJVM_majorJavaVersion)];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$Z", @"XStream support for enhanced Mode: ", CucumberDepsComThoughtworksXstreamCoreJVM_canUseSunUnsafeReflectionProvider())];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$Z", @"XStream support for reduced Mode: ", CucumberDepsComThoughtworksXstreamCoreJVM_canUseSunLimitedUnsafeReflectionProvider())];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$Z", @"Supports AWT: ", CucumberDepsComThoughtworksXstreamCoreJVM_isAWTAvailable())];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$Z", @"Supports Swing: ", CucumberDepsComThoughtworksXstreamCoreJVM_isSwingAvailable())];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$Z", @"Supports SQL: ", CucumberDepsComThoughtworksXstreamCoreJVM_isSQLAvailable())];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$Z", @"Java Beans EventHandler present: ", (CucumberDepsComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_(@"java.beans.EventHandler") != nil))];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"Standard StAX XMLInputFactory: ", staxInputFactory)];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"Standard StAX XMLOutputFactory: ", staxOutputFactory)];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$Z", @"Optimized TreeSet.addAll: ", CucumberDepsComThoughtworksXstreamCoreJVM_hasOptimizedTreeSetAddAll())];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$Z", @"Optimized TreeMap.putAll: ", CucumberDepsComThoughtworksXstreamCoreJVM_hasOptimizedTreeMapPutAll())];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$Z", @"Can parse UTC date format: ", CucumberDepsComThoughtworksXstreamCoreJVM_canParseUTCDateFormat())];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$Z", @"Can create derive ObjectOutputStream: ", CucumberDepsComThoughtworksXstreamCoreJVM_canCreateDerivedObjectOutputStream())];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$Z", @"Reverse field order detected for JDK: ", reverseJDK)];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$Z", @"Reverse field order detected (only if JVM class itself has been compiled): ", reverseLocal)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamCoreJVM)

@implementation CucumberDepsComThoughtworksXstreamCoreJVM_Test

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberDepsComThoughtworksXstreamCoreJVM_Test_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(o_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "o_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "c_", "C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "b_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "s_", "S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "i_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "l_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "f_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "d_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bool__", "Z", .constantValue.asLong = 0, 0x2, 0, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "bool", "LCucumberDepsComThoughtworksXstreamCoreJVM;" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamCoreJVM_Test = { "Test", "cucumber.deps.com.thoughtworks.xstream.core", ptrTable, methods, fields, 7, 0x8, 1, 9, 1, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamCoreJVM_Test;
}

@end

void CucumberDepsComThoughtworksXstreamCoreJVM_Test_init(CucumberDepsComThoughtworksXstreamCoreJVM_Test *self) {
  NSObject_init(self);
  @throw create_JavaLangUnsupportedOperationException_init();
}

CucumberDepsComThoughtworksXstreamCoreJVM_Test *new_CucumberDepsComThoughtworksXstreamCoreJVM_Test_init() {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamCoreJVM_Test, init)
}

CucumberDepsComThoughtworksXstreamCoreJVM_Test *create_CucumberDepsComThoughtworksXstreamCoreJVM_Test_init() {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamCoreJVM_Test, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamCoreJVM_Test)

@implementation CucumberDepsComThoughtworksXstreamCoreJVM_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberDepsComThoughtworksXstreamCoreJVM_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  @throw create_JavaLangRuntimeException_init();
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LNSObject;LNSObject;", "LCucumberDepsComThoughtworksXstreamCoreJVM;" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamCoreJVM_1 = { "", "cucumber.deps.com.thoughtworks.xstream.core", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamCoreJVM_1;
}

@end

void CucumberDepsComThoughtworksXstreamCoreJVM_1_init(CucumberDepsComThoughtworksXstreamCoreJVM_1 *self) {
  NSObject_init(self);
}

CucumberDepsComThoughtworksXstreamCoreJVM_1 *new_CucumberDepsComThoughtworksXstreamCoreJVM_1_init() {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamCoreJVM_1, init)
}

CucumberDepsComThoughtworksXstreamCoreJVM_1 *create_CucumberDepsComThoughtworksXstreamCoreJVM_1_init() {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamCoreJVM_1, init)
}
