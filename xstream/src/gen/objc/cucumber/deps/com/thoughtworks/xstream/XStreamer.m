//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/XStreamer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/MarshallingStrategy.h"
#include "cucumber/deps/com/thoughtworks/xstream/XStream.h"
#include "cucumber/deps/com/thoughtworks/xstream/XStreamer.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/ConversionException.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/ConverterLookup.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/ConverterMatcher.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/ConverterRegistry.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/MarshallingContext.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/UnmarshallingContext.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/javabean/JavaBeanProvider.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/reflection/FieldKeySorter.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/reflection/ReflectionProvider.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/JVM.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/HierarchicalStreamDriver.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/naming/NameCoder.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/xml/XppDriver.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/Mapper.h"
#include "cucumber/deps/com/thoughtworks/xstream/security/AnyTypePermission.h"
#include "cucumber/deps/com/thoughtworks/xstream/security/TypeHierarchyPermission.h"
#include "cucumber/deps/com/thoughtworks/xstream/security/TypePermission.h"
#include "cucumber/deps/com/thoughtworks/xstream/security/WildcardTypePermission.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/ObjectStreamException.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Package.h"
#include "javax/xml/datatype/DatatypeFactory.h"

inline IOSObjectArray *CucumberDepsComThoughtworksXstreamXStreamer_get_PERMISSIONS(void);
static IOSObjectArray *CucumberDepsComThoughtworksXstreamXStreamer_PERMISSIONS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberDepsComThoughtworksXstreamXStreamer, PERMISSIONS, IOSObjectArray *)

J2OBJC_INITIALIZED_DEFN(CucumberDepsComThoughtworksXstreamXStreamer)

@implementation CucumberDepsComThoughtworksXstreamXStreamer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberDepsComThoughtworksXstreamXStreamer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)toXMLWithCucumberDepsComThoughtworksXstreamXStream:(CucumberDepsComThoughtworksXstreamXStream *)xstream
                                                          withId:(id)obj {
  JavaIoWriter *writer = create_JavaIoStringWriter_init();
  @try {
    [self toXMLWithCucumberDepsComThoughtworksXstreamXStream:xstream withId:obj withJavaIoWriter:writer];
  }
  @catch (JavaIoObjectStreamException *e) {
    @throw e;
  }
  @catch (JavaIoIOException *e) {
    @throw create_CucumberDepsComThoughtworksXstreamConvertersConversionException_initWithNSString_withJavaLangThrowable_(@"Unexpected IO error from a StringWriter", e);
  }
  return [writer description];
}

- (void)toXMLWithCucumberDepsComThoughtworksXstreamXStream:(CucumberDepsComThoughtworksXstreamXStream *)xstream
                                                    withId:(id)obj
                                          withJavaIoWriter:(JavaIoWriter *)outArg {
  CucumberDepsComThoughtworksXstreamXStream *outer = create_CucumberDepsComThoughtworksXstreamXStream_init();
  JavaIoObjectOutputStream *oos = [outer createObjectOutputStreamWithJavaIoWriter:outArg];
  @try {
    [((JavaIoObjectOutputStream *) nil_chk(oos)) writeObjectWithId:xstream];
    [oos flush];
    [((CucumberDepsComThoughtworksXstreamXStream *) nil_chk(xstream)) toXMLWithId:obj withJavaIoWriter:outArg];
  }
  @finally {
    [oos close];
  }
}

- (id)fromXMLWithNSString:(NSString *)xml {
  @try {
    return [self fromXMLWithJavaIoReader:create_JavaIoStringReader_initWithNSString_(xml)];
  }
  @catch (JavaIoObjectStreamException *e) {
    @throw e;
  }
  @catch (JavaIoIOException *e) {
    @throw create_CucumberDepsComThoughtworksXstreamConvertersConversionException_initWithNSString_withJavaLangThrowable_(@"Unexpected IO error from a StringReader", e);
  }
}

- (id)fromXMLWithNSString:(NSString *)xml
withCucumberDepsComThoughtworksXstreamSecurityTypePermissionArray:(IOSObjectArray *)permissions {
  @try {
    return [self fromXMLWithJavaIoReader:create_JavaIoStringReader_initWithNSString_(xml) withCucumberDepsComThoughtworksXstreamSecurityTypePermissionArray:permissions];
  }
  @catch (JavaIoObjectStreamException *e) {
    @throw e;
  }
  @catch (JavaIoIOException *e) {
    @throw create_CucumberDepsComThoughtworksXstreamConvertersConversionException_initWithNSString_withJavaLangThrowable_(@"Unexpected IO error from a StringReader", e);
  }
}

- (id)fromXMLWithCucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver:(id<CucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver>)driver
                                                                 withNSString:(NSString *)xml {
  @try {
    return [self fromXMLWithCucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver:driver withJavaIoReader:create_JavaIoStringReader_initWithNSString_(xml)];
  }
  @catch (JavaIoObjectStreamException *e) {
    @throw e;
  }
  @catch (JavaIoIOException *e) {
    @throw create_CucumberDepsComThoughtworksXstreamConvertersConversionException_initWithNSString_withJavaLangThrowable_(@"Unexpected IO error from a StringReader", e);
  }
}

- (id)fromXMLWithCucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver:(id<CucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver>)driver
                                                                 withNSString:(NSString *)xml
            withCucumberDepsComThoughtworksXstreamSecurityTypePermissionArray:(IOSObjectArray *)permissions {
  @try {
    return [self fromXMLWithCucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver:driver withJavaIoReader:create_JavaIoStringReader_initWithNSString_(xml) withCucumberDepsComThoughtworksXstreamSecurityTypePermissionArray:permissions];
  }
  @catch (JavaIoObjectStreamException *e) {
    @throw e;
  }
  @catch (JavaIoIOException *e) {
    @throw create_CucumberDepsComThoughtworksXstreamConvertersConversionException_initWithNSString_withJavaLangThrowable_(@"Unexpected IO error from a StringReader", e);
  }
}

- (id)fromXMLWithJavaIoReader:(JavaIoReader *)xml {
  return [self fromXMLWithCucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver:create_CucumberDepsComThoughtworksXstreamIoXmlXppDriver_init() withJavaIoReader:xml];
}

- (id)fromXMLWithJavaIoReader:(JavaIoReader *)xml
withCucumberDepsComThoughtworksXstreamSecurityTypePermissionArray:(IOSObjectArray *)permissions {
  return [self fromXMLWithCucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver:create_CucumberDepsComThoughtworksXstreamIoXmlXppDriver_init() withJavaIoReader:xml withCucumberDepsComThoughtworksXstreamSecurityTypePermissionArray:permissions];
}

- (id)fromXMLWithCucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver:(id<CucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver>)driver
                                                             withJavaIoReader:(JavaIoReader *)xml {
  return [self fromXMLWithCucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver:driver withJavaIoReader:xml withCucumberDepsComThoughtworksXstreamSecurityTypePermissionArray:[IOSObjectArray arrayWithObjects:(id[]){ JreLoadStatic(CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission, ANY) } count:1 type:CucumberDepsComThoughtworksXstreamSecurityTypePermission_class_()]];
}

- (id)fromXMLWithCucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver:(id<CucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver>)driver
                                                             withJavaIoReader:(JavaIoReader *)xml
            withCucumberDepsComThoughtworksXstreamSecurityTypePermissionArray:(IOSObjectArray *)permissions {
  CucumberDepsComThoughtworksXstreamXStream *outer = create_CucumberDepsComThoughtworksXstreamXStream_initWithCucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver_(driver);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(permissions))->size_; ++i) {
    [outer addPermissionWithCucumberDepsComThoughtworksXstreamSecurityTypePermission:IOSObjectArray_Get(permissions, i)];
  }
  id<CucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader> reader = [((id<CucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver>) nil_chk(driver)) createReaderWithJavaIoReader:xml];
  JavaIoObjectInputStream *configIn = [outer createObjectInputStreamWithCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader:reader];
  @try {
    CucumberDepsComThoughtworksXstreamXStream *configured = (CucumberDepsComThoughtworksXstreamXStream *) cast_chk([((JavaIoObjectInputStream *) nil_chk(configIn)) readObject], [CucumberDepsComThoughtworksXstreamXStream class]);
    JavaIoObjectInputStream *in = [((CucumberDepsComThoughtworksXstreamXStream *) nil_chk(configured)) createObjectInputStreamWithCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader:reader];
    @try {
      return [((JavaIoObjectInputStream *) nil_chk(in)) readObject];
    }
    @finally {
      [in close];
    }
  }
  @finally {
    [configIn close];
  }
}

+ (IOSObjectArray *)getDefaultPermissions {
  return CucumberDepsComThoughtworksXstreamXStreamer_getDefaultPermissions();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 3, 4, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 6, 7, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 8, 7, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 9, 7, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 10, 7, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 11, 12, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 13, 12, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 14, 12, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 15, 12, -1, -1, -1 },
    { NULL, "[LCucumberDepsComThoughtworksXstreamSecurityTypePermission;", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(toXMLWithCucumberDepsComThoughtworksXstreamXStream:withId:);
  methods[2].selector = @selector(toXMLWithCucumberDepsComThoughtworksXstreamXStream:withId:withJavaIoWriter:);
  methods[3].selector = @selector(fromXMLWithNSString:);
  methods[4].selector = @selector(fromXMLWithNSString:withCucumberDepsComThoughtworksXstreamSecurityTypePermissionArray:);
  methods[5].selector = @selector(fromXMLWithCucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver:withNSString:);
  methods[6].selector = @selector(fromXMLWithCucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver:withNSString:withCucumberDepsComThoughtworksXstreamSecurityTypePermissionArray:);
  methods[7].selector = @selector(fromXMLWithJavaIoReader:);
  methods[8].selector = @selector(fromXMLWithJavaIoReader:withCucumberDepsComThoughtworksXstreamSecurityTypePermissionArray:);
  methods[9].selector = @selector(fromXMLWithCucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver:withJavaIoReader:);
  methods[10].selector = @selector(fromXMLWithCucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver:withJavaIoReader:withCucumberDepsComThoughtworksXstreamSecurityTypePermissionArray:);
  methods[11].selector = @selector(getDefaultPermissions);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PERMISSIONS", "[LCucumberDepsComThoughtworksXstreamSecurityTypePermission;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
  };
  static const void *ptrTable[] = { "toXML", "LCucumberDepsComThoughtworksXstreamXStream;LNSObject;", "LJavaIoObjectStreamException;", "LCucumberDepsComThoughtworksXstreamXStream;LNSObject;LJavaIoWriter;", "LJavaIoIOException;", "fromXML", "LNSString;", "LJavaLangClassNotFoundException;LJavaIoObjectStreamException;", "LNSString;[LCucumberDepsComThoughtworksXstreamSecurityTypePermission;", "LCucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver;LNSString;", "LCucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver;LNSString;[LCucumberDepsComThoughtworksXstreamSecurityTypePermission;", "LJavaIoReader;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "LJavaIoReader;[LCucumberDepsComThoughtworksXstreamSecurityTypePermission;", "LCucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver;LJavaIoReader;", "LCucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver;LJavaIoReader;[LCucumberDepsComThoughtworksXstreamSecurityTypePermission;", &CucumberDepsComThoughtworksXstreamXStreamer_PERMISSIONS };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamXStreamer = { "XStreamer", "cucumber.deps.com.thoughtworks.xstream", ptrTable, methods, fields, 7, 0x1, 12, 1, -1, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamXStreamer;
}

+ (void)initialize {
  if (self == [CucumberDepsComThoughtworksXstreamXStreamer class]) {
    JreStrongAssignAndConsume(&CucumberDepsComThoughtworksXstreamXStreamer_PERMISSIONS, [IOSObjectArray newArrayWithObjects:(id[]){ create_CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(CucumberDepsComThoughtworksXstreamConvertersConverterMatcher_class_()), create_CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(CucumberDepsComThoughtworksXstreamMapperMapper_class_()), create_CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(CucumberDepsComThoughtworksXstreamXStream_class_()), create_CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider_class_()), create_CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(CucumberDepsComThoughtworksXstreamConvertersJavabeanJavaBeanProvider_class_()), create_CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(CucumberDepsComThoughtworksXstreamConvertersReflectionFieldKeySorter_class_()), create_CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(CucumberDepsComThoughtworksXstreamConvertersConverterLookup_class_()), create_CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(CucumberDepsComThoughtworksXstreamConvertersConverterRegistry_class_()), create_CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(CucumberDepsComThoughtworksXstreamIoHierarchicalStreamDriver_class_()), create_CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(CucumberDepsComThoughtworksXstreamMarshallingStrategy_class_()), create_CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(CucumberDepsComThoughtworksXstreamConvertersMarshallingContext_class_()), create_CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(CucumberDepsComThoughtworksXstreamConvertersUnmarshallingContext_class_()), create_CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(CucumberDepsComThoughtworksXstreamIoNamingNameCoder_class_()), create_CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(CucumberDepsComThoughtworksXstreamSecurityTypePermission_class_()), create_CucumberDepsComThoughtworksXstreamSecurityWildcardTypePermission_initWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ JreStrcat("$$", [((JavaLangPackage *) nil_chk([CucumberDepsComThoughtworksXstreamCoreJVM_class_() getPackage])) getName], @".**") } count:1 type:NSString_class_()]), create_CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(JavaxXmlDatatypeDatatypeFactory_class_()) } count:16 type:CucumberDepsComThoughtworksXstreamSecurityTypePermission_class_()]);
    J2OBJC_SET_INITIALIZED(CucumberDepsComThoughtworksXstreamXStreamer)
  }
}

@end

void CucumberDepsComThoughtworksXstreamXStreamer_init(CucumberDepsComThoughtworksXstreamXStreamer *self) {
  NSObject_init(self);
}

CucumberDepsComThoughtworksXstreamXStreamer *new_CucumberDepsComThoughtworksXstreamXStreamer_init() {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamXStreamer, init)
}

CucumberDepsComThoughtworksXstreamXStreamer *create_CucumberDepsComThoughtworksXstreamXStreamer_init() {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamXStreamer, init)
}

IOSObjectArray *CucumberDepsComThoughtworksXstreamXStreamer_getDefaultPermissions() {
  CucumberDepsComThoughtworksXstreamXStreamer_initialize();
  return [((IOSObjectArray *) nil_chk(CucumberDepsComThoughtworksXstreamXStreamer_PERMISSIONS)) java_clone];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamXStreamer)
