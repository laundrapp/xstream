//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/mapper/ClassAliasingMapper.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/util/Primitives.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/ClassAliasingMapper.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/Mapper.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/MapperWrapper.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper () {
 @public
  id<JavaUtilMap> typeToName_;
  id<JavaUtilMap> classToName_;
  id<JavaUtilMap> nameToType_;
}

- (id)readResolve;

@end

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper, typeToName_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper, classToName_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper, nameToType_, id<JavaUtilMap>)

__attribute__((unused)) static id CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper_readResolve(CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper *self);

@implementation CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper

- (instancetype __nonnull)initWithCucumberDepsComThoughtworksXstreamMapperMapper:(id<CucumberDepsComThoughtworksXstreamMapperMapper>)wrapped {
  CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(self, wrapped);
  return self;
}

- (void)addClassAliasWithNSString:(NSString *)name
                     withIOSClass:(IOSClass *)type {
  [((id<JavaUtilMap>) nil_chk(nameToType_)) putWithId:name withId:[((IOSClass *) nil_chk(type)) getName]];
  [((id<JavaUtilMap>) nil_chk(classToName_)) putWithId:[type getName] withId:name];
}

- (void)addClassAttributeAliasWithNSString:(NSString *)name
                              withIOSClass:(IOSClass *)type {
  [self addClassAliasWithNSString:name withIOSClass:type];
}

- (void)addTypeAliasWithNSString:(NSString *)name
                    withIOSClass:(IOSClass *)type {
  [((id<JavaUtilMap>) nil_chk(nameToType_)) putWithId:name withId:[((IOSClass *) nil_chk(type)) getName]];
  [((id<JavaUtilMap>) nil_chk(typeToName_)) putWithId:type withId:name];
}

- (NSString *)serializedClassWithIOSClass:(IOSClass *)type {
  NSString *alias = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(classToName_)) getWithId:[((IOSClass *) nil_chk(type)) getName]], [NSString class]);
  if (alias != nil) {
    return alias;
  }
  else {
    for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(typeToName_)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      IOSClass *compatibleType = (IOSClass *) cast_chk([iter next], [IOSClass class]);
      if ([((IOSClass *) nil_chk(compatibleType)) isAssignableFrom:type]) {
        return (NSString *) cast_chk([typeToName_ getWithId:compatibleType], [NSString class]);
      }
    }
    return [super serializedClassWithIOSClass:type];
  }
}

- (IOSClass *)realClassWithNSString:(NSString *)elementName {
  NSString *mappedName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(nameToType_)) getWithId:elementName], [NSString class]);
  if (mappedName != nil) {
    IOSClass *type = CucumberDepsComThoughtworksXstreamCoreUtilPrimitives_primitiveTypeWithNSString_(mappedName);
    if (type != nil) {
      return type;
    }
    elementName = mappedName;
  }
  return [super realClassWithNSString:elementName];
}

- (jboolean)itemTypeAsAttributeWithIOSClass:(IOSClass *)clazz {
  return [((id<JavaUtilMap>) nil_chk(classToName_)) containsKeyWithId:clazz];
}

- (jboolean)aliasIsAttributeWithNSString:(NSString *)name {
  return [((id<JavaUtilMap>) nil_chk(nameToType_)) containsKeyWithId:name];
}

- (id)readResolve {
  return CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper_readResolve(self);
}

- (void)dealloc {
  RELEASE_(typeToName_);
  RELEASE_(classToName_);
  RELEASE_(nameToType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberDepsComThoughtworksXstreamMapperMapper:);
  methods[1].selector = @selector(addClassAliasWithNSString:withIOSClass:);
  methods[2].selector = @selector(addClassAttributeAliasWithNSString:withIOSClass:);
  methods[3].selector = @selector(addTypeAliasWithNSString:withIOSClass:);
  methods[4].selector = @selector(serializedClassWithIOSClass:);
  methods[5].selector = @selector(realClassWithNSString:);
  methods[6].selector = @selector(itemTypeAsAttributeWithIOSClass:);
  methods[7].selector = @selector(aliasIsAttributeWithNSString:);
  methods[8].selector = @selector(readResolve);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "typeToName_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "classToName_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "nameToType_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCucumberDepsComThoughtworksXstreamMapperMapper;", "addClassAlias", "LNSString;LIOSClass;", "addClassAttributeAlias", "addTypeAlias", "serializedClass", "LIOSClass;", "realClass", "LNSString;", "itemTypeAsAttribute", "aliasIsAttribute" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper = { "ClassAliasingMapper", "cucumber.deps.com.thoughtworks.xstream.mapper", ptrTable, methods, fields, 7, 0x1, 9, 3, -1, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper;
}

@end

void CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper *self, id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped) {
  CucumberDepsComThoughtworksXstreamMapperMapperWrapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(self, wrapped);
  JreStrongAssignAndConsume(&self->typeToName_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->classToName_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->nameToType_, new_JavaUtilHashMap_init());
}

CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper *new_CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper, initWithCucumberDepsComThoughtworksXstreamMapperMapper_, wrapped)
}

CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper *create_CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper, initWithCucumberDepsComThoughtworksXstreamMapperMapper_, wrapped)
}

id CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper_readResolve(CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper *self) {
  JreStrongAssignAndConsume(&self->nameToType_, new_JavaUtilHashMap_init());
  for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(self->classToName_)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    id type = [iter next];
    [((id<JavaUtilMap>) nil_chk(self->nameToType_)) putWithId:[self->classToName_ getWithId:type] withId:type];
  }
  for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(self->typeToName_)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    IOSClass *type = (IOSClass *) cast_chk([iter next], [IOSClass class]);
    [((id<JavaUtilMap>) nil_chk(self->nameToType_)) putWithId:[self->typeToName_ getWithId:type] withId:[((IOSClass *) nil_chk(type)) getName]];
  }
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper)
