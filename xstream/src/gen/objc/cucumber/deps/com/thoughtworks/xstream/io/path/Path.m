//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/io/path/Path.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/util/FastStack.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/path/Path.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface CucumberDepsComThoughtworksXstreamIoPathPath () {
 @public
  IOSObjectArray *chunks_;
  NSString *pathAsString_;
  NSString *pathExplicit_;
}

- (NSString *)normalizeWithNSString:(NSString *)s
                            withInt:(jint)start
                            withInt:(jint)end;

- (jint)depthOfPathDivergenceWithNSStringArray:(IOSObjectArray *)path1
                             withNSStringArray:(IOSObjectArray *)path2;

@end

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamIoPathPath, chunks_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamIoPathPath, pathAsString_, NSString *)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamIoPathPath, pathExplicit_, NSString *)

inline CucumberDepsComThoughtworksXstreamIoPathPath *CucumberDepsComThoughtworksXstreamIoPathPath_get_DOT(void);
static CucumberDepsComThoughtworksXstreamIoPathPath *CucumberDepsComThoughtworksXstreamIoPathPath_DOT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberDepsComThoughtworksXstreamIoPathPath, DOT, CucumberDepsComThoughtworksXstreamIoPathPath *)

__attribute__((unused)) static NSString *CucumberDepsComThoughtworksXstreamIoPathPath_normalizeWithNSString_withInt_withInt_(CucumberDepsComThoughtworksXstreamIoPathPath *self, NSString *s, jint start, jint end);

__attribute__((unused)) static jint CucumberDepsComThoughtworksXstreamIoPathPath_depthOfPathDivergenceWithNSStringArray_withNSStringArray_(CucumberDepsComThoughtworksXstreamIoPathPath *self, IOSObjectArray *path1, IOSObjectArray *path2);

J2OBJC_INITIALIZED_DEFN(CucumberDepsComThoughtworksXstreamIoPathPath)

@implementation CucumberDepsComThoughtworksXstreamIoPathPath

- (instancetype __nonnull)initWithNSString:(NSString *)pathAsString {
  CucumberDepsComThoughtworksXstreamIoPathPath_initWithNSString_(self, pathAsString);
  return self;
}

- (NSString *)normalizeWithNSString:(NSString *)s
                            withInt:(jint)start
                            withInt:(jint)end {
  return CucumberDepsComThoughtworksXstreamIoPathPath_normalizeWithNSString_withInt_withInt_(self, s, start, end);
}

- (instancetype __nonnull)initWithNSStringArray:(IOSObjectArray *)chunks {
  CucumberDepsComThoughtworksXstreamIoPathPath_initWithNSStringArray_(self, chunks);
  return self;
}

- (NSString *)description {
  if (pathAsString_ == nil) {
    JavaLangStringBuffer *buffer = create_JavaLangStringBuffer_init();
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(chunks_))->size_; i++) {
      if (i > 0) [buffer appendWithChar:'/'];
      [buffer appendWithNSString:IOSObjectArray_Get(chunks_, i)];
    }
    JreStrongAssign(&pathAsString_, [buffer description]);
  }
  return pathAsString_;
}

- (NSString *)explicit__ {
  if (pathExplicit_ == nil) {
    JavaLangStringBuffer *buffer = create_JavaLangStringBuffer_init();
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(chunks_))->size_; i++) {
      if (i > 0) [buffer appendWithChar:'/'];
      NSString *chunk = IOSObjectArray_Get(chunks_, i);
      [buffer appendWithNSString:chunk];
      jint length = [((NSString *) nil_chk(chunk)) java_length];
      if (length > 0) {
        jchar c = [chunk charAtWithInt:length - 1];
        if (c != ']' && c != '.') {
          [buffer appendWithNSString:@"[1]"];
        }
      }
    }
    JreStrongAssign(&pathExplicit_, [buffer description]);
  }
  return pathExplicit_;
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (!([o isKindOfClass:[CucumberDepsComThoughtworksXstreamIoPathPath class]])) return false;
  CucumberDepsComThoughtworksXstreamIoPathPath *other = (CucumberDepsComThoughtworksXstreamIoPathPath *) cast_chk(o, [CucumberDepsComThoughtworksXstreamIoPathPath class]);
  if (((IOSObjectArray *) nil_chk(chunks_))->size_ != ((CucumberDepsComThoughtworksXstreamIoPathPath *) nil_chk(other))->chunks_->size_) return false;
  for (jint i = 0; i < chunks_->size_; i++) {
    if (![((NSString *) nil_chk(IOSObjectArray_Get(chunks_, i))) isEqual:IOSObjectArray_Get(other->chunks_, i)]) return false;
  }
  return true;
}

- (NSUInteger)hash {
  jint result = 543645643;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(chunks_))->size_; i++) {
    result = 29 * result + ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(chunks_, i))) hash]);
  }
  return result;
}

- (CucumberDepsComThoughtworksXstreamIoPathPath *)relativeToWithCucumberDepsComThoughtworksXstreamIoPathPath:(CucumberDepsComThoughtworksXstreamIoPathPath *)that {
  jint depthOfPathDivergence = CucumberDepsComThoughtworksXstreamIoPathPath_depthOfPathDivergenceWithNSStringArray_withNSStringArray_(self, chunks_, ((CucumberDepsComThoughtworksXstreamIoPathPath *) nil_chk(that))->chunks_);
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(chunks_))->size_ + that->chunks_->size_ - 2 * depthOfPathDivergence type:NSString_class_()];
  jint count = 0;
  for (jint i = depthOfPathDivergence; i < chunks_->size_; i++) {
    IOSObjectArray_Set(result, count++, @"..");
  }
  for (jint j = depthOfPathDivergence; j < that->chunks_->size_; j++) {
    IOSObjectArray_Set(result, count++, IOSObjectArray_Get(that->chunks_, j));
  }
  if (count == 0) {
    return CucumberDepsComThoughtworksXstreamIoPathPath_DOT;
  }
  else {
    return create_CucumberDepsComThoughtworksXstreamIoPathPath_initWithNSStringArray_(result);
  }
}

- (jint)depthOfPathDivergenceWithNSStringArray:(IOSObjectArray *)path1
                             withNSStringArray:(IOSObjectArray *)path2 {
  return CucumberDepsComThoughtworksXstreamIoPathPath_depthOfPathDivergenceWithNSStringArray_withNSStringArray_(self, path1, path2);
}

- (CucumberDepsComThoughtworksXstreamIoPathPath *)applyWithCucumberDepsComThoughtworksXstreamIoPathPath:(CucumberDepsComThoughtworksXstreamIoPathPath *)relativePath {
  CucumberDepsComThoughtworksXstreamCoreUtilFastStack *absoluteStack = create_CucumberDepsComThoughtworksXstreamCoreUtilFastStack_initWithInt_(16);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(chunks_))->size_; i++) {
    [absoluteStack pushWithId:IOSObjectArray_Get(chunks_, i)];
  }
  for (jint i = 0; i < ((CucumberDepsComThoughtworksXstreamIoPathPath *) nil_chk(relativePath))->chunks_->size_; i++) {
    NSString *relativeChunk = IOSObjectArray_Get(relativePath->chunks_, i);
    if ([((NSString *) nil_chk(relativeChunk)) isEqual:@".."]) {
      [absoluteStack pop];
    }
    else if (![relativeChunk isEqual:@"."]) {
      [absoluteStack pushWithId:relativeChunk];
    }
  }
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:[absoluteStack size] type:NSString_class_()];
  for (jint i = 0; i < result->size_; i++) {
    IOSObjectArray_Set(result, i, (NSString *) cast_chk([absoluteStack getWithInt:i], [NSString class]));
  }
  return create_CucumberDepsComThoughtworksXstreamIoPathPath_initWithNSStringArray_(result);
}

- (jboolean)isAncestorWithCucumberDepsComThoughtworksXstreamIoPathPath:(CucumberDepsComThoughtworksXstreamIoPathPath *)child {
  if (child == nil || ((IOSObjectArray *) nil_chk(child->chunks_))->size_ < chunks_->size_) {
    return false;
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(chunks_))->size_; i++) {
    if (![((NSString *) nil_chk(IOSObjectArray_Get(chunks_, i))) isEqual:IOSObjectArray_Get(child->chunks_, i)]) {
      return false;
    }
  }
  return true;
}

- (void)dealloc {
  RELEASE_(chunks_);
  RELEASE_(pathAsString_);
  RELEASE_(pathExplicit_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "LCucumberDepsComThoughtworksXstreamIoPathPath;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LCucumberDepsComThoughtworksXstreamIoPathPath;", 0x1, 13, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(normalizeWithNSString:withInt:withInt:);
  methods[2].selector = @selector(initWithNSStringArray:);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(explicit__);
  methods[5].selector = @selector(isEqual:);
  methods[6].selector = @selector(hash);
  methods[7].selector = @selector(relativeToWithCucumberDepsComThoughtworksXstreamIoPathPath:);
  methods[8].selector = @selector(depthOfPathDivergenceWithNSStringArray:withNSStringArray:);
  methods[9].selector = @selector(applyWithCucumberDepsComThoughtworksXstreamIoPathPath:);
  methods[10].selector = @selector(isAncestorWithCucumberDepsComThoughtworksXstreamIoPathPath:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "chunks_", "[LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pathAsString_", "LNSString;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "pathExplicit_", "LNSString;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "DOT", "LCucumberDepsComThoughtworksXstreamIoPathPath;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "normalize", "LNSString;II", "[LNSString;", "toString", "explicit", "equals", "LNSObject;", "hashCode", "relativeTo", "LCucumberDepsComThoughtworksXstreamIoPathPath;", "depthOfPathDivergence", "[LNSString;[LNSString;", "apply", "isAncestor", &CucumberDepsComThoughtworksXstreamIoPathPath_DOT };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamIoPathPath = { "Path", "cucumber.deps.com.thoughtworks.xstream.io.path", ptrTable, methods, fields, 7, 0x1, 11, 4, -1, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamIoPathPath;
}

+ (void)initialize {
  if (self == [CucumberDepsComThoughtworksXstreamIoPathPath class]) {
    JreStrongAssignAndConsume(&CucumberDepsComThoughtworksXstreamIoPathPath_DOT, new_CucumberDepsComThoughtworksXstreamIoPathPath_initWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ @"." } count:1 type:NSString_class_()]));
    J2OBJC_SET_INITIALIZED(CucumberDepsComThoughtworksXstreamIoPathPath)
  }
}

@end

void CucumberDepsComThoughtworksXstreamIoPathPath_initWithNSString_(CucumberDepsComThoughtworksXstreamIoPathPath *self, NSString *pathAsString) {
  NSObject_init(self);
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  jint currentIndex = 0;
  jint nextSeparator;
  JreStrongAssign(&self->pathAsString_, pathAsString);
  while ((nextSeparator = [((NSString *) nil_chk(pathAsString)) java_indexOf:'/' fromIndex:currentIndex]) != -1) {
    [result addWithId:CucumberDepsComThoughtworksXstreamIoPathPath_normalizeWithNSString_withInt_withInt_(self, pathAsString, currentIndex, nextSeparator)];
    currentIndex = nextSeparator + 1;
  }
  [result addWithId:CucumberDepsComThoughtworksXstreamIoPathPath_normalizeWithNSString_withInt_withInt_(self, pathAsString, currentIndex, [pathAsString java_length])];
  IOSObjectArray *arr = [IOSObjectArray arrayWithLength:[result size] type:NSString_class_()];
  [result toArrayWithNSObjectArray:arr];
  JreStrongAssign(&self->chunks_, arr);
}

CucumberDepsComThoughtworksXstreamIoPathPath *new_CucumberDepsComThoughtworksXstreamIoPathPath_initWithNSString_(NSString *pathAsString) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamIoPathPath, initWithNSString_, pathAsString)
}

CucumberDepsComThoughtworksXstreamIoPathPath *create_CucumberDepsComThoughtworksXstreamIoPathPath_initWithNSString_(NSString *pathAsString) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamIoPathPath, initWithNSString_, pathAsString)
}

NSString *CucumberDepsComThoughtworksXstreamIoPathPath_normalizeWithNSString_withInt_withInt_(CucumberDepsComThoughtworksXstreamIoPathPath *self, NSString *s, jint start, jint end) {
  if (end - start > 3 && [((NSString *) nil_chk(s)) charAtWithInt:end - 3] == '[' && [s charAtWithInt:end - 2] == '1' && [s charAtWithInt:end - 1] == ']') {
    JreStrongAssign(&self->pathAsString_, nil);
    return [((NSString *) nil_chk(s)) java_substring:start endIndex:end - 3];
  }
  else {
    return [((NSString *) nil_chk(s)) java_substring:start endIndex:end];
  }
}

void CucumberDepsComThoughtworksXstreamIoPathPath_initWithNSStringArray_(CucumberDepsComThoughtworksXstreamIoPathPath *self, IOSObjectArray *chunks) {
  NSObject_init(self);
  JreStrongAssign(&self->chunks_, chunks);
}

CucumberDepsComThoughtworksXstreamIoPathPath *new_CucumberDepsComThoughtworksXstreamIoPathPath_initWithNSStringArray_(IOSObjectArray *chunks) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamIoPathPath, initWithNSStringArray_, chunks)
}

CucumberDepsComThoughtworksXstreamIoPathPath *create_CucumberDepsComThoughtworksXstreamIoPathPath_initWithNSStringArray_(IOSObjectArray *chunks) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamIoPathPath, initWithNSStringArray_, chunks)
}

jint CucumberDepsComThoughtworksXstreamIoPathPath_depthOfPathDivergenceWithNSStringArray_withNSStringArray_(CucumberDepsComThoughtworksXstreamIoPathPath *self, IOSObjectArray *path1, IOSObjectArray *path2) {
  jint minLength = JavaLangMath_minWithInt_withInt_(((IOSObjectArray *) nil_chk(path1))->size_, ((IOSObjectArray *) nil_chk(path2))->size_);
  for (jint i = 0; i < minLength; i++) {
    if (![((NSString *) nil_chk(IOSObjectArray_Get(path1, i))) isEqual:IOSObjectArray_Get(path2, i)]) {
      return i;
    }
  }
  return minLength;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamIoPathPath)
