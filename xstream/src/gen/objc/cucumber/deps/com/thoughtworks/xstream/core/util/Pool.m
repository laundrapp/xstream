//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/core/util/Pool.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/util/Pool.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/RuntimeException.h"

@interface CucumberDepsComThoughtworksXstreamCoreUtilPool () {
 @public
  jint initialPoolSize_;
  jint maxPoolSize_;
  id<CucumberDepsComThoughtworksXstreamCoreUtilPool_Factory> factory_;
  IOSObjectArray *pool_;
  jint nextAvailable_;
  id mutex_;
}

- (id)readResolve;

@end

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamCoreUtilPool, factory_, id<CucumberDepsComThoughtworksXstreamCoreUtilPool_Factory>)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamCoreUtilPool, pool_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamCoreUtilPool, mutex_, id)

__attribute__((unused)) static id CucumberDepsComThoughtworksXstreamCoreUtilPool_readResolve(CucumberDepsComThoughtworksXstreamCoreUtilPool *self);

@interface CucumberDepsComThoughtworksXstreamCoreUtilPool_Factory : NSObject

@end

@implementation CucumberDepsComThoughtworksXstreamCoreUtilPool

- (instancetype __nonnull)initWithInt:(jint)initialPoolSize
                              withInt:(jint)maxPoolSize
withCucumberDepsComThoughtworksXstreamCoreUtilPool_Factory:(id<CucumberDepsComThoughtworksXstreamCoreUtilPool_Factory>)factory {
  CucumberDepsComThoughtworksXstreamCoreUtilPool_initWithInt_withInt_withCucumberDepsComThoughtworksXstreamCoreUtilPool_Factory_(self, initialPoolSize, maxPoolSize, factory);
  return self;
}

- (id)fetchFromPool {
  id result;
  @synchronized(mutex_) {
    if (pool_ == nil) {
      JreStrongAssignAndConsume(&pool_, [IOSObjectArray newArrayWithLength:maxPoolSize_ type:NSObject_class_()]);
      for (nextAvailable_ = initialPoolSize_; nextAvailable_ > 0; ) {
        [self putInPoolWithId:[((id<CucumberDepsComThoughtworksXstreamCoreUtilPool_Factory>) nil_chk(factory_)) newInstance]];
      }
    }
    while (nextAvailable_ == maxPoolSize_) {
      @try {
        [nil_chk(mutex_) java_wait];
      }
      @catch (JavaLangInterruptedException *e) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Interrupted whilst waiting for a free item in the pool : ", [e getMessage]));
      }
    }
    result = JreRetainedLocalValue(IOSObjectArray_Get(nil_chk(pool_), nextAvailable_++));
    if (result == nil) {
      result = JreRetainedLocalValue([((id<CucumberDepsComThoughtworksXstreamCoreUtilPool_Factory>) nil_chk(factory_)) newInstance]);
      [self putInPoolWithId:result];
      ++nextAvailable_;
    }
  }
  return result;
}

- (void)putInPoolWithId:(id)object {
  @synchronized(mutex_) {
    IOSObjectArray_Set(nil_chk(pool_), --nextAvailable_, object);
    [nil_chk(mutex_) java_notify];
  }
}

- (id)readResolve {
  return CucumberDepsComThoughtworksXstreamCoreUtilPool_readResolve(self);
}

- (void)dealloc {
  RELEASE_(factory_);
  RELEASE_(pool_);
  RELEASE_(mutex_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withCucumberDepsComThoughtworksXstreamCoreUtilPool_Factory:);
  methods[1].selector = @selector(fetchFromPool);
  methods[2].selector = @selector(putInPoolWithId:);
  methods[3].selector = @selector(readResolve);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "initialPoolSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxPoolSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "factory_", "LCucumberDepsComThoughtworksXstreamCoreUtilPool_Factory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pool_", "[LNSObject;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "nextAvailable_", "I", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "mutex_", "LNSObject;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IILCucumberDepsComThoughtworksXstreamCoreUtilPool_Factory;", "putInPool", "LNSObject;", "LCucumberDepsComThoughtworksXstreamCoreUtilPool_Factory;" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamCoreUtilPool = { "Pool", "cucumber.deps.com.thoughtworks.xstream.core.util", ptrTable, methods, fields, 7, 0x1, 4, 6, -1, 3, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamCoreUtilPool;
}

@end

void CucumberDepsComThoughtworksXstreamCoreUtilPool_initWithInt_withInt_withCucumberDepsComThoughtworksXstreamCoreUtilPool_Factory_(CucumberDepsComThoughtworksXstreamCoreUtilPool *self, jint initialPoolSize, jint maxPoolSize, id<CucumberDepsComThoughtworksXstreamCoreUtilPool_Factory> factory) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mutex_, new_NSObject_init());
  self->initialPoolSize_ = initialPoolSize;
  self->maxPoolSize_ = maxPoolSize;
  JreStrongAssign(&self->factory_, factory);
}

CucumberDepsComThoughtworksXstreamCoreUtilPool *new_CucumberDepsComThoughtworksXstreamCoreUtilPool_initWithInt_withInt_withCucumberDepsComThoughtworksXstreamCoreUtilPool_Factory_(jint initialPoolSize, jint maxPoolSize, id<CucumberDepsComThoughtworksXstreamCoreUtilPool_Factory> factory) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamCoreUtilPool, initWithInt_withInt_withCucumberDepsComThoughtworksXstreamCoreUtilPool_Factory_, initialPoolSize, maxPoolSize, factory)
}

CucumberDepsComThoughtworksXstreamCoreUtilPool *create_CucumberDepsComThoughtworksXstreamCoreUtilPool_initWithInt_withInt_withCucumberDepsComThoughtworksXstreamCoreUtilPool_Factory_(jint initialPoolSize, jint maxPoolSize, id<CucumberDepsComThoughtworksXstreamCoreUtilPool_Factory> factory) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamCoreUtilPool, initWithInt_withInt_withCucumberDepsComThoughtworksXstreamCoreUtilPool_Factory_, initialPoolSize, maxPoolSize, factory)
}

id CucumberDepsComThoughtworksXstreamCoreUtilPool_readResolve(CucumberDepsComThoughtworksXstreamCoreUtilPool *self) {
  JreStrongAssignAndConsume(&self->mutex_, new_NSObject_init());
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamCoreUtilPool)

@implementation CucumberDepsComThoughtworksXstreamCoreUtilPool_Factory

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(newInstance);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LCucumberDepsComThoughtworksXstreamCoreUtilPool;" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamCoreUtilPool_Factory = { "Factory", "cucumber.deps.com.thoughtworks.xstream.core.util", ptrTable, methods, NULL, 7, 0x609, 1, 0, 0, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamCoreUtilPool_Factory;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamCoreUtilPool_Factory)
