//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/converters/extended/ThrowableConverter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/Converter.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/ConverterLookup.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/MarshallingContext.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/UnmarshallingContext.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/extended/ThrowableConverter.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/HierarchicalStreamWriter.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Throwable.h"

@interface CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter () {
 @public
  id<CucumberDepsComThoughtworksXstreamConvertersConverter> defaultConverter_;
  id<CucumberDepsComThoughtworksXstreamConvertersConverterLookup> lookup_;
}

- (id<CucumberDepsComThoughtworksXstreamConvertersConverter>)getConverter;

@end

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter, defaultConverter_, id<CucumberDepsComThoughtworksXstreamConvertersConverter>)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter, lookup_, id<CucumberDepsComThoughtworksXstreamConvertersConverterLookup>)

__attribute__((unused)) static id<CucumberDepsComThoughtworksXstreamConvertersConverter> CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter_getConverter(CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter *self);

@implementation CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter

- (instancetype __nonnull)initWithCucumberDepsComThoughtworksXstreamConvertersConverter:(id<CucumberDepsComThoughtworksXstreamConvertersConverter>)defaultConverter {
  CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter_initWithCucumberDepsComThoughtworksXstreamConvertersConverter_(self, defaultConverter);
  return self;
}

- (instancetype __nonnull)initWithCucumberDepsComThoughtworksXstreamConvertersConverterLookup:(id<CucumberDepsComThoughtworksXstreamConvertersConverterLookup>)lookup {
  CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter_initWithCucumberDepsComThoughtworksXstreamConvertersConverterLookup_(self, lookup);
  return self;
}

- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  return [JavaLangThrowable_class_() isAssignableFrom:type];
}

- (void)marshalWithId:(id)source
withCucumberDepsComThoughtworksXstreamIoHierarchicalStreamWriter:(id<CucumberDepsComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
withCucumberDepsComThoughtworksXstreamConvertersMarshallingContext:(id<CucumberDepsComThoughtworksXstreamConvertersMarshallingContext>)context {
  JavaLangThrowable *throwable = (JavaLangThrowable *) cast_chk(source, [JavaLangThrowable class]);
  if ([((JavaLangThrowable *) nil_chk(throwable)) getCause] == nil) {
    @try {
      [throwable initCauseWithJavaLangThrowable:nil];
    }
    @catch (JavaLangIllegalStateException *e) {
    }
  }
  [throwable getStackTrace];
  [((id<CucumberDepsComThoughtworksXstreamConvertersConverter>) nil_chk(CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter_getConverter(self))) marshalWithId:throwable withCucumberDepsComThoughtworksXstreamIoHierarchicalStreamWriter:writer withCucumberDepsComThoughtworksXstreamConvertersMarshallingContext:context];
}

- (id<CucumberDepsComThoughtworksXstreamConvertersConverter>)getConverter {
  return CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter_getConverter(self);
}

- (id)unmarshalWithCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader:(id<CucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader>)reader
           withCucumberDepsComThoughtworksXstreamConvertersUnmarshallingContext:(id<CucumberDepsComThoughtworksXstreamConvertersUnmarshallingContext>)context {
  return [((id<CucumberDepsComThoughtworksXstreamConvertersConverter>) nil_chk(CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter_getConverter(self))) unmarshalWithCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader:reader withCucumberDepsComThoughtworksXstreamConvertersUnmarshallingContext:context];
}

- (void)dealloc {
  RELEASE_(defaultConverter_);
  RELEASE_(lookup_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LCucumberDepsComThoughtworksXstreamConvertersConverter;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberDepsComThoughtworksXstreamConvertersConverter:);
  methods[1].selector = @selector(initWithCucumberDepsComThoughtworksXstreamConvertersConverterLookup:);
  methods[2].selector = @selector(canConvertWithIOSClass:);
  methods[3].selector = @selector(marshalWithId:withCucumberDepsComThoughtworksXstreamIoHierarchicalStreamWriter:withCucumberDepsComThoughtworksXstreamConvertersMarshallingContext:);
  methods[4].selector = @selector(getConverter);
  methods[5].selector = @selector(unmarshalWithCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader:withCucumberDepsComThoughtworksXstreamConvertersUnmarshallingContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "defaultConverter_", "LCucumberDepsComThoughtworksXstreamConvertersConverter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lookup_", "LCucumberDepsComThoughtworksXstreamConvertersConverterLookup;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCucumberDepsComThoughtworksXstreamConvertersConverter;", "LCucumberDepsComThoughtworksXstreamConvertersConverterLookup;", "canConvert", "LIOSClass;", "marshal", "LNSObject;LCucumberDepsComThoughtworksXstreamIoHierarchicalStreamWriter;LCucumberDepsComThoughtworksXstreamConvertersMarshallingContext;", "unmarshal", "LCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader;LCucumberDepsComThoughtworksXstreamConvertersUnmarshallingContext;" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter = { "ThrowableConverter", "cucumber.deps.com.thoughtworks.xstream.converters.extended", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter;
}

@end

void CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter_initWithCucumberDepsComThoughtworksXstreamConvertersConverter_(CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter *self, id<CucumberDepsComThoughtworksXstreamConvertersConverter> defaultConverter) {
  NSObject_init(self);
  JreStrongAssign(&self->defaultConverter_, defaultConverter);
  JreStrongAssign(&self->lookup_, nil);
}

CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter *new_CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter_initWithCucumberDepsComThoughtworksXstreamConvertersConverter_(id<CucumberDepsComThoughtworksXstreamConvertersConverter> defaultConverter) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter, initWithCucumberDepsComThoughtworksXstreamConvertersConverter_, defaultConverter)
}

CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter *create_CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter_initWithCucumberDepsComThoughtworksXstreamConvertersConverter_(id<CucumberDepsComThoughtworksXstreamConvertersConverter> defaultConverter) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter, initWithCucumberDepsComThoughtworksXstreamConvertersConverter_, defaultConverter)
}

void CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter_initWithCucumberDepsComThoughtworksXstreamConvertersConverterLookup_(CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter *self, id<CucumberDepsComThoughtworksXstreamConvertersConverterLookup> lookup) {
  NSObject_init(self);
  JreStrongAssign(&self->lookup_, lookup);
}

CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter *new_CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter_initWithCucumberDepsComThoughtworksXstreamConvertersConverterLookup_(id<CucumberDepsComThoughtworksXstreamConvertersConverterLookup> lookup) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter, initWithCucumberDepsComThoughtworksXstreamConvertersConverterLookup_, lookup)
}

CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter *create_CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter_initWithCucumberDepsComThoughtworksXstreamConvertersConverterLookup_(id<CucumberDepsComThoughtworksXstreamConvertersConverterLookup> lookup) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter, initWithCucumberDepsComThoughtworksXstreamConvertersConverterLookup_, lookup)
}

id<CucumberDepsComThoughtworksXstreamConvertersConverter> CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter_getConverter(CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter *self) {
  return self->defaultConverter_ != nil ? self->defaultConverter_ : [((id<CucumberDepsComThoughtworksXstreamConvertersConverterLookup>) nil_chk(self->lookup_)) lookupConverterForTypeWithIOSClass:NSObject_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamConvertersExtendedThrowableConverter)
