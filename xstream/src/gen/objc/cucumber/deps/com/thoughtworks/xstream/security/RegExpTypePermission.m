//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/security/RegExpTypePermission.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/security/RegExpTypePermission.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission () {
 @public
  IOSObjectArray *patterns_;
}

+ (IOSObjectArray *)getPatternsWithNSStringArray:(IOSObjectArray *)patterns;

@end

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission, patterns_, IOSObjectArray *)

__attribute__((unused)) static IOSObjectArray *CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission_getPatternsWithNSStringArray_(IOSObjectArray *patterns);

@implementation CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission

- (instancetype __nonnull)initWithNSStringArray:(IOSObjectArray *)patterns {
  CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission_initWithNSStringArray_(self, patterns);
  return self;
}

- (instancetype __nonnull)initWithJavaUtilRegexPatternArray:(IOSObjectArray *)patterns {
  CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission_initWithJavaUtilRegexPatternArray_(self, patterns);
  return self;
}

- (jboolean)allowsWithIOSClass:(IOSClass *)type {
  if (type != nil) {
    NSString *name = [type getName];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(patterns_))->size_; ++i) if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(IOSObjectArray_Get(patterns_, i))) matcherWithJavaLangCharSequence:name])) matches]) return true;
  }
  return false;
}

+ (IOSObjectArray *)getPatternsWithNSStringArray:(IOSObjectArray *)patterns {
  return CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission_getPatternsWithNSStringArray_(patterns);
}

- (void)dealloc {
  RELEASE_(patterns_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "[LJavaUtilRegexPattern;", 0xa, 4, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSStringArray:);
  methods[1].selector = @selector(initWithJavaUtilRegexPatternArray:);
  methods[2].selector = @selector(allowsWithIOSClass:);
  methods[3].selector = @selector(getPatternsWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "patterns_", "[LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSString;", "[LJavaUtilRegexPattern;", "allows", "LIOSClass;", "getPatterns" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission = { "RegExpTypePermission", "cucumber.deps.com.thoughtworks.xstream.security", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission;
}

@end

void CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission_initWithNSStringArray_(CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission *self, IOSObjectArray *patterns) {
  CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission_initWithJavaUtilRegexPatternArray_(self, CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission_getPatternsWithNSStringArray_(patterns));
}

CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission *new_CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission_initWithNSStringArray_(IOSObjectArray *patterns) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission, initWithNSStringArray_, patterns)
}

CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission *create_CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission_initWithNSStringArray_(IOSObjectArray *patterns) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission, initWithNSStringArray_, patterns)
}

void CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission_initWithJavaUtilRegexPatternArray_(CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission *self, IOSObjectArray *patterns) {
  NSObject_init(self);
  JreStrongAssign(&self->patterns_, patterns == nil ? [IOSObjectArray arrayWithLength:0 type:JavaUtilRegexPattern_class_()] : patterns);
}

CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission *new_CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission_initWithJavaUtilRegexPatternArray_(IOSObjectArray *patterns) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission, initWithJavaUtilRegexPatternArray_, patterns)
}

CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission *create_CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission_initWithJavaUtilRegexPatternArray_(IOSObjectArray *patterns) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission, initWithJavaUtilRegexPatternArray_, patterns)
}

IOSObjectArray *CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission_getPatternsWithNSStringArray_(IOSObjectArray *patterns) {
  CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission_initialize();
  if (patterns == nil) return nil;
  IOSObjectArray *array = [IOSObjectArray arrayWithLength:patterns->size_ type:JavaUtilRegexPattern_class_()];
  for (jint i = 0; i < array->size_; ++i) IOSObjectArray_Set(array, i, JavaUtilRegexPattern_compileWithNSString_(IOSObjectArray_Get(patterns, i)));
  return array;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamSecurityRegExpTypePermission)
