//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/core/util/QuickWriter.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/util/QuickWriter.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/StreamException.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/System.h"

@interface CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter () {
 @public
  JavaIoWriter *writer_;
  IOSCharArray *buffer_;
  jint pointer_;
}

- (void)rawWithCharArray:(IOSCharArray *)c;

- (void)rawWithChar:(jchar)c;

@end

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter, writer_, JavaIoWriter *)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter, buffer_, IOSCharArray *)

__attribute__((unused)) static void CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter_rawWithCharArray_(CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter *self, IOSCharArray *c);

__attribute__((unused)) static void CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter_rawWithChar_(CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter *self, jchar c);

@implementation CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter

- (instancetype __nonnull)initWithJavaIoWriter:(JavaIoWriter *)writer {
  CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter_initWithJavaIoWriter_(self, writer);
  return self;
}

- (instancetype __nonnull)initWithJavaIoWriter:(JavaIoWriter *)writer
                                       withInt:(jint)bufferSize {
  CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter_initWithJavaIoWriter_withInt_(self, writer, bufferSize);
  return self;
}

- (void)writeWithNSString:(NSString *)str {
  jint len = [((NSString *) nil_chk(str)) java_length];
  if (pointer_ + len >= ((IOSCharArray *) nil_chk(buffer_))->size_) {
    [self flush];
    if (len > ((IOSCharArray *) nil_chk(buffer_))->size_) {
      CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter_rawWithCharArray_(self, [str java_toCharArray]);
      return;
    }
  }
  [str java_getChars:0 sourceEnd:len destination:buffer_ destinationBegin:pointer_];
  pointer_ += len;
}

- (void)writeWithChar:(jchar)c {
  if (pointer_ + 1 >= ((IOSCharArray *) nil_chk(buffer_))->size_) {
    [self flush];
    if (((IOSCharArray *) nil_chk(buffer_))->size_ == 0) {
      CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter_rawWithChar_(self, c);
      return;
    }
  }
  *IOSCharArray_GetRef(buffer_, pointer_++) = c;
}

- (void)writeWithCharArray:(IOSCharArray *)c {
  jint len = ((IOSCharArray *) nil_chk(c))->size_;
  if (pointer_ + len >= ((IOSCharArray *) nil_chk(buffer_))->size_) {
    [self flush];
    if (len > ((IOSCharArray *) nil_chk(buffer_))->size_) {
      CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter_rawWithCharArray_(self, c);
      return;
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, 0, buffer_, pointer_, len);
  pointer_ += len;
}

- (void)flush {
  @try {
    [((JavaIoWriter *) nil_chk(writer_)) writeWithCharArray:buffer_ withInt:0 withInt:pointer_];
    pointer_ = 0;
    [writer_ flush];
  }
  @catch (JavaIoIOException *e) {
    @throw create_CucumberDepsComThoughtworksXstreamIoStreamException_initWithJavaLangThrowable_(e);
  }
}

- (void)close {
  @try {
    [((JavaIoWriter *) nil_chk(writer_)) writeWithCharArray:buffer_ withInt:0 withInt:pointer_];
    pointer_ = 0;
    [writer_ close];
  }
  @catch (JavaIoIOException *e) {
    @throw create_CucumberDepsComThoughtworksXstreamIoStreamException_initWithJavaLangThrowable_(e);
  }
}

- (void)rawWithCharArray:(IOSCharArray *)c {
  CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter_rawWithCharArray_(self, c);
}

- (void)rawWithChar:(jchar)c {
  CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter_rawWithChar_(self, c);
}

- (void)dealloc {
  RELEASE_(writer_);
  RELEASE_(buffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoWriter:);
  methods[1].selector = @selector(initWithJavaIoWriter:withInt:);
  methods[2].selector = @selector(writeWithNSString:);
  methods[3].selector = @selector(writeWithChar:);
  methods[4].selector = @selector(writeWithCharArray:);
  methods[5].selector = @selector(flush);
  methods[6].selector = @selector(close);
  methods[7].selector = @selector(rawWithCharArray:);
  methods[8].selector = @selector(rawWithChar:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "writer_", "LJavaIoWriter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "buffer_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pointer_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoWriter;", "LJavaIoWriter;I", "write", "LNSString;", "C", "[C", "raw" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter = { "QuickWriter", "cucumber.deps.com.thoughtworks.xstream.core.util", ptrTable, methods, fields, 7, 0x1, 9, 3, -1, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter;
}

@end

void CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter_initWithJavaIoWriter_(CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter *self, JavaIoWriter *writer) {
  CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter_initWithJavaIoWriter_withInt_(self, writer, 1024);
}

CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter *new_CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter_initWithJavaIoWriter_(JavaIoWriter *writer) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter, initWithJavaIoWriter_, writer)
}

CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter *create_CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter_initWithJavaIoWriter_(JavaIoWriter *writer) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter, initWithJavaIoWriter_, writer)
}

void CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter_initWithJavaIoWriter_withInt_(CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter *self, JavaIoWriter *writer, jint bufferSize) {
  NSObject_init(self);
  JreStrongAssign(&self->writer_, writer);
  JreStrongAssignAndConsume(&self->buffer_, [IOSCharArray newArrayWithLength:bufferSize]);
}

CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter *new_CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter_initWithJavaIoWriter_withInt_(JavaIoWriter *writer, jint bufferSize) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter, initWithJavaIoWriter_withInt_, writer, bufferSize)
}

CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter *create_CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter_initWithJavaIoWriter_withInt_(JavaIoWriter *writer, jint bufferSize) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter, initWithJavaIoWriter_withInt_, writer, bufferSize)
}

void CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter_rawWithCharArray_(CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter *self, IOSCharArray *c) {
  @try {
    [((JavaIoWriter *) nil_chk(self->writer_)) writeWithCharArray:c];
    [self->writer_ flush];
  }
  @catch (JavaIoIOException *e) {
    @throw create_CucumberDepsComThoughtworksXstreamIoStreamException_initWithJavaLangThrowable_(e);
  }
}

void CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter_rawWithChar_(CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter *self, jchar c) {
  @try {
    [((JavaIoWriter *) nil_chk(self->writer_)) writeWithInt:c];
    [self->writer_ flush];
  }
  @catch (JavaIoIOException *e) {
    @throw create_CucumberDepsComThoughtworksXstreamIoStreamException_initWithJavaLangThrowable_(e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamCoreUtilQuickWriter)
