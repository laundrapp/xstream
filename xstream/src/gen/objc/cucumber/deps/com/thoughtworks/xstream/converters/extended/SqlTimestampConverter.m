//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/converters/extended/SqlTimestampConverter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/basic/AbstractSingleValueConverter.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/extended/SqlTimestampConverter.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/util/ThreadSafeSimpleDateFormat.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/sql/Timestamp.h"
#include "java/text/ParseException.h"
#include "java/util/Date.h"
#include "java/util/TimeZone.h"

@interface CucumberDepsComThoughtworksXstreamConvertersExtendedSqlTimestampConverter () {
 @public
  CucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *format_;
}

@end

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamConvertersExtendedSqlTimestampConverter, format_, CucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *)

@implementation CucumberDepsComThoughtworksXstreamConvertersExtendedSqlTimestampConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberDepsComThoughtworksXstreamConvertersExtendedSqlTimestampConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  return [((IOSClass *) nil_chk(type)) isEqual:JavaSqlTimestamp_class_()];
}

- (NSString *)toStringWithId:(id)obj {
  JavaSqlTimestamp *timestamp = (JavaSqlTimestamp *) cast_chk(obj, [JavaSqlTimestamp class]);
  JavaLangStringBuffer *buffer = [create_JavaLangStringBuffer_initWithNSString_([((CucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *) nil_chk(format_)) formatWithJavaUtilDate:timestamp]) appendWithChar:'.'];
  if ([((JavaSqlTimestamp *) nil_chk(timestamp)) getNanos] == 0) {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithChar:'0'];
  }
  else {
    NSString *nanos = NSString_java_valueOfInt_([timestamp getNanos] + 1000000000);
    jint last = 10;
    while (last > 2 && [((NSString *) nil_chk(nanos)) charAtWithInt:last - 1] == '0') --last;
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithJavaLangCharSequence:[((NSString *) nil_chk(nanos)) subSequenceFrom:1 to:last]];
  }
  return [buffer description];
}

- (id)fromStringWithNSString:(NSString *)str {
  jint idx = [((NSString *) nil_chk(str)) java_lastIndexOf:'.'];
  if (idx < 0 || [str java_length] - idx < 2 || [str java_length] - idx > 10) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]");
  }
  @try {
    JavaSqlTimestamp *timestamp = create_JavaSqlTimestamp_initWithLong_([((JavaUtilDate *) nil_chk([((CucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *) nil_chk(format_)) parseWithNSString:[str java_substring:0 endIndex:idx]])) getTime]);
    JavaLangStringBuffer *buffer = create_JavaLangStringBuffer_initWithNSString_([str java_substring:idx + 1]);
    while ([buffer java_length] != 9) {
      [buffer appendWithChar:'0'];
    }
    [timestamp setNanosWithInt:JavaLangInteger_parseIntWithNSString_([buffer description])];
    return timestamp;
  }
  @catch (JavaTextParseException *e) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]");
  }
}

- (void)dealloc {
  RELEASE_(format_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(canConvertWithIOSClass:);
  methods[2].selector = @selector(toStringWithId:);
  methods[3].selector = @selector(fromStringWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "format_", "LCucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "canConvert", "LIOSClass;", "toString", "LNSObject;", "fromString", "LNSString;" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamConvertersExtendedSqlTimestampConverter = { "SqlTimestampConverter", "cucumber.deps.com.thoughtworks.xstream.converters.extended", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamConvertersExtendedSqlTimestampConverter;
}

@end

void CucumberDepsComThoughtworksXstreamConvertersExtendedSqlTimestampConverter_init(CucumberDepsComThoughtworksXstreamConvertersExtendedSqlTimestampConverter *self) {
  CucumberDepsComThoughtworksXstreamConvertersBasicAbstractSingleValueConverter_init(self);
  JreStrongAssignAndConsume(&self->format_, new_CucumberDepsComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat_initWithNSString_withJavaUtilTimeZone_withInt_withInt_withBoolean_(@"yyyy-MM-dd HH:mm:ss", JavaUtilTimeZone_getTimeZoneWithNSString_(@"UTC"), 0, 5, false));
}

CucumberDepsComThoughtworksXstreamConvertersExtendedSqlTimestampConverter *new_CucumberDepsComThoughtworksXstreamConvertersExtendedSqlTimestampConverter_init() {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamConvertersExtendedSqlTimestampConverter, init)
}

CucumberDepsComThoughtworksXstreamConvertersExtendedSqlTimestampConverter *create_CucumberDepsComThoughtworksXstreamConvertersExtendedSqlTimestampConverter_init() {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamConvertersExtendedSqlTimestampConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamConvertersExtendedSqlTimestampConverter)
