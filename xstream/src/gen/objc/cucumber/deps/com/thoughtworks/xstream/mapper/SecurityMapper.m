//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/mapper/SecurityMapper.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/Mapper.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/MapperWrapper.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/SecurityMapper.h"
#include "cucumber/deps/com/thoughtworks/xstream/security/AnyTypePermission.h"
#include "cucumber/deps/com/thoughtworks/xstream/security/ForbiddenClassException.h"
#include "cucumber/deps/com/thoughtworks/xstream/security/NoTypePermission.h"
#include "cucumber/deps/com/thoughtworks/xstream/security/TypePermission.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"

@interface CucumberDepsComThoughtworksXstreamMapperSecurityMapper () {
 @public
  id<JavaUtilList> permissions_;
}

@end

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamMapperSecurityMapper, permissions_, id<JavaUtilList>)

@implementation CucumberDepsComThoughtworksXstreamMapperSecurityMapper

- (instancetype __nonnull)initWithCucumberDepsComThoughtworksXstreamMapperMapper:(id<CucumberDepsComThoughtworksXstreamMapperMapper>)wrapped {
  CucumberDepsComThoughtworksXstreamMapperSecurityMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(self, wrapped);
  return self;
}

- (instancetype __nonnull)initWithCucumberDepsComThoughtworksXstreamMapperMapper:(id<CucumberDepsComThoughtworksXstreamMapperMapper>)wrapped
               withCucumberDepsComThoughtworksXstreamSecurityTypePermissionArray:(IOSObjectArray *)permissions {
  CucumberDepsComThoughtworksXstreamMapperSecurityMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_withCucumberDepsComThoughtworksXstreamSecurityTypePermissionArray_(self, wrapped, permissions);
  return self;
}

- (void)addPermissionWithCucumberDepsComThoughtworksXstreamSecurityTypePermission:(id<CucumberDepsComThoughtworksXstreamSecurityTypePermission>)permission {
  if ([((id<CucumberDepsComThoughtworksXstreamSecurityTypePermission>) nil_chk(permission)) isEqual:JreLoadStatic(CucumberDepsComThoughtworksXstreamSecurityNoTypePermission, NONE)] || [permission isEqual:JreLoadStatic(CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission, ANY)]) [((id<JavaUtilList>) nil_chk(permissions_)) clear];
  [((id<JavaUtilList>) nil_chk(permissions_)) addWithInt:0 withId:permission];
}

- (IOSClass *)realClassWithNSString:(NSString *)elementName {
  IOSClass *type = [super realClassWithNSString:elementName];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(permissions_)) size]; ++i) {
    id<CucumberDepsComThoughtworksXstreamSecurityTypePermission> permission = (id<CucumberDepsComThoughtworksXstreamSecurityTypePermission>) cast_check([permissions_ getWithInt:i], CucumberDepsComThoughtworksXstreamSecurityTypePermission_class_());
    if ([((id<CucumberDepsComThoughtworksXstreamSecurityTypePermission>) nil_chk(permission)) allowsWithIOSClass:type]) return type;
  }
  @throw create_CucumberDepsComThoughtworksXstreamSecurityForbiddenClassException_initWithIOSClass_(type);
}

- (void)dealloc {
  RELEASE_(permissions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberDepsComThoughtworksXstreamMapperMapper:);
  methods[1].selector = @selector(initWithCucumberDepsComThoughtworksXstreamMapperMapper:withCucumberDepsComThoughtworksXstreamSecurityTypePermissionArray:);
  methods[2].selector = @selector(addPermissionWithCucumberDepsComThoughtworksXstreamSecurityTypePermission:);
  methods[3].selector = @selector(realClassWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "permissions_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCucumberDepsComThoughtworksXstreamMapperMapper;", "LCucumberDepsComThoughtworksXstreamMapperMapper;[LCucumberDepsComThoughtworksXstreamSecurityTypePermission;", "addPermission", "LCucumberDepsComThoughtworksXstreamSecurityTypePermission;", "realClass", "LNSString;" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamMapperSecurityMapper = { "SecurityMapper", "cucumber.deps.com.thoughtworks.xstream.mapper", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamMapperSecurityMapper;
}

@end

void CucumberDepsComThoughtworksXstreamMapperSecurityMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(CucumberDepsComThoughtworksXstreamMapperSecurityMapper *self, id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped) {
  CucumberDepsComThoughtworksXstreamMapperSecurityMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_withCucumberDepsComThoughtworksXstreamSecurityTypePermissionArray_(self, wrapped, nil);
}

CucumberDepsComThoughtworksXstreamMapperSecurityMapper *new_CucumberDepsComThoughtworksXstreamMapperSecurityMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamMapperSecurityMapper, initWithCucumberDepsComThoughtworksXstreamMapperMapper_, wrapped)
}

CucumberDepsComThoughtworksXstreamMapperSecurityMapper *create_CucumberDepsComThoughtworksXstreamMapperSecurityMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamMapperSecurityMapper, initWithCucumberDepsComThoughtworksXstreamMapperMapper_, wrapped)
}

void CucumberDepsComThoughtworksXstreamMapperSecurityMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_withCucumberDepsComThoughtworksXstreamSecurityTypePermissionArray_(CucumberDepsComThoughtworksXstreamMapperSecurityMapper *self, id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped, IOSObjectArray *permissions) {
  CucumberDepsComThoughtworksXstreamMapperMapperWrapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(self, wrapped);
  JreStrongAssign(&self->permissions_, permissions == nil ? create_JavaUtilArrayList_init() : create_JavaUtilArrayList_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(permissions)));
}

CucumberDepsComThoughtworksXstreamMapperSecurityMapper *new_CucumberDepsComThoughtworksXstreamMapperSecurityMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_withCucumberDepsComThoughtworksXstreamSecurityTypePermissionArray_(id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped, IOSObjectArray *permissions) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamMapperSecurityMapper, initWithCucumberDepsComThoughtworksXstreamMapperMapper_withCucumberDepsComThoughtworksXstreamSecurityTypePermissionArray_, wrapped, permissions)
}

CucumberDepsComThoughtworksXstreamMapperSecurityMapper *create_CucumberDepsComThoughtworksXstreamMapperSecurityMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_withCucumberDepsComThoughtworksXstreamSecurityTypePermissionArray_(id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped, IOSObjectArray *permissions) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamMapperSecurityMapper, initWithCucumberDepsComThoughtworksXstreamMapperMapper_withCucumberDepsComThoughtworksXstreamSecurityTypePermissionArray_, wrapped, permissions)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamMapperSecurityMapper)
