//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/core/ReferenceByXPathUnmarshaller.java
//

#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/ConverterLookup.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/AbstractReferenceUnmarshaller.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/ReferenceByXPathUnmarshaller.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/AbstractReader.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/path/Path.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/path/PathTracker.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/path/PathTrackingReader.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/Mapper.h"

@interface CucumberDepsComThoughtworksXstreamCoreReferenceByXPathUnmarshaller () {
 @public
  CucumberDepsComThoughtworksXstreamIoPathPathTracker *pathTracker_;
}

@end

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamCoreReferenceByXPathUnmarshaller, pathTracker_, CucumberDepsComThoughtworksXstreamIoPathPathTracker *)

@implementation CucumberDepsComThoughtworksXstreamCoreReferenceByXPathUnmarshaller

- (instancetype __nonnull)initWithId:(id)root
withCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader:(id<CucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader>)reader
withCucumberDepsComThoughtworksXstreamConvertersConverterLookup:(id<CucumberDepsComThoughtworksXstreamConvertersConverterLookup>)converterLookup
withCucumberDepsComThoughtworksXstreamMapperMapper:(id<CucumberDepsComThoughtworksXstreamMapperMapper>)mapper {
  CucumberDepsComThoughtworksXstreamCoreReferenceByXPathUnmarshaller_initWithId_withCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withCucumberDepsComThoughtworksXstreamMapperMapper_(self, root, reader, converterLookup, mapper);
  return self;
}

- (id)getReferenceKeyWithNSString:(NSString *)reference {
  CucumberDepsComThoughtworksXstreamIoPathPath *path = create_CucumberDepsComThoughtworksXstreamIoPathPath_initWithNSString_(isNameEncoding_ ? [((CucumberDepsComThoughtworksXstreamIoAbstractReader *) nil_chk(((CucumberDepsComThoughtworksXstreamIoAbstractReader *) cast_chk([((id<CucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader_)) underlyingReader], [CucumberDepsComThoughtworksXstreamIoAbstractReader class])))) decodeNodeWithNSString:reference] : reference);
  return [((NSString *) nil_chk(reference)) charAtWithInt:0] != '/' ? [((CucumberDepsComThoughtworksXstreamIoPathPath *) nil_chk([((CucumberDepsComThoughtworksXstreamIoPathPathTracker *) nil_chk(pathTracker_)) getPath])) applyWithCucumberDepsComThoughtworksXstreamIoPathPath:path] : path;
}

- (id)getCurrentReferenceKey {
  return [((CucumberDepsComThoughtworksXstreamIoPathPathTracker *) nil_chk(pathTracker_)) getPath];
}

- (void)dealloc {
  RELEASE_(pathTracker_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithId:withCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader:withCucumberDepsComThoughtworksXstreamConvertersConverterLookup:withCucumberDepsComThoughtworksXstreamMapperMapper:);
  methods[1].selector = @selector(getReferenceKeyWithNSString:);
  methods[2].selector = @selector(getCurrentReferenceKey);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pathTracker_", "LCucumberDepsComThoughtworksXstreamIoPathPathTracker;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isNameEncoding_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader;LCucumberDepsComThoughtworksXstreamConvertersConverterLookup;LCucumberDepsComThoughtworksXstreamMapperMapper;", "getReferenceKey", "LNSString;" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamCoreReferenceByXPathUnmarshaller = { "ReferenceByXPathUnmarshaller", "cucumber.deps.com.thoughtworks.xstream.core", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamCoreReferenceByXPathUnmarshaller;
}

@end

void CucumberDepsComThoughtworksXstreamCoreReferenceByXPathUnmarshaller_initWithId_withCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withCucumberDepsComThoughtworksXstreamMapperMapper_(CucumberDepsComThoughtworksXstreamCoreReferenceByXPathUnmarshaller *self, id root, id<CucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader> reader, id<CucumberDepsComThoughtworksXstreamConvertersConverterLookup> converterLookup, id<CucumberDepsComThoughtworksXstreamMapperMapper> mapper) {
  CucumberDepsComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_initWithId_withCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withCucumberDepsComThoughtworksXstreamMapperMapper_(self, root, reader, converterLookup, mapper);
  JreStrongAssignAndConsume(&self->pathTracker_, new_CucumberDepsComThoughtworksXstreamIoPathPathTracker_init());
  JreStrongAssignAndConsume(&self->reader_, new_CucumberDepsComThoughtworksXstreamIoPathPathTrackingReader_initWithCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader_withCucumberDepsComThoughtworksXstreamIoPathPathTracker_(reader, self->pathTracker_));
  self->isNameEncoding_ = [[((id<CucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) underlyingReader] isKindOfClass:[CucumberDepsComThoughtworksXstreamIoAbstractReader class]];
}

CucumberDepsComThoughtworksXstreamCoreReferenceByXPathUnmarshaller *new_CucumberDepsComThoughtworksXstreamCoreReferenceByXPathUnmarshaller_initWithId_withCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withCucumberDepsComThoughtworksXstreamMapperMapper_(id root, id<CucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader> reader, id<CucumberDepsComThoughtworksXstreamConvertersConverterLookup> converterLookup, id<CucumberDepsComThoughtworksXstreamMapperMapper> mapper) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamCoreReferenceByXPathUnmarshaller, initWithId_withCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withCucumberDepsComThoughtworksXstreamMapperMapper_, root, reader, converterLookup, mapper)
}

CucumberDepsComThoughtworksXstreamCoreReferenceByXPathUnmarshaller *create_CucumberDepsComThoughtworksXstreamCoreReferenceByXPathUnmarshaller_initWithId_withCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withCucumberDepsComThoughtworksXstreamMapperMapper_(id root, id<CucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader> reader, id<CucumberDepsComThoughtworksXstreamConvertersConverterLookup> converterLookup, id<CucumberDepsComThoughtworksXstreamMapperMapper> mapper) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamCoreReferenceByXPathUnmarshaller, initWithId_withCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withCucumberDepsComThoughtworksXstreamMapperMapper_, root, reader, converterLookup, mapper)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamCoreReferenceByXPathUnmarshaller)
