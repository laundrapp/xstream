//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/core/DefaultConverterLookup.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/ConversionException.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/Converter.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/Caching.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/DefaultConverterLookup.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/util/PrioritizedList.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/WeakHashMap.h"

@interface CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup () {
 @public
  CucumberDepsComThoughtworksXstreamCoreUtilPrioritizedList *converters_;
  id<JavaUtilMap> typeToConverterMap_;
}

- (id)readResolve;

@end

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup, converters_, CucumberDepsComThoughtworksXstreamCoreUtilPrioritizedList *)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup, typeToConverterMap_, id<JavaUtilMap>)

__attribute__((unused)) static id CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup_readResolve(CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup *self);

@implementation CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithCucumberDepsComThoughtworksXstreamMapperMapper:(id<CucumberDepsComThoughtworksXstreamMapperMapper>)mapper {
  CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(self, mapper);
  return self;
}

- (id<CucumberDepsComThoughtworksXstreamConvertersConverter>)lookupConverterForTypeWithIOSClass:(IOSClass *)type {
  id<CucumberDepsComThoughtworksXstreamConvertersConverter> cachedConverter = (id<CucumberDepsComThoughtworksXstreamConvertersConverter>) cast_check([((id<JavaUtilMap>) nil_chk(typeToConverterMap_)) getWithId:type], CucumberDepsComThoughtworksXstreamConvertersConverter_class_());
  if (cachedConverter != nil) {
    return cachedConverter;
  }
  id<JavaUtilIterator> iterator = [((CucumberDepsComThoughtworksXstreamCoreUtilPrioritizedList *) nil_chk(converters_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    id<CucumberDepsComThoughtworksXstreamConvertersConverter> converter = (id<CucumberDepsComThoughtworksXstreamConvertersConverter>) cast_check([iterator next], CucumberDepsComThoughtworksXstreamConvertersConverter_class_());
    if ([((id<CucumberDepsComThoughtworksXstreamConvertersConverter>) nil_chk(converter)) canConvertWithIOSClass:type]) {
      [((id<JavaUtilMap>) nil_chk(typeToConverterMap_)) putWithId:type withId:converter];
      return converter;
    }
  }
  @throw create_CucumberDepsComThoughtworksXstreamConvertersConversionException_initWithNSString_(JreStrcat("$@", @"No converter specified for ", type));
}

- (void)registerConverterWithCucumberDepsComThoughtworksXstreamConvertersConverter:(id<CucumberDepsComThoughtworksXstreamConvertersConverter>)converter
                                                                           withInt:(jint)priority {
  [((CucumberDepsComThoughtworksXstreamCoreUtilPrioritizedList *) nil_chk(converters_)) addWithId:converter withInt:priority];
  for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(typeToConverterMap_)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    IOSClass *type = (IOSClass *) cast_chk([iter next], [IOSClass class]);
    if ([((id<CucumberDepsComThoughtworksXstreamConvertersConverter>) nil_chk(converter)) canConvertWithIOSClass:type]) {
      [iter remove];
    }
  }
}

- (void)flushCache {
  [((id<JavaUtilMap>) nil_chk(typeToConverterMap_)) clear];
  id<JavaUtilIterator> iterator = [((CucumberDepsComThoughtworksXstreamCoreUtilPrioritizedList *) nil_chk(converters_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    id<CucumberDepsComThoughtworksXstreamConvertersConverter> converter = (id<CucumberDepsComThoughtworksXstreamConvertersConverter>) cast_check([iterator next], CucumberDepsComThoughtworksXstreamConvertersConverter_class_());
    if ([CucumberDepsComThoughtworksXstreamCoreCaching_class_() isInstance:converter]) {
      [((id<CucumberDepsComThoughtworksXstreamCoreCaching>) nil_chk(((id<CucumberDepsComThoughtworksXstreamCoreCaching>) cast_check(converter, CucumberDepsComThoughtworksXstreamCoreCaching_class_())))) flushCache];
    }
  }
}

- (id)readResolve {
  return CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup_readResolve(self);
}

- (void)dealloc {
  RELEASE_(converters_);
  RELEASE_(typeToConverterMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LCucumberDepsComThoughtworksXstreamConvertersConverter;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithCucumberDepsComThoughtworksXstreamMapperMapper:);
  methods[2].selector = @selector(lookupConverterForTypeWithIOSClass:);
  methods[3].selector = @selector(registerConverterWithCucumberDepsComThoughtworksXstreamConvertersConverter:withInt:);
  methods[4].selector = @selector(flushCache);
  methods[5].selector = @selector(readResolve);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "converters_", "LCucumberDepsComThoughtworksXstreamCoreUtilPrioritizedList;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "typeToConverterMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCucumberDepsComThoughtworksXstreamMapperMapper;", "lookupConverterForType", "LIOSClass;", "registerConverter", "LCucumberDepsComThoughtworksXstreamConvertersConverter;I" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup = { "DefaultConverterLookup", "cucumber.deps.com.thoughtworks.xstream.core", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup;
}

@end

void CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup_init(CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->converters_, new_CucumberDepsComThoughtworksXstreamCoreUtilPrioritizedList_init());
  CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup_readResolve(self);
}

CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup *new_CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup_init() {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup, init)
}

CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup *create_CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup_init() {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup, init)
}

void CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup *self, id<CucumberDepsComThoughtworksXstreamMapperMapper> mapper) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->converters_, new_CucumberDepsComThoughtworksXstreamCoreUtilPrioritizedList_init());
}

CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup *new_CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(id<CucumberDepsComThoughtworksXstreamMapperMapper> mapper) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup, initWithCucumberDepsComThoughtworksXstreamMapperMapper_, mapper)
}

CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup *create_CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(id<CucumberDepsComThoughtworksXstreamMapperMapper> mapper) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup, initWithCucumberDepsComThoughtworksXstreamMapperMapper_, mapper)
}

id CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup_readResolve(CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup *self) {
  JreStrongAssign(&self->typeToConverterMap_, JavaUtilCollections_synchronizedMapWithJavaUtilMap_(create_JavaUtilWeakHashMap_init()));
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamCoreDefaultConverterLookup)
