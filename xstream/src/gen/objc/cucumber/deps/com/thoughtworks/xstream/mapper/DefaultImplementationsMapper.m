//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/mapper/DefaultImplementationsMapper.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/InitializationException.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/DefaultImplementationsMapper.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/Mapper.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/MapperWrapper.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper () {
 @public
  id<JavaUtilMap> typeToImpl_;
  id<JavaUtilMap> implToType_;
}

- (id)readResolve;

@end

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper, typeToImpl_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper, implToType_, id<JavaUtilMap>)

__attribute__((unused)) static id CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper_readResolve(CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper *self);

@implementation CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper

- (instancetype __nonnull)initWithCucumberDepsComThoughtworksXstreamMapperMapper:(id<CucumberDepsComThoughtworksXstreamMapperMapper>)wrapped {
  CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(self, wrapped);
  return self;
}

- (void)addDefaults {
  [self addDefaultImplementationWithIOSClass:nil withIOSClass:CucumberDepsComThoughtworksXstreamMapperMapper_Null_class_()];
  [self addDefaultImplementationWithIOSClass:JavaLangBoolean_class_() withIOSClass:[IOSClass booleanClass]];
  [self addDefaultImplementationWithIOSClass:JavaLangCharacter_class_() withIOSClass:[IOSClass charClass]];
  [self addDefaultImplementationWithIOSClass:JavaLangInteger_class_() withIOSClass:[IOSClass intClass]];
  [self addDefaultImplementationWithIOSClass:JavaLangFloat_class_() withIOSClass:[IOSClass floatClass]];
  [self addDefaultImplementationWithIOSClass:JavaLangDouble_class_() withIOSClass:[IOSClass doubleClass]];
  [self addDefaultImplementationWithIOSClass:JavaLangShort_class_() withIOSClass:[IOSClass shortClass]];
  [self addDefaultImplementationWithIOSClass:JavaLangByte_class_() withIOSClass:[IOSClass byteClass]];
  [self addDefaultImplementationWithIOSClass:JavaLangLong_class_() withIOSClass:[IOSClass longClass]];
}

- (void)addDefaultImplementationWithIOSClass:(IOSClass *)defaultImplementation
                                withIOSClass:(IOSClass *)ofType {
  if (defaultImplementation != nil && [defaultImplementation isInterface]) {
    @throw create_CucumberDepsComThoughtworksXstreamInitializationException_initWithNSString_(JreStrcat("$$", @"Default implementation is not a concrete class: ", [defaultImplementation getName]));
  }
  [((id<JavaUtilMap>) nil_chk(typeToImpl_)) putWithId:ofType withId:defaultImplementation];
  [((id<JavaUtilMap>) nil_chk(implToType_)) putWithId:defaultImplementation withId:ofType];
}

- (NSString *)serializedClassWithIOSClass:(IOSClass *)type {
  IOSClass *baseType = (IOSClass *) cast_chk([((id<JavaUtilMap>) nil_chk(implToType_)) getWithId:type], [IOSClass class]);
  return baseType == nil ? [super serializedClassWithIOSClass:type] : [super serializedClassWithIOSClass:baseType];
}

- (IOSClass *)defaultImplementationOfWithIOSClass:(IOSClass *)type {
  if ([((id<JavaUtilMap>) nil_chk(typeToImpl_)) containsKeyWithId:type]) {
    return (IOSClass *) cast_chk([typeToImpl_ getWithId:type], [IOSClass class]);
  }
  else {
    return [super defaultImplementationOfWithIOSClass:type];
  }
}

- (id)readResolve {
  return CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper_readResolve(self);
}

- (void)dealloc {
  RELEASE_(typeToImpl_);
  RELEASE_(implToType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberDepsComThoughtworksXstreamMapperMapper:);
  methods[1].selector = @selector(addDefaults);
  methods[2].selector = @selector(addDefaultImplementationWithIOSClass:withIOSClass:);
  methods[3].selector = @selector(serializedClassWithIOSClass:);
  methods[4].selector = @selector(defaultImplementationOfWithIOSClass:);
  methods[5].selector = @selector(readResolve);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "typeToImpl_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "implToType_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCucumberDepsComThoughtworksXstreamMapperMapper;", "addDefaultImplementation", "LIOSClass;LIOSClass;", "serializedClass", "LIOSClass;", "defaultImplementationOf" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper = { "DefaultImplementationsMapper", "cucumber.deps.com.thoughtworks.xstream.mapper", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper;
}

@end

void CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper *self, id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped) {
  CucumberDepsComThoughtworksXstreamMapperMapperWrapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(self, wrapped);
  JreStrongAssignAndConsume(&self->typeToImpl_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->implToType_, new_JavaUtilHashMap_init());
  [self addDefaults];
}

CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper *new_CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper, initWithCucumberDepsComThoughtworksXstreamMapperMapper_, wrapped)
}

CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper *create_CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper, initWithCucumberDepsComThoughtworksXstreamMapperMapper_, wrapped)
}

id CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper_readResolve(CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper *self) {
  JreStrongAssignAndConsume(&self->implToType_, new_JavaUtilHashMap_init());
  for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(self->typeToImpl_)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    id type = [iter next];
    [((id<JavaUtilMap>) nil_chk(self->implToType_)) putWithId:[self->typeToImpl_ getWithId:type] withId:type];
  }
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper)
