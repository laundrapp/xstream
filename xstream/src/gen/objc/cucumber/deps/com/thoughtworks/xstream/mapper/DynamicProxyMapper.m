//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/mapper/DynamicProxyMapper.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/DynamicProxyMapper.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/Mapper.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/MapperWrapper.h"
#include "java/lang/reflect/Proxy.h"

@interface CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper () {
 @public
  NSString *alias_;
}

@end

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper, alias_, NSString *)

@implementation CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper

- (instancetype __nonnull)initWithCucumberDepsComThoughtworksXstreamMapperMapper:(id<CucumberDepsComThoughtworksXstreamMapperMapper>)wrapped {
  CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(self, wrapped);
  return self;
}

- (instancetype __nonnull)initWithCucumberDepsComThoughtworksXstreamMapperMapper:(id<CucumberDepsComThoughtworksXstreamMapperMapper>)wrapped
                                                                    withNSString:(NSString *)alias {
  CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_withNSString_(self, wrapped, alias);
  return self;
}

- (NSString *)getAlias {
  return alias_;
}

- (void)setAliasWithNSString:(NSString *)alias {
  JreStrongAssign(&self->alias_, alias);
}

- (NSString *)serializedClassWithIOSClass:(IOSClass *)type {
  if (JavaLangReflectProxy_isProxyClassWithIOSClass_(type)) {
    return alias_;
  }
  else {
    return [super serializedClassWithIOSClass:type];
  }
}

- (IOSClass *)realClassWithNSString:(NSString *)elementName {
  if ([((NSString *) nil_chk(elementName)) isEqual:alias_]) {
    return CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_DynamicProxy_class_();
  }
  else {
    return [super realClassWithNSString:elementName];
  }
}

- (void)dealloc {
  RELEASE_(alias_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, 6, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberDepsComThoughtworksXstreamMapperMapper:);
  methods[1].selector = @selector(initWithCucumberDepsComThoughtworksXstreamMapperMapper:withNSString:);
  methods[2].selector = @selector(getAlias);
  methods[3].selector = @selector(setAliasWithNSString:);
  methods[4].selector = @selector(serializedClassWithIOSClass:);
  methods[5].selector = @selector(realClassWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "alias_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCucumberDepsComThoughtworksXstreamMapperMapper;", "LCucumberDepsComThoughtworksXstreamMapperMapper;LNSString;", "setAlias", "LNSString;", "serializedClass", "LIOSClass;", "realClass", "LCucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_DynamicProxy;" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper = { "DynamicProxyMapper", "cucumber.deps.com.thoughtworks.xstream.mapper", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, 7, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper;
}

@end

void CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper *self, id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped) {
  CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_withNSString_(self, wrapped, @"dynamic-proxy");
}

CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper *new_CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper, initWithCucumberDepsComThoughtworksXstreamMapperMapper_, wrapped)
}

CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper *create_CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper, initWithCucumberDepsComThoughtworksXstreamMapperMapper_, wrapped)
}

void CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_withNSString_(CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper *self, id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped, NSString *alias) {
  CucumberDepsComThoughtworksXstreamMapperMapperWrapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(self, wrapped);
  JreStrongAssign(&self->alias_, alias);
}

CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper *new_CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_withNSString_(id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped, NSString *alias) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper, initWithCucumberDepsComThoughtworksXstreamMapperMapper_withNSString_, wrapped, alias)
}

CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper *create_CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_withNSString_(id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped, NSString *alias) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper, initWithCucumberDepsComThoughtworksXstreamMapperMapper_withNSString_, wrapped, alias)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper)

@implementation CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_DynamicProxy

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_DynamicProxy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LCucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper;" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_DynamicProxy = { "DynamicProxy", "cucumber.deps.com.thoughtworks.xstream.mapper", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_DynamicProxy;
}

@end

void CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_DynamicProxy_init(CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_DynamicProxy *self) {
  NSObject_init(self);
}

CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_DynamicProxy *new_CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_DynamicProxy_init() {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_DynamicProxy, init)
}

CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_DynamicProxy *create_CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_DynamicProxy_init() {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_DynamicProxy, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamMapperDynamicProxyMapper_DynamicProxy)
