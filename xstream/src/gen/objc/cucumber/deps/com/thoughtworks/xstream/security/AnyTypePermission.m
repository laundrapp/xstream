//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/security/AnyTypePermission.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/security/AnyTypePermission.h"
#include "cucumber/deps/com/thoughtworks/xstream/security/TypePermission.h"

J2OBJC_INITIALIZED_DEFN(CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission)

id<CucumberDepsComThoughtworksXstreamSecurityTypePermission> CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission_ANY;

@implementation CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)allowsWithIOSClass:(IOSClass *)type {
  return true;
}

- (NSUInteger)hash {
  return 3;
}

- (jboolean)isEqual:(id)obj {
  return obj != nil && [obj java_getClass] == CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission_class_();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(allowsWithIOSClass:);
  methods[2].selector = @selector(hash);
  methods[3].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ANY", "LCucumberDepsComThoughtworksXstreamSecurityTypePermission;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "allows", "LIOSClass;", "hashCode", "equals", "LNSObject;", &CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission_ANY };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission = { "AnyTypePermission", "cucumber.deps.com.thoughtworks.xstream.security", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission;
}

+ (void)initialize {
  if (self == [CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission class]) {
    JreStrongAssignAndConsume(&CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission_ANY, new_CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission_init());
    J2OBJC_SET_INITIALIZED(CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission)
  }
}

@end

void CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission_init(CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission *self) {
  NSObject_init(self);
}

CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission *new_CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission_init() {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission, init)
}

CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission *create_CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission_init() {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamSecurityAnyTypePermission)
