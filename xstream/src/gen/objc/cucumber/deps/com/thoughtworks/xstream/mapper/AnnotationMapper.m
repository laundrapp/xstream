//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/mapper/AnnotationMapper.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/InitializationException.h"
#include "cucumber/deps/com/thoughtworks/xstream/annotations/XStreamAlias.h"
#include "cucumber/deps/com/thoughtworks/xstream/annotations/XStreamAliasType.h"
#include "cucumber/deps/com/thoughtworks/xstream/annotations/XStreamAsAttribute.h"
#include "cucumber/deps/com/thoughtworks/xstream/annotations/XStreamConverter.h"
#include "cucumber/deps/com/thoughtworks/xstream/annotations/XStreamConverters.h"
#include "cucumber/deps/com/thoughtworks/xstream/annotations/XStreamImplicit.h"
#include "cucumber/deps/com/thoughtworks/xstream/annotations/XStreamImplicitCollection.h"
#include "cucumber/deps/com/thoughtworks/xstream/annotations/XStreamInclude.h"
#include "cucumber/deps/com/thoughtworks/xstream/annotations/XStreamOmitField.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/Converter.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/ConverterLookup.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/ConverterRegistry.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/SingleValueConverter.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/SingleValueConverterWrapper.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/reflection/ReflectionProvider.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/ClassLoaderReference.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/JVM.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/util/DependencyInjectionFactory.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/util/TypedNull.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/AnnotationMapper.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/AttributeMapper.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/ClassAliasingMapper.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/DefaultImplementationsMapper.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/FieldAliasingMapper.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/ImplicitCollectionMapper.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/LocalConversionMapper.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/Mapper.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/MapperWrapper.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/NoSuchFieldException.h"
#include "java/lang/System.h"
#include "java/lang/Void.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Array.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/GenericArrayType.h"
#include "java/lang/reflect/Modifier.h"
#include "java/lang/reflect/ParameterizedType.h"
#include "java/lang/reflect/Type.h"
#include "java/lang/reflect/TypeVariable.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface CucumberDepsComThoughtworksXstreamMapperAnnotationMapper () {
 @public
  jboolean locked_;
  IOSObjectArray *arguments_;
  id<CucumberDepsComThoughtworksXstreamConvertersConverterRegistry> converterRegistry_;
  CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper *classAliasingMapper_;
  CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper *defaultImplementationsMapper_;
  CucumberDepsComThoughtworksXstreamMapperImplicitCollectionMapper *implicitCollectionMapper_;
  CucumberDepsComThoughtworksXstreamMapperFieldAliasingMapper *fieldAliasingMapper_;
  CucumberDepsComThoughtworksXstreamMapperAttributeMapper *attributeMapper_;
  CucumberDepsComThoughtworksXstreamMapperLocalConversionMapper *localConversionMapper_;
  id<JavaUtilMap> converterCache_;
  id<JavaUtilSet> annotatedTypes_;
}

- (void)processAnnotationsWithIOSClass:(IOSClass *)initialType;

- (void)processTypesWithJavaUtilSet:(id<JavaUtilSet>)types;

- (void)addParametrizedTypesWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                    withJavaUtilSet:(id<JavaUtilSet>)types;

- (void)processConverterAnnotationsWithIOSClass:(IOSClass *)type;

- (void)processAliasAnnotationWithIOSClass:(IOSClass *)type
                           withJavaUtilSet:(id<JavaUtilSet>)types;

- (void)processAliasTypeAnnotationWithIOSClass:(IOSClass *)type;

- (void)processImplicitCollectionAnnotationWithIOSClass:(IOSClass *)type;

- (void)processFieldAliasAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field;

- (void)processAsAttributeAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field;

- (void)processImplicitAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field;

- (void)processOmitFieldAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field;

- (void)processLocalConverterAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field;

- (id<CucumberDepsComThoughtworksXstreamConvertersConverter>)cacheConverterWithCucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter:(id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter>)annotation
                                                                                                                                withIOSClass:(IOSClass *)targetType;

- (IOSClass *)getClassWithJavaLangReflectType:(id<JavaLangReflectType>)typeArgument;

- (void)setupMappers;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

@end

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper, arguments_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper, converterRegistry_, id<CucumberDepsComThoughtworksXstreamConvertersConverterRegistry>)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper, classAliasingMapper_, CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper *)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper, defaultImplementationsMapper_, CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper *)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper, implicitCollectionMapper_, CucumberDepsComThoughtworksXstreamMapperImplicitCollectionMapper *)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper, fieldAliasingMapper_, CucumberDepsComThoughtworksXstreamMapperFieldAliasingMapper *)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper, attributeMapper_, CucumberDepsComThoughtworksXstreamMapperAttributeMapper *)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper, localConversionMapper_, CucumberDepsComThoughtworksXstreamMapperLocalConversionMapper *)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper, converterCache_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper, annotatedTypes_, id<JavaUtilSet>)

__attribute__((unused)) static void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processAnnotationsWithIOSClass_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, IOSClass *initialType);

__attribute__((unused)) static void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processTypesWithJavaUtilSet_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, id<JavaUtilSet> types);

__attribute__((unused)) static void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_addParametrizedTypesWithJavaLangReflectType_withJavaUtilSet_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, id<JavaLangReflectType> type, id<JavaUtilSet> types);

__attribute__((unused)) static void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processConverterAnnotationsWithIOSClass_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, IOSClass *type);

__attribute__((unused)) static void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processAliasAnnotationWithIOSClass_withJavaUtilSet_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, IOSClass *type, id<JavaUtilSet> types);

__attribute__((unused)) static void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processAliasTypeAnnotationWithIOSClass_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, IOSClass *type);

__attribute__((unused)) static void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processImplicitCollectionAnnotationWithIOSClass_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, IOSClass *type);

__attribute__((unused)) static void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processFieldAliasAnnotationWithJavaLangReflectField_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, JavaLangReflectField *field);

__attribute__((unused)) static void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processAsAttributeAnnotationWithJavaLangReflectField_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, JavaLangReflectField *field);

__attribute__((unused)) static void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processImplicitAnnotationWithJavaLangReflectField_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, JavaLangReflectField *field);

__attribute__((unused)) static void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processOmitFieldAnnotationWithJavaLangReflectField_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, JavaLangReflectField *field);

__attribute__((unused)) static void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processLocalConverterAnnotationWithJavaLangReflectField_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, JavaLangReflectField *field);

__attribute__((unused)) static id<CucumberDepsComThoughtworksXstreamConvertersConverter> CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_cacheConverterWithCucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter_withIOSClass_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter> annotation, IOSClass *targetType);

__attribute__((unused)) static IOSClass *CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_getClassWithJavaLangReflectType_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, id<JavaLangReflectType> typeArgument);

__attribute__((unused)) static void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_setupMappers(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self);

__attribute__((unused)) static void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_writeObjectWithJavaIoObjectOutputStream_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, JavaIoObjectOutputStream *outArg);

__attribute__((unused)) static void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_readObjectWithJavaIoObjectInputStream_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static IOSObjectArray *CucumberDepsComThoughtworksXstreamMapperAnnotationMapper__Annotations$0(void);

@interface CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_1 : JavaUtilLinkedHashSet {
 @public
  id<JavaUtilSet> val$types_;
  id<JavaUtilSet> val$processedTypes_;
}

- (instancetype __nonnull)initWithJavaUtilSet:(id<JavaUtilSet>)capture$0
                              withJavaUtilSet:(id<JavaUtilSet>)capture$1;

- (jboolean)addWithId:(id<JavaLangReflectType>)o;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_1)

__attribute__((unused)) static void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_1_initWithJavaUtilSet_withJavaUtilSet_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_1 *self, id<JavaUtilSet> capture$0, id<JavaUtilSet> capture$1);

__attribute__((unused)) static CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_1 *new_CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_1_initWithJavaUtilSet_withJavaUtilSet_(id<JavaUtilSet> capture$0, id<JavaUtilSet> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_1 *create_CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_1_initWithJavaUtilSet_withJavaUtilSet_(id<JavaUtilSet> capture$0, id<JavaUtilSet> capture$1);

@interface CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet : JavaUtilLinkedHashSet {
 @public
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *this$0_;
}

- (instancetype __nonnull)initWithCucumberDepsComThoughtworksXstreamMapperAnnotationMapper:(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *)outer$;

- (jboolean)addWithId:(IOSClass *)type;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet)

__attribute__((unused)) static void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet_initWithCucumberDepsComThoughtworksXstreamMapperAnnotationMapper_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet *self, CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *outer$);

__attribute__((unused)) static CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet *new_CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet_initWithCucumberDepsComThoughtworksXstreamMapperAnnotationMapper_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet *create_CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet_initWithCucumberDepsComThoughtworksXstreamMapperAnnotationMapper_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *outer$);

J2OBJC_TYPE_LITERAL_HEADER(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet)

@implementation CucumberDepsComThoughtworksXstreamMapperAnnotationMapper

- (instancetype __nonnull)initWithCucumberDepsComThoughtworksXstreamMapperMapper:(id<CucumberDepsComThoughtworksXstreamMapperMapper>)wrapped
               withCucumberDepsComThoughtworksXstreamConvertersConverterRegistry:(id<CucumberDepsComThoughtworksXstreamConvertersConverterRegistry>)converterRegistry
                 withCucumberDepsComThoughtworksXstreamConvertersConverterLookup:(id<CucumberDepsComThoughtworksXstreamConvertersConverterLookup>)converterLookup
                  withCucumberDepsComThoughtworksXstreamCoreClassLoaderReference:(CucumberDepsComThoughtworksXstreamCoreClassLoaderReference *)classLoaderReference
    withCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider>)reflectionProvider {
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_withCucumberDepsComThoughtworksXstreamConvertersConverterRegistry_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withCucumberDepsComThoughtworksXstreamCoreClassLoaderReference_withCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider_(self, wrapped, converterRegistry, converterLookup, classLoaderReference, reflectionProvider);
  return self;
}

- (instancetype __nonnull)initWithCucumberDepsComThoughtworksXstreamMapperMapper:(id<CucumberDepsComThoughtworksXstreamMapperMapper>)wrapped
               withCucumberDepsComThoughtworksXstreamConvertersConverterRegistry:(id<CucumberDepsComThoughtworksXstreamConvertersConverterRegistry>)converterRegistry
                 withCucumberDepsComThoughtworksXstreamConvertersConverterLookup:(id<CucumberDepsComThoughtworksXstreamConvertersConverterLookup>)converterLookup
                                                         withJavaLangClassLoader:(JavaLangClassLoader *)classLoader
    withCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider>)reflectionProvider
                                   withCucumberDepsComThoughtworksXstreamCoreJVM:(CucumberDepsComThoughtworksXstreamCoreJVM *)jvm {
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_withCucumberDepsComThoughtworksXstreamConvertersConverterRegistry_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withJavaLangClassLoader_withCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider_withCucumberDepsComThoughtworksXstreamCoreJVM_(self, wrapped, converterRegistry, converterLookup, classLoader, reflectionProvider, jvm);
  return self;
}

- (NSString *)realMemberWithIOSClass:(IOSClass *)type
                        withNSString:(NSString *)serialized {
  if (!locked_) {
    CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processAnnotationsWithIOSClass_(self, type);
  }
  return [super realMemberWithIOSClass:type withNSString:serialized];
}

- (NSString *)serializedClassWithIOSClass:(IOSClass *)type {
  if (!locked_) {
    CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processAnnotationsWithIOSClass_(self, type);
  }
  return [super serializedClassWithIOSClass:type];
}

- (IOSClass *)defaultImplementationOfWithIOSClass:(IOSClass *)type {
  if (!locked_) {
    CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processAnnotationsWithIOSClass_(self, type);
  }
  IOSClass *defaultImplementation = [super defaultImplementationOfWithIOSClass:type];
  if (!locked_) {
    CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processAnnotationsWithIOSClass_(self, defaultImplementation);
  }
  return defaultImplementation;
}

- (id<CucumberDepsComThoughtworksXstreamConvertersConverter>)getLocalConverterWithIOSClass:(IOSClass *)definedIn
                                                                              withNSString:(NSString *)fieldName {
  if (!locked_) {
    CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processAnnotationsWithIOSClass_(self, definedIn);
  }
  return [super getLocalConverterWithIOSClass:definedIn withNSString:fieldName];
}

- (void)autodetectAnnotationsWithBoolean:(jboolean)mode {
  locked_ = !mode;
}

- (void)processAnnotationsWithIOSClassArray:(IOSObjectArray *)initialTypes {
  if (initialTypes == nil || initialTypes->size_ == 0) {
    return;
  }
  locked_ = true;
  id<JavaUtilSet> types = create_CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet_initWithCucumberDepsComThoughtworksXstreamMapperAnnotationMapper_(self);
  {
    IOSObjectArray *a__ = initialTypes;
    IOSClass * const *b__ = a__->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *initialType = *b__++;
      [types addWithId:initialType];
    }
  }
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processTypesWithJavaUtilSet_(self, types);
}

- (void)processAnnotationsWithIOSClass:(IOSClass *)initialType {
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processAnnotationsWithIOSClass_(self, initialType);
}

- (void)processTypesWithJavaUtilSet:(id<JavaUtilSet>)types {
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processTypesWithJavaUtilSet_(self, types);
}

- (void)addParametrizedTypesWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                    withJavaUtilSet:(id<JavaUtilSet>)types {
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_addParametrizedTypesWithJavaLangReflectType_withJavaUtilSet_(self, type, types);
}

- (void)processConverterAnnotationsWithIOSClass:(IOSClass *)type {
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processConverterAnnotationsWithIOSClass_(self, type);
}

- (void)processAliasAnnotationWithIOSClass:(IOSClass *)type
                           withJavaUtilSet:(id<JavaUtilSet>)types {
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processAliasAnnotationWithIOSClass_withJavaUtilSet_(self, type, types);
}

- (void)processAliasTypeAnnotationWithIOSClass:(IOSClass *)type {
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processAliasTypeAnnotationWithIOSClass_(self, type);
}

- (void)processImplicitCollectionAnnotationWithIOSClass:(IOSClass *)type {
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processImplicitCollectionAnnotationWithIOSClass_(self, type);
}

- (void)processFieldAliasAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field {
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processFieldAliasAnnotationWithJavaLangReflectField_(self, field);
}

- (void)processAsAttributeAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field {
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processAsAttributeAnnotationWithJavaLangReflectField_(self, field);
}

- (void)processImplicitAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field {
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processImplicitAnnotationWithJavaLangReflectField_(self, field);
}

- (void)processOmitFieldAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field {
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processOmitFieldAnnotationWithJavaLangReflectField_(self, field);
}

- (void)processLocalConverterAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field {
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processLocalConverterAnnotationWithJavaLangReflectField_(self, field);
}

- (id<CucumberDepsComThoughtworksXstreamConvertersConverter>)cacheConverterWithCucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter:(id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter>)annotation
                                                                                                                                withIOSClass:(IOSClass *)targetType {
  return CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_cacheConverterWithCucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter_withIOSClass_(self, annotation, targetType);
}

- (IOSClass *)getClassWithJavaLangReflectType:(id<JavaLangReflectType>)typeArgument {
  return CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_getClassWithJavaLangReflectType_(self, typeArgument);
}

- (void)setupMappers {
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_setupMappers(self);
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_readObjectWithJavaIoObjectInputStream_(self, inArg);
}

- (void)dealloc {
  RELEASE_(arguments_);
  RELEASE_(converterRegistry_);
  RELEASE_(classAliasingMapper_);
  RELEASE_(defaultImplementationsMapper_);
  RELEASE_(implicitCollectionMapper_);
  RELEASE_(fieldAliasingMapper_);
  RELEASE_(attributeMapper_);
  RELEASE_(localConversionMapper_);
  RELEASE_(converterCache_);
  RELEASE_(annotatedTypes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LCucumberDepsComThoughtworksXstreamConvertersConverter;", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x2, 15, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x2, 18, 5, -1, 19, -1, -1 },
    { NULL, "V", 0x2, 20, 21, -1, 22, -1, -1 },
    { NULL, "V", 0x2, 23, 5, -1, 19, -1, -1 },
    { NULL, "V", 0x2, 24, 5, -1, 19, 25, -1 },
    { NULL, "V", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 27, -1, -1, -1, -1 },
    { NULL, "LCucumberDepsComThoughtworksXstreamConvertersConverter;", 0x2, 32, 33, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x2, 34, 35, -1, 36, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 38, 39, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 41, 42, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberDepsComThoughtworksXstreamMapperMapper:withCucumberDepsComThoughtworksXstreamConvertersConverterRegistry:withCucumberDepsComThoughtworksXstreamConvertersConverterLookup:withCucumberDepsComThoughtworksXstreamCoreClassLoaderReference:withCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider:);
  methods[1].selector = @selector(initWithCucumberDepsComThoughtworksXstreamMapperMapper:withCucumberDepsComThoughtworksXstreamConvertersConverterRegistry:withCucumberDepsComThoughtworksXstreamConvertersConverterLookup:withJavaLangClassLoader:withCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider:withCucumberDepsComThoughtworksXstreamCoreJVM:);
  methods[2].selector = @selector(realMemberWithIOSClass:withNSString:);
  methods[3].selector = @selector(serializedClassWithIOSClass:);
  methods[4].selector = @selector(defaultImplementationOfWithIOSClass:);
  methods[5].selector = @selector(getLocalConverterWithIOSClass:withNSString:);
  methods[6].selector = @selector(autodetectAnnotationsWithBoolean:);
  methods[7].selector = @selector(processAnnotationsWithIOSClassArray:);
  methods[8].selector = @selector(processAnnotationsWithIOSClass:);
  methods[9].selector = @selector(processTypesWithJavaUtilSet:);
  methods[10].selector = @selector(addParametrizedTypesWithJavaLangReflectType:withJavaUtilSet:);
  methods[11].selector = @selector(processConverterAnnotationsWithIOSClass:);
  methods[12].selector = @selector(processAliasAnnotationWithIOSClass:withJavaUtilSet:);
  methods[13].selector = @selector(processAliasTypeAnnotationWithIOSClass:);
  methods[14].selector = @selector(processImplicitCollectionAnnotationWithIOSClass:);
  methods[15].selector = @selector(processFieldAliasAnnotationWithJavaLangReflectField:);
  methods[16].selector = @selector(processAsAttributeAnnotationWithJavaLangReflectField:);
  methods[17].selector = @selector(processImplicitAnnotationWithJavaLangReflectField:);
  methods[18].selector = @selector(processOmitFieldAnnotationWithJavaLangReflectField:);
  methods[19].selector = @selector(processLocalConverterAnnotationWithJavaLangReflectField:);
  methods[20].selector = @selector(cacheConverterWithCucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter:withIOSClass:);
  methods[21].selector = @selector(getClassWithJavaLangReflectType:);
  methods[22].selector = @selector(setupMappers);
  methods[23].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  methods[24].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "locked_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "arguments_", "[LNSObject;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "converterRegistry_", "LCucumberDepsComThoughtworksXstreamConvertersConverterRegistry;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "classAliasingMapper_", "LCucumberDepsComThoughtworksXstreamMapperClassAliasingMapper;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "defaultImplementationsMapper_", "LCucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "implicitCollectionMapper_", "LCucumberDepsComThoughtworksXstreamMapperImplicitCollectionMapper;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "fieldAliasingMapper_", "LCucumberDepsComThoughtworksXstreamMapperFieldAliasingMapper;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "attributeMapper_", "LCucumberDepsComThoughtworksXstreamMapperAttributeMapper;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "localConversionMapper_", "LCucumberDepsComThoughtworksXstreamMapperLocalConversionMapper;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "converterCache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 43, -1 },
    { "annotatedTypes_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 44, -1 },
  };
  static const void *ptrTable[] = { "LCucumberDepsComThoughtworksXstreamMapperMapper;LCucumberDepsComThoughtworksXstreamConvertersConverterRegistry;LCucumberDepsComThoughtworksXstreamConvertersConverterLookup;LCucumberDepsComThoughtworksXstreamCoreClassLoaderReference;LCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider;", "LCucumberDepsComThoughtworksXstreamMapperMapper;LCucumberDepsComThoughtworksXstreamConvertersConverterRegistry;LCucumberDepsComThoughtworksXstreamConvertersConverterLookup;LJavaLangClassLoader;LCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider;LCucumberDepsComThoughtworksXstreamCoreJVM;", "realMember", "LIOSClass;LNSString;", "serializedClass", "LIOSClass;", "defaultImplementationOf", "getLocalConverter", "autodetectAnnotations", "Z", "processAnnotations", "[LIOSClass;", "processTypes", "LJavaUtilSet;", "(Ljava/util/Set<Ljava/lang/Class<*>;>;)V", "addParametrizedTypes", "LJavaLangReflectType;LJavaUtilSet;", "(Ljava/lang/reflect/Type;Ljava/util/Set<Ljava/lang/Class<*>;>;)V", "processConverterAnnotations", "(Ljava/lang/Class<*>;)V", "processAliasAnnotation", "LIOSClass;LJavaUtilSet;", "(Ljava/lang/Class<*>;Ljava/util/Set<Ljava/lang/Class<*>;>;)V", "processAliasTypeAnnotation", "processImplicitCollectionAnnotation", (void *)&CucumberDepsComThoughtworksXstreamMapperAnnotationMapper__Annotations$0, "processFieldAliasAnnotation", "LJavaLangReflectField;", "processAsAttributeAnnotation", "processImplicitAnnotation", "processOmitFieldAnnotation", "processLocalConverterAnnotation", "cacheConverter", "LCucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter;LIOSClass;", "getClass", "LJavaLangReflectType;", "(Ljava/lang/reflect/Type;)Ljava/lang/Class<*>;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "Ljava/util/Map<Ljava/lang/Class<*>;Ljava/util/Map<Ljava/util/List<Ljava/lang/Object;>;Lcucumber/deps/com/thoughtworks/xstream/converters/Converter;>;>;", "Ljava/util/Set<Ljava/lang/Class<*>;>;", "LCucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet;" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamMapperAnnotationMapper = { "AnnotationMapper", "cucumber.deps.com.thoughtworks.xstream.mapper", ptrTable, methods, fields, 7, 0x1, 25, 11, -1, 45, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamMapperAnnotationMapper;
}

@end

void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_withCucumberDepsComThoughtworksXstreamConvertersConverterRegistry_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withCucumberDepsComThoughtworksXstreamCoreClassLoaderReference_withCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped, id<CucumberDepsComThoughtworksXstreamConvertersConverterRegistry> converterRegistry, id<CucumberDepsComThoughtworksXstreamConvertersConverterLookup> converterLookup, CucumberDepsComThoughtworksXstreamCoreClassLoaderReference *classLoaderReference, id<CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider) {
  CucumberDepsComThoughtworksXstreamMapperMapperWrapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_(self, wrapped);
  JreStrongAssignAndConsume(&self->converterCache_, new_JavaUtilHashMap_init());
  JreStrongAssign(&self->annotatedTypes_, JavaUtilCollections_synchronizedSetWithJavaUtilSet_(create_JavaUtilHashSet_init()));
  JreStrongAssign(&self->converterRegistry_, converterRegistry);
  [((id<JavaUtilSet>) nil_chk(self->annotatedTypes_)) addWithId:NSObject_class_()];
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_setupMappers(self);
  self->locked_ = true;
  JavaLangClassLoader *classLoader = [((CucumberDepsComThoughtworksXstreamCoreClassLoaderReference *) nil_chk(classLoaderReference)) getReference];
  JreStrongAssignAndConsume(&self->arguments_, [IOSObjectArray newArrayWithObjects:(id[]){ self, classLoaderReference, reflectionProvider, converterLookup, create_CucumberDepsComThoughtworksXstreamCoreJVM_init(), classLoader != nil ? classLoader : (id) create_CucumberDepsComThoughtworksXstreamCoreUtilTypedNull_initWithIOSClass_(JavaLangClassLoader_class_()) } count:6 type:NSObject_class_()]);
}

CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *new_CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_withCucumberDepsComThoughtworksXstreamConvertersConverterRegistry_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withCucumberDepsComThoughtworksXstreamCoreClassLoaderReference_withCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider_(id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped, id<CucumberDepsComThoughtworksXstreamConvertersConverterRegistry> converterRegistry, id<CucumberDepsComThoughtworksXstreamConvertersConverterLookup> converterLookup, CucumberDepsComThoughtworksXstreamCoreClassLoaderReference *classLoaderReference, id<CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper, initWithCucumberDepsComThoughtworksXstreamMapperMapper_withCucumberDepsComThoughtworksXstreamConvertersConverterRegistry_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withCucumberDepsComThoughtworksXstreamCoreClassLoaderReference_withCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider_, wrapped, converterRegistry, converterLookup, classLoaderReference, reflectionProvider)
}

CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *create_CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_withCucumberDepsComThoughtworksXstreamConvertersConverterRegistry_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withCucumberDepsComThoughtworksXstreamCoreClassLoaderReference_withCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider_(id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped, id<CucumberDepsComThoughtworksXstreamConvertersConverterRegistry> converterRegistry, id<CucumberDepsComThoughtworksXstreamConvertersConverterLookup> converterLookup, CucumberDepsComThoughtworksXstreamCoreClassLoaderReference *classLoaderReference, id<CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper, initWithCucumberDepsComThoughtworksXstreamMapperMapper_withCucumberDepsComThoughtworksXstreamConvertersConverterRegistry_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withCucumberDepsComThoughtworksXstreamCoreClassLoaderReference_withCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider_, wrapped, converterRegistry, converterLookup, classLoaderReference, reflectionProvider)
}

void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_withCucumberDepsComThoughtworksXstreamConvertersConverterRegistry_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withJavaLangClassLoader_withCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider_withCucumberDepsComThoughtworksXstreamCoreJVM_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped, id<CucumberDepsComThoughtworksXstreamConvertersConverterRegistry> converterRegistry, id<CucumberDepsComThoughtworksXstreamConvertersConverterLookup> converterLookup, JavaLangClassLoader *classLoader, id<CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, CucumberDepsComThoughtworksXstreamCoreJVM *jvm) {
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_withCucumberDepsComThoughtworksXstreamConvertersConverterRegistry_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withCucumberDepsComThoughtworksXstreamCoreClassLoaderReference_withCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider_(self, wrapped, converterRegistry, converterLookup, create_CucumberDepsComThoughtworksXstreamCoreClassLoaderReference_initWithJavaLangClassLoader_(classLoader), reflectionProvider);
}

CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *new_CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_withCucumberDepsComThoughtworksXstreamConvertersConverterRegistry_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withJavaLangClassLoader_withCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider_withCucumberDepsComThoughtworksXstreamCoreJVM_(id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped, id<CucumberDepsComThoughtworksXstreamConvertersConverterRegistry> converterRegistry, id<CucumberDepsComThoughtworksXstreamConvertersConverterLookup> converterLookup, JavaLangClassLoader *classLoader, id<CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, CucumberDepsComThoughtworksXstreamCoreJVM *jvm) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper, initWithCucumberDepsComThoughtworksXstreamMapperMapper_withCucumberDepsComThoughtworksXstreamConvertersConverterRegistry_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withJavaLangClassLoader_withCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider_withCucumberDepsComThoughtworksXstreamCoreJVM_, wrapped, converterRegistry, converterLookup, classLoader, reflectionProvider, jvm)
}

CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *create_CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_initWithCucumberDepsComThoughtworksXstreamMapperMapper_withCucumberDepsComThoughtworksXstreamConvertersConverterRegistry_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withJavaLangClassLoader_withCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider_withCucumberDepsComThoughtworksXstreamCoreJVM_(id<CucumberDepsComThoughtworksXstreamMapperMapper> wrapped, id<CucumberDepsComThoughtworksXstreamConvertersConverterRegistry> converterRegistry, id<CucumberDepsComThoughtworksXstreamConvertersConverterLookup> converterLookup, JavaLangClassLoader *classLoader, id<CucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, CucumberDepsComThoughtworksXstreamCoreJVM *jvm) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper, initWithCucumberDepsComThoughtworksXstreamMapperMapper_withCucumberDepsComThoughtworksXstreamConvertersConverterRegistry_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withJavaLangClassLoader_withCucumberDepsComThoughtworksXstreamConvertersReflectionReflectionProvider_withCucumberDepsComThoughtworksXstreamCoreJVM_, wrapped, converterRegistry, converterLookup, classLoader, reflectionProvider, jvm)
}

void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processAnnotationsWithIOSClass_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, IOSClass *initialType) {
  if (initialType == nil) {
    return;
  }
  id<JavaUtilSet> types = create_CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet_initWithCucumberDepsComThoughtworksXstreamMapperAnnotationMapper_(self);
  [types addWithId:initialType];
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processTypesWithJavaUtilSet_(self, types);
}

void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processTypesWithJavaUtilSet_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, id<JavaUtilSet> types) {
  while (![((id<JavaUtilSet>) nil_chk(types)) isEmpty]) {
    id<JavaUtilIterator> iter = [types iterator];
    IOSClass *type = [((id<JavaUtilIterator>) nil_chk(iter)) next];
    [iter remove];
    @synchronized(type) {
      if ([((id<JavaUtilSet>) nil_chk(self->annotatedTypes_)) containsWithId:type]) {
        continue;
      }
      @try {
        if ([((IOSClass *) nil_chk(type)) isPrimitive]) {
          continue;
        }
        CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_addParametrizedTypesWithJavaLangReflectType_withJavaUtilSet_(self, type, types);
        CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processConverterAnnotationsWithIOSClass_(self, type);
        CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processAliasAnnotationWithIOSClass_withJavaUtilSet_(self, type, types);
        CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processAliasTypeAnnotationWithIOSClass_(self, type);
        if ([type isInterface]) {
          continue;
        }
        CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processImplicitCollectionAnnotationWithIOSClass_(self, type);
        IOSObjectArray *fields = [type getDeclaredFields];
        for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; i++) {
          JavaLangReflectField *field = IOSObjectArray_Get(fields, i);
          if ([((JavaLangReflectField *) nil_chk(field)) isEnumConstant] || ([field getModifiers] & (JavaLangReflectModifier_STATIC | JavaLangReflectModifier_TRANSIENT)) > 0) {
            continue;
          }
          CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_addParametrizedTypesWithJavaLangReflectType_withJavaUtilSet_(self, [field getGenericType], types);
          if ([field isSynthetic]) {
            continue;
          }
          CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processFieldAliasAnnotationWithJavaLangReflectField_(self, field);
          CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processAsAttributeAnnotationWithJavaLangReflectField_(self, field);
          CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processImplicitAnnotationWithJavaLangReflectField_(self, field);
          CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processOmitFieldAnnotationWithJavaLangReflectField_(self, field);
          CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processLocalConverterAnnotationWithJavaLangReflectField_(self, field);
        }
      }
      @finally {
        [self->annotatedTypes_ addWithId:type];
      }
    }
  }
}

void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_addParametrizedTypesWithJavaLangReflectType_withJavaUtilSet_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, id<JavaLangReflectType> type, id<JavaUtilSet> types) {
  id<JavaUtilSet> processedTypes = create_JavaUtilHashSet_init();
  id<JavaUtilSet> localTypes = create_CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_1_initWithJavaUtilSet_withJavaUtilSet_(types, processedTypes);
  while (type != nil) {
    [processedTypes addWithId:type];
    if ([type isKindOfClass:[IOSClass class]]) {
      IOSClass *clazz = (IOSClass *) cast_chk(type, [IOSClass class]);
      [((id<JavaUtilSet>) nil_chk(types)) addWithId:clazz];
      if (![clazz isPrimitive]) {
        IOSObjectArray *typeParameters = [clazz getTypeParameters];
        {
          IOSObjectArray *a__ = typeParameters;
          id<JavaLangReflectTypeVariable> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          id<JavaLangReflectTypeVariable> const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            id<JavaLangReflectTypeVariable> typeVariable = *b__++;
            [localTypes addWithId:typeVariable];
          }
        }
        [localTypes addWithId:[clazz getGenericSuperclass]];
        {
          IOSObjectArray *a__ = [clazz getGenericInterfaces];
          id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          id<JavaLangReflectType> const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            id<JavaLangReflectType> iface = *b__++;
            [localTypes addWithId:iface];
          }
        }
      }
    }
    else if ([JavaLangReflectTypeVariable_class_() isInstance:type]) {
      id<JavaLangReflectTypeVariable> typeVariable = (id<JavaLangReflectTypeVariable>) cast_check(type, JavaLangReflectTypeVariable_class_());
      IOSObjectArray *bounds = [typeVariable getBounds];
      {
        IOSObjectArray *a__ = bounds;
        id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        id<JavaLangReflectType> const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          id<JavaLangReflectType> bound = *b__++;
          [localTypes addWithId:bound];
        }
      }
    }
    else if ([JavaLangReflectParameterizedType_class_() isInstance:type]) {
      id<JavaLangReflectParameterizedType> parametrizedType = (id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_());
      [localTypes addWithId:[parametrizedType getRawType]];
      IOSObjectArray *actualArguments = [parametrizedType getActualTypeArguments];
      {
        IOSObjectArray *a__ = actualArguments;
        id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        id<JavaLangReflectType> const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          id<JavaLangReflectType> actualArgument = *b__++;
          [localTypes addWithId:actualArgument];
        }
      }
    }
    else if ([JavaLangReflectGenericArrayType_class_() isInstance:type]) {
      id<JavaLangReflectGenericArrayType> arrayType = (id<JavaLangReflectGenericArrayType>) cast_check(type, JavaLangReflectGenericArrayType_class_());
      [localTypes addWithId:[arrayType getGenericComponentType]];
    }
    if (![localTypes isEmpty]) {
      id<JavaUtilIterator> iter = [localTypes iterator];
      type = [((id<JavaUtilIterator>) nil_chk(iter)) next];
      [iter remove];
    }
    else {
      type = nil;
    }
  }
}

void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processConverterAnnotationsWithIOSClass_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, IOSClass *type) {
  if (self->converterRegistry_ != nil) {
    id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverters> convertersAnnotation = ((id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverters>) [((IOSClass *) nil_chk(type)) getAnnotationWithIOSClass:CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverters_class_()]);
    id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter> converterAnnotation = ((id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter>) [type getAnnotationWithIOSClass:CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter_class_()]);
    id<JavaUtilList> annotations = convertersAnnotation != nil ? create_JavaUtilArrayList_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_([convertersAnnotation value])) : create_JavaUtilArrayList_init();
    if (converterAnnotation != nil) {
      [annotations addWithId:converterAnnotation];
    }
    for (id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter> __strong annotation in annotations) {
      id<CucumberDepsComThoughtworksXstreamConvertersConverter> converter = CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_cacheConverterWithCucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter_withIOSClass_(self, annotation, converterAnnotation != nil ? type : nil);
      if (converter != nil) {
        if (converterAnnotation != nil || [converter canConvertWithIOSClass:type]) {
          [self->converterRegistry_ registerConverterWithCucumberDepsComThoughtworksXstreamConvertersConverter:converter withInt:[((id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter>) nil_chk(annotation)) priority]];
        }
        else {
          @throw create_CucumberDepsComThoughtworksXstreamInitializationException_initWithNSString_(JreStrcat("$$$$", @"Converter ", [((IOSClass *) nil_chk([((id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter>) nil_chk(annotation)) value])) getName], @" cannot handle annotated class ", [type getName]));
        }
      }
    }
  }
}

void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processAliasAnnotationWithIOSClass_withJavaUtilSet_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, IOSClass *type, id<JavaUtilSet> types) {
  id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamAlias> aliasAnnotation = ((id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamAlias>) [((IOSClass *) nil_chk(type)) getAnnotationWithIOSClass:CucumberDepsComThoughtworksXstreamAnnotationsXStreamAlias_class_()]);
  if (aliasAnnotation != nil) {
    if (self->classAliasingMapper_ == nil) {
      @throw create_CucumberDepsComThoughtworksXstreamInitializationException_initWithNSString_(JreStrcat("$$$", @"No ", [CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper_class_() getName], @" available"));
    }
    [self->classAliasingMapper_ addClassAliasWithNSString:[aliasAnnotation value] withIOSClass:type];
    if ([aliasAnnotation impl] != JavaLangVoid_class_()) {
      [((CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper *) nil_chk(self->defaultImplementationsMapper_)) addDefaultImplementationWithIOSClass:[aliasAnnotation impl] withIOSClass:type];
      if ([type isInterface]) {
        [((id<JavaUtilSet>) nil_chk(types)) addWithId:[aliasAnnotation impl]];
      }
    }
  }
}

void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processAliasTypeAnnotationWithIOSClass_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, IOSClass *type) {
  id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamAliasType> aliasAnnotation = ((id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamAliasType>) [((IOSClass *) nil_chk(type)) getAnnotationWithIOSClass:CucumberDepsComThoughtworksXstreamAnnotationsXStreamAliasType_class_()]);
  if (aliasAnnotation != nil) {
    if (self->classAliasingMapper_ == nil) {
      @throw create_CucumberDepsComThoughtworksXstreamInitializationException_initWithNSString_(JreStrcat("$$$", @"No ", [CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper_class_() getName], @" available"));
    }
    [self->classAliasingMapper_ addTypeAliasWithNSString:[aliasAnnotation value] withIOSClass:type];
  }
}

void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processImplicitCollectionAnnotationWithIOSClass_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, IOSClass *type) {
  id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamImplicitCollection> implicitColAnnotation = ((id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamImplicitCollection>) [((IOSClass *) nil_chk(type)) getAnnotationWithIOSClass:CucumberDepsComThoughtworksXstreamAnnotationsXStreamImplicitCollection_class_()]);
  if (implicitColAnnotation != nil) {
    if (self->implicitCollectionMapper_ == nil) {
      @throw create_CucumberDepsComThoughtworksXstreamInitializationException_initWithNSString_(JreStrcat("$$$", @"No ", [CucumberDepsComThoughtworksXstreamMapperImplicitCollectionMapper_class_() getName], @" available"));
    }
    NSString *fieldName = [implicitColAnnotation value];
    NSString *itemFieldName = [implicitColAnnotation item];
    JavaLangReflectField *field;
    @try {
      field = [type getDeclaredField:fieldName];
    }
    @catch (JavaLangNoSuchFieldException *e) {
      @throw create_CucumberDepsComThoughtworksXstreamInitializationException_initWithNSString_(JreStrcat("$$$$$", [type getName], @" does not have a field named '", fieldName, @"' as required by ", [CucumberDepsComThoughtworksXstreamAnnotationsXStreamImplicitCollection_class_() getName]));
    }
    IOSClass *itemType = nil;
    id<JavaLangReflectType> genericType = [((JavaLangReflectField *) nil_chk(field)) getGenericType];
    if ([JavaLangReflectParameterizedType_class_() isInstance:genericType]) {
      id<JavaLangReflectType> typeArgument = IOSObjectArray_Get(nil_chk([((id<JavaLangReflectParameterizedType>) nil_chk(((id<JavaLangReflectParameterizedType>) cast_check(genericType, JavaLangReflectParameterizedType_class_())))) getActualTypeArguments]), 0);
      itemType = CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_getClassWithJavaLangReflectType_(self, typeArgument);
    }
    if (itemType == nil) {
      [((CucumberDepsComThoughtworksXstreamMapperImplicitCollectionMapper *) nil_chk(self->implicitCollectionMapper_)) addWithIOSClass:type withNSString:fieldName withNSString:nil withIOSClass:NSObject_class_()];
    }
    else {
      if ([((NSString *) nil_chk(itemFieldName)) isEqual:@""]) {
        [((CucumberDepsComThoughtworksXstreamMapperImplicitCollectionMapper *) nil_chk(self->implicitCollectionMapper_)) addWithIOSClass:type withNSString:fieldName withNSString:nil withIOSClass:itemType];
      }
      else {
        [((CucumberDepsComThoughtworksXstreamMapperImplicitCollectionMapper *) nil_chk(self->implicitCollectionMapper_)) addWithIOSClass:type withNSString:fieldName withNSString:itemFieldName withIOSClass:itemType];
      }
    }
  }
}

void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processFieldAliasAnnotationWithJavaLangReflectField_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, JavaLangReflectField *field) {
  id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamAlias> aliasAnnotation = ((id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamAlias>) [((JavaLangReflectField *) nil_chk(field)) getAnnotationWithIOSClass:CucumberDepsComThoughtworksXstreamAnnotationsXStreamAlias_class_()]);
  if (aliasAnnotation != nil) {
    if (self->fieldAliasingMapper_ == nil) {
      @throw create_CucumberDepsComThoughtworksXstreamInitializationException_initWithNSString_(JreStrcat("$$$", @"No ", [CucumberDepsComThoughtworksXstreamMapperFieldAliasingMapper_class_() getName], @" available"));
    }
    [self->fieldAliasingMapper_ addFieldAliasWithNSString:[aliasAnnotation value] withIOSClass:[field getDeclaringClass] withNSString:[field getName]];
  }
}

void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processAsAttributeAnnotationWithJavaLangReflectField_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, JavaLangReflectField *field) {
  id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamAsAttribute> asAttributeAnnotation = ((id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamAsAttribute>) [((JavaLangReflectField *) nil_chk(field)) getAnnotationWithIOSClass:CucumberDepsComThoughtworksXstreamAnnotationsXStreamAsAttribute_class_()]);
  if (asAttributeAnnotation != nil) {
    if (self->attributeMapper_ == nil) {
      @throw create_CucumberDepsComThoughtworksXstreamInitializationException_initWithNSString_(JreStrcat("$$$", @"No ", [CucumberDepsComThoughtworksXstreamMapperAttributeMapper_class_() getName], @" available"));
    }
    [self->attributeMapper_ addAttributeForWithJavaLangReflectField:field];
  }
}

void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processImplicitAnnotationWithJavaLangReflectField_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, JavaLangReflectField *field) {
  id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamImplicit> implicitAnnotation = ((id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamImplicit>) [((JavaLangReflectField *) nil_chk(field)) getAnnotationWithIOSClass:CucumberDepsComThoughtworksXstreamAnnotationsXStreamImplicit_class_()]);
  if (implicitAnnotation != nil) {
    if (self->implicitCollectionMapper_ == nil) {
      @throw create_CucumberDepsComThoughtworksXstreamInitializationException_initWithNSString_(JreStrcat("$$$", @"No ", [CucumberDepsComThoughtworksXstreamMapperImplicitCollectionMapper_class_() getName], @" available"));
    }
    NSString *fieldName = [field getName];
    NSString *itemFieldName = [implicitAnnotation itemFieldName];
    NSString *keyFieldName = [implicitAnnotation keyFieldName];
    jboolean isMap = [JavaUtilMap_class_() isAssignableFrom:[field getType]];
    IOSClass *itemType = nil;
    if (![((IOSClass *) nil_chk([field getType])) isArray]) {
      id<JavaLangReflectType> genericType = [field getGenericType];
      if ([JavaLangReflectParameterizedType_class_() isInstance:genericType]) {
        IOSObjectArray *actualTypeArguments = [((id<JavaLangReflectParameterizedType>) nil_chk(((id<JavaLangReflectParameterizedType>) cast_check(genericType, JavaLangReflectParameterizedType_class_())))) getActualTypeArguments];
        id<JavaLangReflectType> typeArgument = IOSObjectArray_Get(nil_chk(actualTypeArguments), isMap ? 1 : 0);
        itemType = CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_getClassWithJavaLangReflectType_(self, typeArgument);
      }
    }
    if (isMap) {
      [((CucumberDepsComThoughtworksXstreamMapperImplicitCollectionMapper *) nil_chk(self->implicitCollectionMapper_)) addWithIOSClass:[field getDeclaringClass] withNSString:fieldName withNSString:itemFieldName != nil && ![@"" isEqual:itemFieldName] ? itemFieldName : nil withIOSClass:itemType withNSString:keyFieldName != nil && ![@"" isEqual:keyFieldName] ? keyFieldName : nil];
    }
    else {
      if (itemFieldName != nil && ![@"" isEqual:itemFieldName]) {
        [((CucumberDepsComThoughtworksXstreamMapperImplicitCollectionMapper *) nil_chk(self->implicitCollectionMapper_)) addWithIOSClass:[field getDeclaringClass] withNSString:fieldName withNSString:itemFieldName withIOSClass:itemType];
      }
      else {
        [((CucumberDepsComThoughtworksXstreamMapperImplicitCollectionMapper *) nil_chk(self->implicitCollectionMapper_)) addWithIOSClass:[field getDeclaringClass] withNSString:fieldName withIOSClass:itemType];
      }
    }
  }
}

void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processOmitFieldAnnotationWithJavaLangReflectField_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, JavaLangReflectField *field) {
  id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamOmitField> omitFieldAnnotation = ((id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamOmitField>) [((JavaLangReflectField *) nil_chk(field)) getAnnotationWithIOSClass:CucumberDepsComThoughtworksXstreamAnnotationsXStreamOmitField_class_()]);
  if (omitFieldAnnotation != nil) {
    if (self->fieldAliasingMapper_ == nil) {
      @throw create_CucumberDepsComThoughtworksXstreamInitializationException_initWithNSString_(JreStrcat("$$$", @"No ", [CucumberDepsComThoughtworksXstreamMapperFieldAliasingMapper_class_() getName], @" available"));
    }
    [self->fieldAliasingMapper_ omitFieldWithIOSClass:[field getDeclaringClass] withNSString:[field getName]];
  }
}

void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_processLocalConverterAnnotationWithJavaLangReflectField_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, JavaLangReflectField *field) {
  id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter> annotation = ((id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter>) [((JavaLangReflectField *) nil_chk(field)) getAnnotationWithIOSClass:CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter_class_()]);
  if (annotation != nil) {
    id<CucumberDepsComThoughtworksXstreamConvertersConverter> converter = CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_cacheConverterWithCucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter_withIOSClass_(self, annotation, [field getType]);
    if (converter != nil) {
      if (self->localConversionMapper_ == nil) {
        @throw create_CucumberDepsComThoughtworksXstreamInitializationException_initWithNSString_(JreStrcat("$$$", @"No ", [CucumberDepsComThoughtworksXstreamMapperLocalConversionMapper_class_() getName], @" available"));
      }
      [self->localConversionMapper_ registerLocalConverterWithIOSClass:[field getDeclaringClass] withNSString:[field getName] withCucumberDepsComThoughtworksXstreamConvertersConverter:converter];
    }
  }
}

id<CucumberDepsComThoughtworksXstreamConvertersConverter> CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_cacheConverterWithCucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter_withIOSClass_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter> annotation, IOSClass *targetType) {
  id<CucumberDepsComThoughtworksXstreamConvertersConverter> result = nil;
  IOSObjectArray *args;
  id<JavaUtilList> parameter = create_JavaUtilArrayList_init();
  if (targetType != nil && [((id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter>) nil_chk(annotation)) useImplicitType]) {
    [parameter addWithId:targetType];
  }
  id<JavaUtilList> arrays = create_JavaUtilArrayList_init();
  [arrays addWithId:[((id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter>) nil_chk(annotation)) booleans]];
  [arrays addWithId:[annotation bytes]];
  [arrays addWithId:[annotation chars]];
  [arrays addWithId:[annotation doubles]];
  [arrays addWithId:[annotation floats]];
  [arrays addWithId:[annotation ints]];
  [arrays addWithId:[annotation longs]];
  [arrays addWithId:[annotation shorts]];
  [arrays addWithId:[annotation strings]];
  [arrays addWithId:[annotation types]];
  for (id __strong array in arrays) {
    if (array != nil) {
      jint length = JavaLangReflectArray_getLengthWithId_(array);
      for (jint i = 0; i < length; i++) {
        id object = JavaLangReflectArray_getWithId_withInt_(array, i);
        if (![parameter containsWithId:object]) {
          [parameter addWithId:object];
        }
      }
    }
  }
  IOSClass *converterType = [annotation value];
  id<JavaUtilMap> converterMapping = [((id<JavaUtilMap>) nil_chk(self->converterCache_)) getWithId:converterType];
  if (converterMapping != nil) {
    result = [converterMapping getWithId:parameter];
  }
  if (result == nil) {
    jint size = [parameter size];
    if (size > 0) {
      args = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(self->arguments_))->size_ + size type:NSObject_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->arguments_, 0, args, size, self->arguments_->size_);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([parameter toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:size type:NSObject_class_()]], 0, args, 0, size);
    }
    else {
      args = self->arguments_;
    }
    id<CucumberDepsComThoughtworksXstreamConvertersConverter> converter;
    @try {
      if ([CucumberDepsComThoughtworksXstreamConvertersSingleValueConverter_class_() isAssignableFrom:converterType] && ![CucumberDepsComThoughtworksXstreamConvertersConverter_class_() isAssignableFrom:converterType]) {
        id<CucumberDepsComThoughtworksXstreamConvertersSingleValueConverter> svc = (id<CucumberDepsComThoughtworksXstreamConvertersSingleValueConverter>) cast_check(CucumberDepsComThoughtworksXstreamCoreUtilDependencyInjectionFactory_newInstanceWithIOSClass_withNSObjectArray_(converterType, args), CucumberDepsComThoughtworksXstreamConvertersSingleValueConverter_class_());
        converter = create_CucumberDepsComThoughtworksXstreamConvertersSingleValueConverterWrapper_initWithCucumberDepsComThoughtworksXstreamConvertersSingleValueConverter_(svc);
      }
      else {
        converter = (id<CucumberDepsComThoughtworksXstreamConvertersConverter>) cast_check(CucumberDepsComThoughtworksXstreamCoreUtilDependencyInjectionFactory_newInstanceWithIOSClass_withNSObjectArray_(converterType, args), CucumberDepsComThoughtworksXstreamConvertersConverter_class_());
      }
    }
    @catch (JavaLangException *e) {
      @throw create_CucumberDepsComThoughtworksXstreamInitializationException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$", @"Cannot instantiate converter ", [((IOSClass *) nil_chk(converterType)) getName], (targetType != nil ? JreStrcat("$$", @" for type ", [targetType getName]) : @"")), e);
    }
    if (converterMapping == nil) {
      converterMapping = create_JavaUtilHashMap_init();
      [self->converterCache_ putWithId:converterType withId:converterMapping];
    }
    [converterMapping putWithId:parameter withId:converter];
    result = converter;
  }
  return result;
}

IOSClass *CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_getClassWithJavaLangReflectType_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, id<JavaLangReflectType> typeArgument) {
  IOSClass *type = nil;
  if ([JavaLangReflectParameterizedType_class_() isInstance:typeArgument]) {
    type = (IOSClass *) cast_chk([((id<JavaLangReflectParameterizedType>) nil_chk(((id<JavaLangReflectParameterizedType>) cast_check(typeArgument, JavaLangReflectParameterizedType_class_())))) getRawType], [IOSClass class]);
  }
  else if ([typeArgument isKindOfClass:[IOSClass class]]) {
    type = (IOSClass *) cast_chk(typeArgument, [IOSClass class]);
  }
  return type;
}

void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_setupMappers(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self) {
  JreStrongAssign(&self->classAliasingMapper_, (CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper *) cast_chk([self lookupMapperOfTypeWithIOSClass:CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper_class_()], [CucumberDepsComThoughtworksXstreamMapperClassAliasingMapper class]));
  JreStrongAssign(&self->defaultImplementationsMapper_, (CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper *) cast_chk([self lookupMapperOfTypeWithIOSClass:CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper_class_()], [CucumberDepsComThoughtworksXstreamMapperDefaultImplementationsMapper class]));
  JreStrongAssign(&self->implicitCollectionMapper_, (CucumberDepsComThoughtworksXstreamMapperImplicitCollectionMapper *) cast_chk([self lookupMapperOfTypeWithIOSClass:CucumberDepsComThoughtworksXstreamMapperImplicitCollectionMapper_class_()], [CucumberDepsComThoughtworksXstreamMapperImplicitCollectionMapper class]));
  JreStrongAssign(&self->fieldAliasingMapper_, (CucumberDepsComThoughtworksXstreamMapperFieldAliasingMapper *) cast_chk([self lookupMapperOfTypeWithIOSClass:CucumberDepsComThoughtworksXstreamMapperFieldAliasingMapper_class_()], [CucumberDepsComThoughtworksXstreamMapperFieldAliasingMapper class]));
  JreStrongAssign(&self->attributeMapper_, (CucumberDepsComThoughtworksXstreamMapperAttributeMapper *) cast_chk([self lookupMapperOfTypeWithIOSClass:CucumberDepsComThoughtworksXstreamMapperAttributeMapper_class_()], [CucumberDepsComThoughtworksXstreamMapperAttributeMapper class]));
  JreStrongAssign(&self->localConversionMapper_, (CucumberDepsComThoughtworksXstreamMapperLocalConversionMapper *) cast_chk([self lookupMapperOfTypeWithIOSClass:CucumberDepsComThoughtworksXstreamMapperLocalConversionMapper_class_()], [CucumberDepsComThoughtworksXstreamMapperLocalConversionMapper class]));
}

void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_writeObjectWithJavaIoObjectOutputStream_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, JavaIoObjectOutputStream *outArg) {
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) defaultWriteObject];
  jint max = ((IOSObjectArray *) nil_chk(self->arguments_))->size_ - 2;
  [outArg writeIntWithInt:max];
  for (jint i = 0; i < max; i++) {
    [outArg writeObjectWithId:IOSObjectArray_Get(nil_chk(self->arguments_), i)];
  }
}

void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_readObjectWithJavaIoObjectInputStream_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *self, JavaIoObjectInputStream *inArg) {
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_setupMappers(self);
  jint max = [inArg readInt];
  JreStrongAssignAndConsume(&self->arguments_, [IOSObjectArray newArrayWithLength:max + 2 type:NSObject_class_()]);
  for (jint i = 0; i < max; i++) {
    IOSObjectArray_Set(nil_chk(self->arguments_), i, [inArg readObject]);
    if ([IOSObjectArray_Get(nil_chk(self->arguments_), i) isKindOfClass:[CucumberDepsComThoughtworksXstreamCoreClassLoaderReference class]]) {
      IOSObjectArray_Set(self->arguments_, max + 1, [((CucumberDepsComThoughtworksXstreamCoreClassLoaderReference *) nil_chk(((CucumberDepsComThoughtworksXstreamCoreClassLoaderReference *) cast_chk(IOSObjectArray_Get(self->arguments_, i), [CucumberDepsComThoughtworksXstreamCoreClassLoaderReference class])))) getReference]);
    }
  }
  IOSObjectArray_SetAndConsume(nil_chk(self->arguments_), max, new_CucumberDepsComThoughtworksXstreamCoreJVM_init());
}

IOSObjectArray *CucumberDepsComThoughtworksXstreamMapperAnnotationMapper__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper)

@implementation CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_1

- (instancetype __nonnull)initWithJavaUtilSet:(id<JavaUtilSet>)capture$0
                              withJavaUtilSet:(id<JavaUtilSet>)capture$1 {
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_1_initWithJavaUtilSet_withJavaUtilSet_(self, capture$0, capture$1);
  return self;
}

- (jboolean)addWithId:(id<JavaLangReflectType>)o {
  if ([o isKindOfClass:[IOSClass class]]) {
    return [((id<JavaUtilSet>) nil_chk(val$types_)) addWithId:(IOSClass *) cast_chk(o, [IOSClass class])];
  }
  return o == nil || [((id<JavaUtilSet>) nil_chk(val$processedTypes_)) containsWithId:o] ? false : [super addWithId:o];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(val$types_);
  RELEASE_(val$processedTypes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilSet:withJavaUtilSet:);
  methods[1].selector = @selector(addWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$types_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$processedTypes_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "add", "LJavaLangReflectType;", "Ljava/util/Set<Ljava/lang/Class<*>;>;", "Ljava/util/Set<Ljava/lang/reflect/Type;>;", "LCucumberDepsComThoughtworksXstreamMapperAnnotationMapper;", "addParametrizedTypesWithJavaLangReflectType:withJavaUtilSet:", "Ljava/util/LinkedHashSet<Ljava/lang/reflect/Type;>;" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_1 = { "", "cucumber.deps.com.thoughtworks.xstream.mapper", ptrTable, methods, fields, 7, 0x8018, 2, 2, 4, -1, 5, 6, -1 };
  return &_CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_1;
}

@end

void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_1_initWithJavaUtilSet_withJavaUtilSet_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_1 *self, id<JavaUtilSet> capture$0, id<JavaUtilSet> capture$1) {
  JreStrongAssign(&self->val$types_, capture$0);
  JreStrongAssign(&self->val$processedTypes_, capture$1);
  JavaUtilLinkedHashSet_init(self);
}

CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_1 *new_CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_1_initWithJavaUtilSet_withJavaUtilSet_(id<JavaUtilSet> capture$0, id<JavaUtilSet> capture$1) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_1, initWithJavaUtilSet_withJavaUtilSet_, capture$0, capture$1)
}

CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_1 *create_CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_1_initWithJavaUtilSet_withJavaUtilSet_(id<JavaUtilSet> capture$0, id<JavaUtilSet> capture$1) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_1, initWithJavaUtilSet_withJavaUtilSet_, capture$0, capture$1)
}

@implementation CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet

- (instancetype __nonnull)initWithCucumberDepsComThoughtworksXstreamMapperAnnotationMapper:(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *)outer$ {
  CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet_initWithCucumberDepsComThoughtworksXstreamMapperAnnotationMapper_(self, outer$);
  return self;
}

- (jboolean)addWithId:(IOSClass *)type {
  if (type == nil) {
    return false;
  }
  while ([((IOSClass *) nil_chk(type)) isArray]) {
    type = [type getComponentType];
  }
  NSString *name = [type getName];
  if ([((NSString *) nil_chk(name)) java_hasPrefix:@"java."] || [name java_hasPrefix:@"javax."]) {
    return false;
  }
  jboolean ret = [((id<JavaUtilSet>) nil_chk(this$0_->annotatedTypes_)) containsWithId:type] ? false : [super addWithId:type];
  if (ret) {
    id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamInclude> inc = ((id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamInclude>) [type getAnnotationWithIOSClass:CucumberDepsComThoughtworksXstreamAnnotationsXStreamInclude_class_()]);
    if (inc != nil) {
      IOSObjectArray *incTypes = [inc value];
      if (incTypes != nil) {
        {
          IOSObjectArray *a__ = incTypes;
          IOSClass * const *b__ = a__->buffer_;
          IOSClass * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            IOSClass *incType = *b__++;
            [self addWithId:incType];
          }
        }
      }
    }
  }
  return ret;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberDepsComThoughtworksXstreamMapperAnnotationMapper:);
  methods[1].selector = @selector(addWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCucumberDepsComThoughtworksXstreamMapperAnnotationMapper;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "add", "LIOSClass;", "(Ljava/lang/Class<*>;)Z", "LCucumberDepsComThoughtworksXstreamMapperAnnotationMapper;", "Ljava/util/LinkedHashSet<Ljava/lang/Class<*>;>;" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet = { "UnprocessedTypesSet", "cucumber.deps.com.thoughtworks.xstream.mapper", ptrTable, methods, fields, 7, 0x12, 2, 1, 3, -1, -1, 4, -1 };
  return &_CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet;
}

@end

void CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet_initWithCucumberDepsComThoughtworksXstreamMapperAnnotationMapper_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet *self, CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaUtilLinkedHashSet_init(self);
}

CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet *new_CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet_initWithCucumberDepsComThoughtworksXstreamMapperAnnotationMapper_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *outer$) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet, initWithCucumberDepsComThoughtworksXstreamMapperAnnotationMapper_, outer$)
}

CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet *create_CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet_initWithCucumberDepsComThoughtworksXstreamMapperAnnotationMapper_(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper *outer$) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet, initWithCucumberDepsComThoughtworksXstreamMapperAnnotationMapper_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet)
