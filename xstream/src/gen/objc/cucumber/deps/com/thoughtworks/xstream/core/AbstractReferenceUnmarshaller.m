//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/core/AbstractReferenceUnmarshaller.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/ConversionException.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/Converter.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/ConverterLookup.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/AbstractReferenceUnmarshaller.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/TreeUnmarshaller.h"
#include "cucumber/deps/com/thoughtworks/xstream/core/util/FastStack.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "cucumber/deps/com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@interface CucumberDepsComThoughtworksXstreamCoreAbstractReferenceUnmarshaller () {
 @public
  id<JavaUtilMap> values_;
  CucumberDepsComThoughtworksXstreamCoreUtilFastStack *parentStack_;
}

@end

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamCoreAbstractReferenceUnmarshaller, values_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamCoreAbstractReferenceUnmarshaller, parentStack_, CucumberDepsComThoughtworksXstreamCoreUtilFastStack *)

inline id CucumberDepsComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_get_NULL(void);
static id CucumberDepsComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_NULL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberDepsComThoughtworksXstreamCoreAbstractReferenceUnmarshaller, NULL, id)

J2OBJC_INITIALIZED_DEFN(CucumberDepsComThoughtworksXstreamCoreAbstractReferenceUnmarshaller)

@implementation CucumberDepsComThoughtworksXstreamCoreAbstractReferenceUnmarshaller

- (instancetype __nonnull)initWithId:(id)root
withCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader:(id<CucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader>)reader
withCucumberDepsComThoughtworksXstreamConvertersConverterLookup:(id<CucumberDepsComThoughtworksXstreamConvertersConverterLookup>)converterLookup
withCucumberDepsComThoughtworksXstreamMapperMapper:(id<CucumberDepsComThoughtworksXstreamMapperMapper>)mapper {
  CucumberDepsComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_initWithId_withCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withCucumberDepsComThoughtworksXstreamMapperMapper_(self, root, reader, converterLookup, mapper);
  return self;
}

- (id)convertWithId:(id)parent
       withIOSClass:(IOSClass *)type
withCucumberDepsComThoughtworksXstreamConvertersConverter:(id<CucumberDepsComThoughtworksXstreamConvertersConverter>)converter {
  if ([((CucumberDepsComThoughtworksXstreamCoreUtilFastStack *) nil_chk(parentStack_)) size] > 0) {
    id parentReferenceKey = [((CucumberDepsComThoughtworksXstreamCoreUtilFastStack *) nil_chk(parentStack_)) peek];
    if (parentReferenceKey != nil) {
      if (![((id<JavaUtilMap>) nil_chk(values_)) containsKeyWithId:parentReferenceKey]) {
        [((id<JavaUtilMap>) nil_chk(values_)) putWithId:parentReferenceKey withId:parent];
      }
    }
  }
  id result;
  NSString *attributeName = [((id<CucumberDepsComThoughtworksXstreamMapperMapper>) nil_chk([self getMapper])) aliasForSystemAttributeWithNSString:@"reference"];
  NSString *reference = attributeName == nil ? nil : [((id<CucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader_)) getAttributeWithNSString:attributeName];
  if (reference != nil) {
    id cache = [((id<JavaUtilMap>) nil_chk(values_)) getWithId:[self getReferenceKeyWithNSString:reference]];
    if (cache == nil) {
      CucumberDepsComThoughtworksXstreamConvertersConversionException *ex = create_CucumberDepsComThoughtworksXstreamConvertersConversionException_initWithNSString_(@"Invalid reference");
      [ex addWithNSString:@"reference" withNSString:reference];
      @throw ex;
    }
    result = cache == CucumberDepsComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_NULL ? nil : cache;
  }
  else {
    id currentReferenceKey = [self getCurrentReferenceKey];
    [((CucumberDepsComThoughtworksXstreamCoreUtilFastStack *) nil_chk(parentStack_)) pushWithId:currentReferenceKey];
    result = [super convertWithId:parent withIOSClass:type withCucumberDepsComThoughtworksXstreamConvertersConverter:converter];
    if (currentReferenceKey != nil) {
      [((id<JavaUtilMap>) nil_chk(values_)) putWithId:currentReferenceKey withId:result == nil ? CucumberDepsComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_NULL : result];
    }
    [((CucumberDepsComThoughtworksXstreamCoreUtilFastStack *) nil_chk(parentStack_)) popSilently];
  }
  return result;
}

- (id)getReferenceKeyWithNSString:(NSString *)reference {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)getCurrentReferenceKey {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(values_);
  RELEASE_(parentStack_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x404, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x404, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithId:withCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader:withCucumberDepsComThoughtworksXstreamConvertersConverterLookup:withCucumberDepsComThoughtworksXstreamMapperMapper:);
  methods[1].selector = @selector(convertWithId:withIOSClass:withCucumberDepsComThoughtworksXstreamConvertersConverter:);
  methods[2].selector = @selector(getReferenceKeyWithNSString:);
  methods[3].selector = @selector(getCurrentReferenceKey);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NULL", "LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "values_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "parentStack_", "LCucumberDepsComThoughtworksXstreamCoreUtilFastStack;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader;LCucumberDepsComThoughtworksXstreamConvertersConverterLookup;LCucumberDepsComThoughtworksXstreamMapperMapper;", "convert", "LNSObject;LIOSClass;LCucumberDepsComThoughtworksXstreamConvertersConverter;", "getReferenceKey", "LNSString;", &CucumberDepsComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_NULL };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamCoreAbstractReferenceUnmarshaller = { "AbstractReferenceUnmarshaller", "cucumber.deps.com.thoughtworks.xstream.core", ptrTable, methods, fields, 7, 0x401, 4, 3, -1, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamCoreAbstractReferenceUnmarshaller;
}

+ (void)initialize {
  if (self == [CucumberDepsComThoughtworksXstreamCoreAbstractReferenceUnmarshaller class]) {
    JreStrongAssignAndConsume(&CucumberDepsComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_NULL, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(CucumberDepsComThoughtworksXstreamCoreAbstractReferenceUnmarshaller)
  }
}

@end

void CucumberDepsComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_initWithId_withCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withCucumberDepsComThoughtworksXstreamMapperMapper_(CucumberDepsComThoughtworksXstreamCoreAbstractReferenceUnmarshaller *self, id root, id<CucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader> reader, id<CucumberDepsComThoughtworksXstreamConvertersConverterLookup> converterLookup, id<CucumberDepsComThoughtworksXstreamMapperMapper> mapper) {
  CucumberDepsComThoughtworksXstreamCoreTreeUnmarshaller_initWithId_withCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader_withCucumberDepsComThoughtworksXstreamConvertersConverterLookup_withCucumberDepsComThoughtworksXstreamMapperMapper_(self, root, reader, converterLookup, mapper);
  JreStrongAssignAndConsume(&self->values_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->parentStack_, new_CucumberDepsComThoughtworksXstreamCoreUtilFastStack_initWithInt_(16));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamCoreAbstractReferenceUnmarshaller)
