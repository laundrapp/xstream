//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/io/binary/BinaryStreamReader.java
//

#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/ErrorWriter.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/StreamException.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/binary/BinaryStreamReader.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/binary/ReaderDepthState.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/binary/Token.h"
#include "java/io/DataInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Error.h"
#include "java/lang/Long.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"

@class CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry;

@interface CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader () {
 @public
  JavaIoDataInputStream *in_;
  CucumberDepsComThoughtworksXstreamIoBinaryReaderDepthState *depthState_;
  CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry *idRegistry_;
  CucumberDepsComThoughtworksXstreamIoBinaryToken *pushback_;
  CucumberDepsComThoughtworksXstreamIoBinaryToken_Formatter *tokenFormatter_;
}

- (CucumberDepsComThoughtworksXstreamIoBinaryToken *)readToken;

@end

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader, in_, JavaIoDataInputStream *)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader, depthState_, CucumberDepsComThoughtworksXstreamIoBinaryReaderDepthState *)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader, idRegistry_, CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry *)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader, pushback_, CucumberDepsComThoughtworksXstreamIoBinaryToken *)
J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader, tokenFormatter_, CucumberDepsComThoughtworksXstreamIoBinaryToken_Formatter *)

__attribute__((unused)) static CucumberDepsComThoughtworksXstreamIoBinaryToken *CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_readToken(CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader *self);

@interface CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry : NSObject {
 @public
  id<JavaUtilMap> map_;
}

- (instancetype __nonnull)init;

- (void)putWithLong:(jlong)id_
       withNSString:(NSString *)value;

- (NSString *)getWithLong:(jlong)id_;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry)

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry, map_, id<JavaUtilMap>)

__attribute__((unused)) static void CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry_init(CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry *self);

__attribute__((unused)) static CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry *new_CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry *create_CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry_init(void);

J2OBJC_TYPE_LITERAL_HEADER(CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry)

@implementation CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)inputStream {
  CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_initWithJavaIoInputStream_(self, inputStream);
  return self;
}

- (jboolean)hasMoreChildren {
  return [((CucumberDepsComThoughtworksXstreamIoBinaryReaderDepthState *) nil_chk(depthState_)) hasMoreChildren];
}

- (NSString *)getNodeName {
  return [((CucumberDepsComThoughtworksXstreamIoBinaryReaderDepthState *) nil_chk(depthState_)) getName];
}

- (NSString *)getValue {
  return [((CucumberDepsComThoughtworksXstreamIoBinaryReaderDepthState *) nil_chk(depthState_)) getValue];
}

- (NSString *)getAttributeWithNSString:(NSString *)name {
  return [((CucumberDepsComThoughtworksXstreamIoBinaryReaderDepthState *) nil_chk(depthState_)) getAttributeWithNSString:name];
}

- (NSString *)getAttributeWithInt:(jint)index {
  return [((CucumberDepsComThoughtworksXstreamIoBinaryReaderDepthState *) nil_chk(depthState_)) getAttributeWithInt:index];
}

- (jint)getAttributeCount {
  return [((CucumberDepsComThoughtworksXstreamIoBinaryReaderDepthState *) nil_chk(depthState_)) getAttributeCount];
}

- (NSString *)getAttributeNameWithInt:(jint)index {
  return [((CucumberDepsComThoughtworksXstreamIoBinaryReaderDepthState *) nil_chk(depthState_)) getAttributeNameWithInt:index];
}

- (id<JavaUtilIterator>)getAttributeNames {
  return [((CucumberDepsComThoughtworksXstreamIoBinaryReaderDepthState *) nil_chk(depthState_)) getAttributeNames];
}

- (void)moveDown {
  [((CucumberDepsComThoughtworksXstreamIoBinaryReaderDepthState *) nil_chk(depthState_)) push];
  CucumberDepsComThoughtworksXstreamIoBinaryToken *firstToken = CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_readToken(self);
  switch ([((CucumberDepsComThoughtworksXstreamIoBinaryToken *) nil_chk(firstToken)) getType]) {
    case CucumberDepsComThoughtworksXstreamIoBinaryToken_TYPE_START_NODE:
    [depthState_ setNameWithNSString:[((CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry *) nil_chk(idRegistry_)) getWithLong:[firstToken getId]]];
    break;
    default:
    @throw create_CucumberDepsComThoughtworksXstreamIoStreamException_initWithNSString_(@"Expected StartNode");
  }
  while (true) {
    CucumberDepsComThoughtworksXstreamIoBinaryToken *nextToken = CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_readToken(self);
    switch ([((CucumberDepsComThoughtworksXstreamIoBinaryToken *) nil_chk(nextToken)) getType]) {
      case CucumberDepsComThoughtworksXstreamIoBinaryToken_TYPE_ATTRIBUTE:
      [depthState_ addAttributeWithNSString:[((CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry *) nil_chk(idRegistry_)) getWithLong:[nextToken getId]] withNSString:[nextToken getValue]];
      break;
      case CucumberDepsComThoughtworksXstreamIoBinaryToken_TYPE_VALUE:
      [depthState_ setValueWithNSString:[nextToken getValue]];
      break;
      case CucumberDepsComThoughtworksXstreamIoBinaryToken_TYPE_END_NODE:
      [depthState_ setHasMoreChildrenWithBoolean:false];
      [self pushBackWithCucumberDepsComThoughtworksXstreamIoBinaryToken:nextToken];
      return;
      case CucumberDepsComThoughtworksXstreamIoBinaryToken_TYPE_START_NODE:
      [depthState_ setHasMoreChildrenWithBoolean:true];
      [self pushBackWithCucumberDepsComThoughtworksXstreamIoBinaryToken:nextToken];
      return;
      default:
      @throw create_CucumberDepsComThoughtworksXstreamIoStreamException_initWithNSString_(JreStrcat("$@", @"Unexpected token ", nextToken));
    }
  }
}

- (void)moveUp {
  [((CucumberDepsComThoughtworksXstreamIoBinaryReaderDepthState *) nil_chk(depthState_)) pop];
  jint depth = 0;
  while (true) {
    CucumberDepsComThoughtworksXstreamIoBinaryToken *nextToken = CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_readToken(self);
    switch ([((CucumberDepsComThoughtworksXstreamIoBinaryToken *) nil_chk(nextToken)) getType]) {
      case CucumberDepsComThoughtworksXstreamIoBinaryToken_TYPE_END_NODE:
      if (depth == 0) {
        goto break_slurp;
      }
      else {
        depth--;
      }
      break;
      case CucumberDepsComThoughtworksXstreamIoBinaryToken_TYPE_START_NODE:
      depth++;
      break;
      default:
      ;
    }
  }
  break_slurp: ;
  CucumberDepsComThoughtworksXstreamIoBinaryToken *nextToken = CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_readToken(self);
  switch ([((CucumberDepsComThoughtworksXstreamIoBinaryToken *) nil_chk(nextToken)) getType]) {
    case CucumberDepsComThoughtworksXstreamIoBinaryToken_TYPE_END_NODE:
    [depthState_ setHasMoreChildrenWithBoolean:false];
    break;
    case CucumberDepsComThoughtworksXstreamIoBinaryToken_TYPE_START_NODE:
    [depthState_ setHasMoreChildrenWithBoolean:true];
    break;
    default:
    @throw create_CucumberDepsComThoughtworksXstreamIoStreamException_initWithNSString_(JreStrcat("$@", @"Unexpected token ", nextToken));
  }
  [self pushBackWithCucumberDepsComThoughtworksXstreamIoBinaryToken:nextToken];
}

- (CucumberDepsComThoughtworksXstreamIoBinaryToken *)readToken {
  return CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_readToken(self);
}

- (void)pushBackWithCucumberDepsComThoughtworksXstreamIoBinaryToken:(CucumberDepsComThoughtworksXstreamIoBinaryToken *)token {
  if (pushback_ == nil) {
    JreStrongAssign(&pushback_, token);
  }
  else {
    @throw create_JavaLangError_initWithNSString_(@"Cannot push more than one token back");
  }
}

- (void)close {
  @try {
    [((JavaIoDataInputStream *) nil_chk(in_)) close];
  }
  @catch (JavaIoIOException *e) {
    @throw create_CucumberDepsComThoughtworksXstreamIoStreamException_initWithJavaLangThrowable_(e);
  }
}

- (NSString *)peekNextChild {
  if ([((CucumberDepsComThoughtworksXstreamIoBinaryReaderDepthState *) nil_chk(depthState_)) hasMoreChildren]) {
    return [((CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry *) nil_chk(idRegistry_)) getWithLong:[((CucumberDepsComThoughtworksXstreamIoBinaryToken *) nil_chk(pushback_)) getId]];
  }
  return nil;
}

- (id<CucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader>)underlyingReader {
  return self;
}

- (void)appendErrorsWithCucumberDepsComThoughtworksXstreamConvertersErrorWriter:(id<CucumberDepsComThoughtworksXstreamConvertersErrorWriter>)errorWriter {
}

- (void)dealloc {
  RELEASE_(in_);
  RELEASE_(depthState_);
  RELEASE_(idRegistry_);
  RELEASE_(pushback_);
  RELEASE_(tokenFormatter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCucumberDepsComThoughtworksXstreamIoBinaryToken;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCucumberDepsComThoughtworksXstreamIoHierarchicalStreamReader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoInputStream:);
  methods[1].selector = @selector(hasMoreChildren);
  methods[2].selector = @selector(getNodeName);
  methods[3].selector = @selector(getValue);
  methods[4].selector = @selector(getAttributeWithNSString:);
  methods[5].selector = @selector(getAttributeWithInt:);
  methods[6].selector = @selector(getAttributeCount);
  methods[7].selector = @selector(getAttributeNameWithInt:);
  methods[8].selector = @selector(getAttributeNames);
  methods[9].selector = @selector(moveDown);
  methods[10].selector = @selector(moveUp);
  methods[11].selector = @selector(readToken);
  methods[12].selector = @selector(pushBackWithCucumberDepsComThoughtworksXstreamIoBinaryToken:);
  methods[13].selector = @selector(close);
  methods[14].selector = @selector(peekNextChild);
  methods[15].selector = @selector(underlyingReader);
  methods[16].selector = @selector(appendErrorsWithCucumberDepsComThoughtworksXstreamConvertersErrorWriter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "in_", "LJavaIoDataInputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "depthState_", "LCucumberDepsComThoughtworksXstreamIoBinaryReaderDepthState;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "idRegistry_", "LCucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pushback_", "LCucumberDepsComThoughtworksXstreamIoBinaryToken;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tokenFormatter_", "LCucumberDepsComThoughtworksXstreamIoBinaryToken_Formatter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;", "getAttribute", "LNSString;", "I", "getAttributeName", "pushBack", "LCucumberDepsComThoughtworksXstreamIoBinaryToken;", "appendErrors", "LCucumberDepsComThoughtworksXstreamConvertersErrorWriter;", "LCucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry;" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader = { "BinaryStreamReader", "cucumber.deps.com.thoughtworks.xstream.io.binary", ptrTable, methods, fields, 7, 0x1, 17, 5, -1, 9, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader;
}

@end

void CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_initWithJavaIoInputStream_(CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader *self, JavaIoInputStream *inputStream) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->depthState_, new_CucumberDepsComThoughtworksXstreamIoBinaryReaderDepthState_init());
  JreStrongAssignAndConsume(&self->idRegistry_, new_CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry_init());
  JreStrongAssignAndConsume(&self->tokenFormatter_, new_CucumberDepsComThoughtworksXstreamIoBinaryToken_Formatter_init());
  JreStrongAssignAndConsume(&self->in_, new_JavaIoDataInputStream_initWithJavaIoInputStream_(inputStream));
  [self moveDown];
}

CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader *new_CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_initWithJavaIoInputStream_(JavaIoInputStream *inputStream) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader, initWithJavaIoInputStream_, inputStream)
}

CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader *create_CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_initWithJavaIoInputStream_(JavaIoInputStream *inputStream) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader, initWithJavaIoInputStream_, inputStream)
}

CucumberDepsComThoughtworksXstreamIoBinaryToken *CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_readToken(CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader *self) {
  if (self->pushback_ == nil) {
    @try {
      CucumberDepsComThoughtworksXstreamIoBinaryToken *token = [((CucumberDepsComThoughtworksXstreamIoBinaryToken_Formatter *) nil_chk(self->tokenFormatter_)) readWithJavaIoDataInput:self->in_];
      switch ([((CucumberDepsComThoughtworksXstreamIoBinaryToken *) nil_chk(token)) getType]) {
        case CucumberDepsComThoughtworksXstreamIoBinaryToken_TYPE_MAP_ID_TO_VALUE:
        [((CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry *) nil_chk(self->idRegistry_)) putWithLong:[token getId] withNSString:[token getValue]];
        return CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_readToken(self);
        default:
        return token;
      }
    }
    @catch (JavaIoIOException *e) {
      @throw create_CucumberDepsComThoughtworksXstreamIoStreamException_initWithJavaLangThrowable_(e);
    }
  }
  else {
    CucumberDepsComThoughtworksXstreamIoBinaryToken *result = self->pushback_;
    JreStrongAssign(&self->pushback_, nil);
    return result;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader)

@implementation CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)putWithLong:(jlong)id_
       withNSString:(NSString *)value {
  [((id<JavaUtilMap>) nil_chk(map_)) putWithId:create_JavaLangLong_initWithLong_(id_) withId:value];
}

- (NSString *)getWithLong:(jlong)id_ {
  NSString *result = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(map_)) getWithId:create_JavaLangLong_initWithLong_(id_)], [NSString class]);
  if (result == nil) {
    @throw create_CucumberDepsComThoughtworksXstreamIoStreamException_initWithNSString_(JreStrcat("$J", @"Unknown ID : ", id_));
  }
  else {
    return result;
  }
}

- (void)dealloc {
  RELEASE_(map_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(putWithLong:withNSString:);
  methods[2].selector = @selector(getWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "map_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "put", "JLNSString;", "get", "J", "LCucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader;" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry = { "IdRegistry", "cucumber.deps.com.thoughtworks.xstream.io.binary", ptrTable, methods, fields, 7, 0xa, 3, 1, 4, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry;
}

@end

void CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry_init(CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->map_, new_JavaUtilHashMap_init());
}

CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry *new_CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry_init() {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry, init)
}

CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry *create_CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry_init() {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry)
