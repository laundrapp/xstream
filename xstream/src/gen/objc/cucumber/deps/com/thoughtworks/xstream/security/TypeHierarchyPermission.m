//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/security/TypeHierarchyPermission.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/security/TypeHierarchyPermission.h"

@interface CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission () {
 @public
  IOSClass *type_;
}

@end

J2OBJC_FIELD_SETTER(CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission, type_, IOSClass *)

@implementation CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)type {
  CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(self, type);
  return self;
}

- (jboolean)allowsWithIOSClass:(IOSClass *)type {
  if (type == nil) return false;
  return [((IOSClass *) nil_chk(self->type_)) isAssignableFrom:type];
}

- (void)dealloc {
  RELEASE_(type_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:);
  methods[1].selector = @selector(allowsWithIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "LIOSClass;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;", "allows" };
  static const J2ObjcClassInfo _CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission = { "TypeHierarchyPermission", "cucumber.deps.com.thoughtworks.xstream.security", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission;
}

@end

void CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission *self, IOSClass *type) {
  NSObject_init(self);
  JreStrongAssign(&self->type_, type);
}

CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission *new_CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(IOSClass *type) {
  J2OBJC_NEW_IMPL(CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission, initWithIOSClass_, type)
}

CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission *create_CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(IOSClass *type) {
  J2OBJC_CREATE_IMPL(CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission, initWithIOSClass_, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberDepsComThoughtworksXstreamSecurityTypeHierarchyPermission)
