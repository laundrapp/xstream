//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/cucumber/deps/com/thoughtworks/xstream/io/xml/TraxSource.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CucumberDepsComThoughtworksXstreamIoXmlTraxSource")
#ifdef RESTRICT_CucumberDepsComThoughtworksXstreamIoXmlTraxSource
#define INCLUDE_ALL_CucumberDepsComThoughtworksXstreamIoXmlTraxSource 0
#else
#define INCLUDE_ALL_CucumberDepsComThoughtworksXstreamIoXmlTraxSource 1
#endif
#undef RESTRICT_CucumberDepsComThoughtworksXstreamIoXmlTraxSource

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (CucumberDepsComThoughtworksXstreamIoXmlTraxSource_) && (INCLUDE_ALL_CucumberDepsComThoughtworksXstreamIoXmlTraxSource || defined(INCLUDE_CucumberDepsComThoughtworksXstreamIoXmlTraxSource))
#define CucumberDepsComThoughtworksXstreamIoXmlTraxSource_

#define RESTRICT_JavaxXmlTransformSaxSAXSource 1
#define INCLUDE_JavaxXmlTransformSaxSAXSource 1
#include "javax/xml/transform/sax/SAXSource.h"

@class CucumberDepsComThoughtworksXstreamXStream;
@class OrgXmlSaxInputSource;
@protocol JavaUtilList;
@protocol OrgXmlSaxXMLReader;

/*!
 @brief A <code>TrAX Source</code> that enables using XStream object serialization as
  direct input for XSLT processors without resorting to an intermediate representation such as
  text XML, DOM or DOM4J.
 <p>
  The following example shows how to apply an XSL Transformation
  to a set of Java objects gathered into a List (<code>source</code>):
  </p>
   
 @code
<code>
  public static String transform(List source, String stylesheet) {
      try {
          Transformer transformer = TransformerFactory.newInstance().newTransformer(
              new StreamSource(stylesheet));
          TraxSource in = new TraxSource(source);
          Writer out = new StringWriter();
          transformer.transform(in, new StreamResult(out));
          return out.toString();
      } catch (TransformerException e) {
          throw new RuntimeException(&quot;XSLT Transformation failed&quot;, e);
      }    }    
  </code>
@endcode
 @author Laurent Bihanic
 */
@interface CucumberDepsComThoughtworksXstreamIoXmlTraxSource : JavaxXmlTransformSaxSAXSource

#pragma mark Public

/*!
 @brief Creates a XStream TrAX source.
 */
- (instancetype __nonnull)init;

/*!
 @brief Creates a XStream TrAX source, setting the objects to marshal.
 @param source the list of objects to marshal.
 @throw IllegalArgumentExceptionif <code>source</code> is <code>null</code> or
                  empty.
 - seealso: #setSourceAsList(java.util.List)
 */
- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)source;

/*!
 @brief Creates a XStream TrAX source, setting the objects to marshal and a configured (with
  aliases) XStream facade.
 @param source the list of objects to marshal.
 @param xstream a configured XStream facade.
 @throw IllegalArgumentExceptionif <code>source</code> or <code>xstream</code> is
                  <code>null</code> or <code>source</code> is empty.
 - seealso: #setSourceAsList(java.util.List)
 - seealso: #setXStream(cucumber.deps.com.thoughtworks.xstream.XStream)
 */
- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)source
 withCucumberDepsComThoughtworksXstreamXStream:(CucumberDepsComThoughtworksXstreamXStream *)xstream;

/*!
 @brief Creates a XStream TrAX source, specifying the object to marshal.
 @param source the object to marshal.
 @throw IllegalArgumentExceptionif <code>source</code> is <code>null</code>.
 - seealso: #setSource(java.lang.Object)
 */
- (instancetype __nonnull)initWithId:(id)source;

/*!
 @brief Creates a XStream TrAX source, specifying the object to marshal and a configured (with
  aliases) XStream facade.
 @param source the object to marshal.
 @param xstream a configured XStream facade.
 @throw IllegalArgumentExceptionif <code>source</code> or <code>xstream</code> is
                  <code>null</code>.
 - seealso: #setSource(java.lang.Object)
 - seealso: #setXStream(cucumber.deps.com.thoughtworks.xstream.XStream)
 */
- (instancetype __nonnull)initWithId:(id)source
withCucumberDepsComThoughtworksXstreamXStream:(CucumberDepsComThoughtworksXstreamXStream *)xstream;

/*!
 @brief Returns the XMLReader to be used for the Source.
 <p>
  This implementation returns a
  specific XMLReader (<code>SaxWriter</code>) generating the XML from a list of input objects. 
 </p>
 @return an XMLReader generating the XML from a list of input objects.
 */
- (id<OrgXmlSaxXMLReader>)getXMLReader;

/*!
 @brief Sets the SAX InputSource to be used for the Source.
 <p>
  As this implementation only
  supports object lists as data source, this method always throws an 
 <code>UnsupportedOperationException</code>.
  </p>
 @param inputSource a valid InputSource reference.
 @throw UnsupportedOperationExceptionalways!
 */
- (void)setInputSourceWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)inputSource;

/*!
 @brief Sets the object to marshal.
 @param obj the object to marshal.
 @throw IllegalArgumentExceptionif <code>source</code> is <code>null</code>.
 */
- (void)setSourceWithId:(id)obj;

/*!
 @brief Sets the list of objects to marshal.
 <p>
  When dealing with non-text input (such as SAX
  or DOM), XSLT processors support multiple root node children for the source tree (see <a href="http://www.w3.org/TR/xslt#root-node-children">
 section 3.1</a> of the &quot;XSL
  Transformations (XSLT) Version 1.0&quot; specification. Using a list of objects as source
  makes use of this feature and allows creating XML documents merging the XML serialization
  of several Java objects.
 @param list the list of objects to marshal.
 @throw IllegalArgumentExceptionif <code>source</code> is <code>null</code> or
                  empty.
 */
- (void)setSourceAsListWithJavaUtilList:(id<JavaUtilList>)list;

/*!
 @brief Set the XMLReader to be used for the Source.
 <p>
  As this implementation only supports
  object lists as data source, this method throws an <code>UnsupportedOperationException</code>
  if the provided reader object does not implement the SAX <code>XMLFilter</code> interface.
  Otherwise, a <code>SaxWriter</code> instance will be attached as parent of the filter chain. 
 </p>
 @param reader a valid XMLReader or XMLFilter reference.
 @throw UnsupportedOperationExceptionif <code>reader</code> is not a SAX
                  <code>XMLFilter</code>.
 - seealso: #getXMLReader
 */
- (void)setXMLReaderWithOrgXmlSaxXMLReader:(id<OrgXmlSaxXMLReader>)reader;

/*!
 @brief Sets the XStream facade to use when marshalling objects.
 @param xstream a configured XStream facade.
 @throw IllegalArgumentExceptionif <code>xstream</code> is <code>null</code>.
 */
- (void)setXStreamWithCucumberDepsComThoughtworksXstreamXStream:(CucumberDepsComThoughtworksXstreamXStream *)xstream;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithOrgXmlSaxXMLReader:(id<OrgXmlSaxXMLReader>)arg0
                            withOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberDepsComThoughtworksXstreamIoXmlTraxSource)

/*!
 @brief If <code>javax.xml.transform.TransformerFactory</code> returns <code>true</code>
  when passed this value as an argument, the Transformer natively supports XStream.
 <p>
  <strong>Note</strong>: This implementation does not override the 
 <code>SAXSource.FEATURE</code> value defined by its superclass to be considered as a SAXSource
  by Transformer implementations not natively supporting this XStream-specific source 
 </p>
 */
inline NSString *CucumberDepsComThoughtworksXstreamIoXmlTraxSource_get_XSTREAM_FEATURE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *CucumberDepsComThoughtworksXstreamIoXmlTraxSource_XSTREAM_FEATURE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberDepsComThoughtworksXstreamIoXmlTraxSource, XSTREAM_FEATURE, NSString *)

FOUNDATION_EXPORT void CucumberDepsComThoughtworksXstreamIoXmlTraxSource_init(CucumberDepsComThoughtworksXstreamIoXmlTraxSource *self);

FOUNDATION_EXPORT CucumberDepsComThoughtworksXstreamIoXmlTraxSource *new_CucumberDepsComThoughtworksXstreamIoXmlTraxSource_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CucumberDepsComThoughtworksXstreamIoXmlTraxSource *create_CucumberDepsComThoughtworksXstreamIoXmlTraxSource_init(void);

FOUNDATION_EXPORT void CucumberDepsComThoughtworksXstreamIoXmlTraxSource_initWithId_(CucumberDepsComThoughtworksXstreamIoXmlTraxSource *self, id source);

FOUNDATION_EXPORT CucumberDepsComThoughtworksXstreamIoXmlTraxSource *new_CucumberDepsComThoughtworksXstreamIoXmlTraxSource_initWithId_(id source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CucumberDepsComThoughtworksXstreamIoXmlTraxSource *create_CucumberDepsComThoughtworksXstreamIoXmlTraxSource_initWithId_(id source);

FOUNDATION_EXPORT void CucumberDepsComThoughtworksXstreamIoXmlTraxSource_initWithId_withCucumberDepsComThoughtworksXstreamXStream_(CucumberDepsComThoughtworksXstreamIoXmlTraxSource *self, id source, CucumberDepsComThoughtworksXstreamXStream *xstream);

FOUNDATION_EXPORT CucumberDepsComThoughtworksXstreamIoXmlTraxSource *new_CucumberDepsComThoughtworksXstreamIoXmlTraxSource_initWithId_withCucumberDepsComThoughtworksXstreamXStream_(id source, CucumberDepsComThoughtworksXstreamXStream *xstream) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CucumberDepsComThoughtworksXstreamIoXmlTraxSource *create_CucumberDepsComThoughtworksXstreamIoXmlTraxSource_initWithId_withCucumberDepsComThoughtworksXstreamXStream_(id source, CucumberDepsComThoughtworksXstreamXStream *xstream);

FOUNDATION_EXPORT void CucumberDepsComThoughtworksXstreamIoXmlTraxSource_initWithJavaUtilList_(CucumberDepsComThoughtworksXstreamIoXmlTraxSource *self, id<JavaUtilList> source);

FOUNDATION_EXPORT CucumberDepsComThoughtworksXstreamIoXmlTraxSource *new_CucumberDepsComThoughtworksXstreamIoXmlTraxSource_initWithJavaUtilList_(id<JavaUtilList> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CucumberDepsComThoughtworksXstreamIoXmlTraxSource *create_CucumberDepsComThoughtworksXstreamIoXmlTraxSource_initWithJavaUtilList_(id<JavaUtilList> source);

FOUNDATION_EXPORT void CucumberDepsComThoughtworksXstreamIoXmlTraxSource_initWithJavaUtilList_withCucumberDepsComThoughtworksXstreamXStream_(CucumberDepsComThoughtworksXstreamIoXmlTraxSource *self, id<JavaUtilList> source, CucumberDepsComThoughtworksXstreamXStream *xstream);

FOUNDATION_EXPORT CucumberDepsComThoughtworksXstreamIoXmlTraxSource *new_CucumberDepsComThoughtworksXstreamIoXmlTraxSource_initWithJavaUtilList_withCucumberDepsComThoughtworksXstreamXStream_(id<JavaUtilList> source, CucumberDepsComThoughtworksXstreamXStream *xstream) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CucumberDepsComThoughtworksXstreamIoXmlTraxSource *create_CucumberDepsComThoughtworksXstreamIoXmlTraxSource_initWithJavaUtilList_withCucumberDepsComThoughtworksXstreamXStream_(id<JavaUtilList> source, CucumberDepsComThoughtworksXstreamXStream *xstream);

J2OBJC_TYPE_LITERAL_HEADER(CucumberDepsComThoughtworksXstreamIoXmlTraxSource)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_CucumberDepsComThoughtworksXstreamIoXmlTraxSource")
