//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/converters/enums/EnumSetConverter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/MarshallingContext.h"
#include "com/thoughtworks/xstream/converters/UnmarshallingContext.h"
#include "com/thoughtworks/xstream/converters/enums/EnumSetConverter.h"
#include "com/thoughtworks/xstream/core/util/Fields.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamWriter.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/lang/Enum.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/reflect/Field.h"
#include "java/util/EnumSet.h"
#include "java/util/Iterator.h"

@interface ComThoughtworksXstreamConvertersEnumsEnumSetConverter () {
 @public
  id<ComThoughtworksXstreamMapperMapper> mapper_;
}

- (NSString *)joinEnumValuesWithJavaUtilEnumSet:(JavaUtilEnumSet *)set;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersEnumsEnumSetConverter, mapper_, id<ComThoughtworksXstreamMapperMapper>)

inline JavaLangReflectField *ComThoughtworksXstreamConvertersEnumsEnumSetConverter_get_typeField(void);
static JavaLangReflectField *ComThoughtworksXstreamConvertersEnumsEnumSetConverter_typeField;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComThoughtworksXstreamConvertersEnumsEnumSetConverter, typeField, JavaLangReflectField *)

__attribute__((unused)) static NSString *ComThoughtworksXstreamConvertersEnumsEnumSetConverter_joinEnumValuesWithJavaUtilEnumSet_(ComThoughtworksXstreamConvertersEnumsEnumSetConverter *self, JavaUtilEnumSet *set);

J2OBJC_INITIALIZED_DEFN(ComThoughtworksXstreamConvertersEnumsEnumSetConverter)

@implementation ComThoughtworksXstreamConvertersEnumsEnumSetConverter

- (instancetype __nonnull)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper {
  ComThoughtworksXstreamConvertersEnumsEnumSetConverter_initWithComThoughtworksXstreamMapperMapper_(self, mapper);
  return self;
}

- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  return ComThoughtworksXstreamConvertersEnumsEnumSetConverter_typeField != nil && [JavaUtilEnumSet_class_() isAssignableFrom:type];
}

- (void)marshalWithId:(id)source
withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
withComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)context {
  JavaUtilEnumSet *set = (JavaUtilEnumSet *) cast_chk(source, [JavaUtilEnumSet class]);
  IOSClass *enumTypeForSet = (IOSClass *) cast_chk(ComThoughtworksXstreamCoreUtilFields_readWithJavaLangReflectField_withId_(ComThoughtworksXstreamConvertersEnumsEnumSetConverter_typeField, set), [IOSClass class]);
  NSString *attributeName = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper_)) aliasForSystemAttributeWithNSString:@"enum-type"];
  if (attributeName != nil) {
    [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) addAttributeWithNSString:attributeName withNSString:[mapper_ serializedClassWithIOSClass:enumTypeForSet]];
  }
  [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) setValueWithNSString:ComThoughtworksXstreamConvertersEnumsEnumSetConverter_joinEnumValuesWithJavaUtilEnumSet_(self, set)];
}

- (NSString *)joinEnumValuesWithJavaUtilEnumSet:(JavaUtilEnumSet *)set {
  return ComThoughtworksXstreamConvertersEnumsEnumSetConverter_joinEnumValuesWithJavaUtilEnumSet_(self, set);
}

- (id)unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
           withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context {
  NSString *attributeName = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper_)) aliasForSystemAttributeWithNSString:@"enum-type"];
  if (attributeName == nil) {
    @throw create_ComThoughtworksXstreamConvertersConversionException_initWithNSString_(@"No EnumType specified for EnumSet");
  }
  IOSClass *enumTypeForSet = [mapper_ realClassWithNSString:[((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) getAttributeWithNSString:attributeName]];
  JavaUtilEnumSet *set = JavaUtilEnumSet_noneOfWithIOSClass_(enumTypeForSet);
  IOSObjectArray *enumValues = [((NSString *) nil_chk([reader getValue])) java_split:@","];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(enumValues))->size_; i++) {
    NSString *enumValue = IOSObjectArray_Get(enumValues, i);
    if ([((NSString *) nil_chk(enumValue)) java_length] > 0) {
      [((JavaUtilEnumSet *) nil_chk(set)) addWithId:JavaLangEnum_valueOfWithIOSClass_withNSString_(enumTypeForSet, enumValue)];
    }
  }
  return set;
}

- (void)dealloc {
  RELEASE_(mapper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComThoughtworksXstreamMapperMapper:);
  methods[1].selector = @selector(canConvertWithIOSClass:);
  methods[2].selector = @selector(marshalWithId:withComThoughtworksXstreamIoHierarchicalStreamWriter:withComThoughtworksXstreamConvertersMarshallingContext:);
  methods[3].selector = @selector(joinEnumValuesWithJavaUtilEnumSet:);
  methods[4].selector = @selector(unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "typeField", "LJavaLangReflectField;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "mapper_", "LComThoughtworksXstreamMapperMapper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComThoughtworksXstreamMapperMapper;", "canConvert", "LIOSClass;", "marshal", "LNSObject;LComThoughtworksXstreamIoHierarchicalStreamWriter;LComThoughtworksXstreamConvertersMarshallingContext;", "joinEnumValues", "LJavaUtilEnumSet;", "unmarshal", "LComThoughtworksXstreamIoHierarchicalStreamReader;LComThoughtworksXstreamConvertersUnmarshallingContext;", &ComThoughtworksXstreamConvertersEnumsEnumSetConverter_typeField };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersEnumsEnumSetConverter = { "EnumSetConverter", "com.thoughtworks.xstream.converters.enums", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamConvertersEnumsEnumSetConverter;
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamConvertersEnumsEnumSetConverter class]) {
    JreStrongAssign(&ComThoughtworksXstreamConvertersEnumsEnumSetConverter_typeField, ComThoughtworksXstreamCoreUtilFields_locateWithIOSClass_withIOSClass_withBoolean_(JavaUtilEnumSet_class_(), IOSClass_class_(), false));
    J2OBJC_SET_INITIALIZED(ComThoughtworksXstreamConvertersEnumsEnumSetConverter)
  }
}

@end

void ComThoughtworksXstreamConvertersEnumsEnumSetConverter_initWithComThoughtworksXstreamMapperMapper_(ComThoughtworksXstreamConvertersEnumsEnumSetConverter *self, id<ComThoughtworksXstreamMapperMapper> mapper) {
  NSObject_init(self);
  JreStrongAssign(&self->mapper_, mapper);
}

ComThoughtworksXstreamConvertersEnumsEnumSetConverter *new_ComThoughtworksXstreamConvertersEnumsEnumSetConverter_initWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> mapper) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamConvertersEnumsEnumSetConverter, initWithComThoughtworksXstreamMapperMapper_, mapper)
}

ComThoughtworksXstreamConvertersEnumsEnumSetConverter *create_ComThoughtworksXstreamConvertersEnumsEnumSetConverter_initWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> mapper) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamConvertersEnumsEnumSetConverter, initWithComThoughtworksXstreamMapperMapper_, mapper)
}

NSString *ComThoughtworksXstreamConvertersEnumsEnumSetConverter_joinEnumValuesWithJavaUtilEnumSet_(ComThoughtworksXstreamConvertersEnumsEnumSetConverter *self, JavaUtilEnumSet *set) {
  jboolean seenFirst = false;
  JavaLangStringBuffer *result = create_JavaLangStringBuffer_init();
  for (id<JavaUtilIterator> iterator = [((JavaUtilEnumSet *) nil_chk(set)) iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
    JavaLangEnum *value = (JavaLangEnum *) cast_chk([iterator next], [JavaLangEnum class]);
    if (seenFirst) {
      [result appendWithChar:','];
    }
    else {
      seenFirst = true;
    }
    [result appendWithNSString:[((JavaLangEnum *) nil_chk(value)) name]];
  }
  return [result description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersEnumsEnumSetConverter)
