//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/converters/enums/EnumToStringConverter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/basic/AbstractSingleValueConverter.h"
#include "com/thoughtworks/xstream/converters/enums/EnumToStringConverter.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/EnumMap.h"
#include "java/util/EnumSet.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface ComThoughtworksXstreamConvertersEnumsEnumToStringConverter () {
 @public
  IOSClass *enumType_;
  id<JavaUtilMap> strings_;
  JavaUtilEnumMap *values_;
}

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)type
                           withJavaUtilMap:(id<JavaUtilMap>)strings
                       withJavaUtilEnumMap:(JavaUtilEnumMap *)values;

+ (id<JavaUtilMap>)extractStringMapWithIOSClass:(IOSClass *)type;

+ (void)checkTypeWithIOSClass:(IOSClass *)type;

+ (JavaUtilEnumMap *)buildValueMapWithIOSClass:(IOSClass *)type
                               withJavaUtilMap:(id<JavaUtilMap>)strings;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersEnumsEnumToStringConverter, enumType_, IOSClass *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersEnumsEnumToStringConverter, strings_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersEnumsEnumToStringConverter, values_, JavaUtilEnumMap *)

__attribute__((unused)) static void ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_initWithIOSClass_withJavaUtilMap_withJavaUtilEnumMap_(ComThoughtworksXstreamConvertersEnumsEnumToStringConverter *self, IOSClass *type, id<JavaUtilMap> strings, JavaUtilEnumMap *values);

__attribute__((unused)) static ComThoughtworksXstreamConvertersEnumsEnumToStringConverter *new_ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_initWithIOSClass_withJavaUtilMap_withJavaUtilEnumMap_(IOSClass *type, id<JavaUtilMap> strings, JavaUtilEnumMap *values) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComThoughtworksXstreamConvertersEnumsEnumToStringConverter *create_ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_initWithIOSClass_withJavaUtilMap_withJavaUtilEnumMap_(IOSClass *type, id<JavaUtilMap> strings, JavaUtilEnumMap *values);

__attribute__((unused)) static id<JavaUtilMap> ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_extractStringMapWithIOSClass_(IOSClass *type);

__attribute__((unused)) static void ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_checkTypeWithIOSClass_(IOSClass *type);

__attribute__((unused)) static JavaUtilEnumMap *ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_buildValueMapWithIOSClass_withJavaUtilMap_(IOSClass *type, id<JavaUtilMap> strings);

@implementation ComThoughtworksXstreamConvertersEnumsEnumToStringConverter

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)type {
  ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_initWithIOSClass_(self, type);
  return self;
}

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)type
                           withJavaUtilMap:(id<JavaUtilMap>)strings {
  ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_initWithIOSClass_withJavaUtilMap_(self, type, strings);
  return self;
}

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)type
                           withJavaUtilMap:(id<JavaUtilMap>)strings
                       withJavaUtilEnumMap:(JavaUtilEnumMap *)values {
  ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_initWithIOSClass_withJavaUtilMap_withJavaUtilEnumMap_(self, type, strings, values);
  return self;
}

+ (id<JavaUtilMap>)extractStringMapWithIOSClass:(IOSClass *)type {
  return ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_extractStringMapWithIOSClass_(type);
}

+ (void)checkTypeWithIOSClass:(IOSClass *)type {
  ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_checkTypeWithIOSClass_(type);
}

+ (JavaUtilEnumMap *)buildValueMapWithIOSClass:(IOSClass *)type
                               withJavaUtilMap:(id<JavaUtilMap>)strings {
  return ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_buildValueMapWithIOSClass_withJavaUtilMap_(type, strings);
}

- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  return [((IOSClass *) nil_chk(enumType_)) isAssignableFrom:type];
}

- (NSString *)toStringWithId:(id)obj {
  JavaLangEnum *value = [JavaLangEnum_class_() cast:obj];
  return values_ == nil ? [((JavaLangEnum *) nil_chk(value)) description] : [values_ getWithId:value];
}

- (id)fromStringWithNSString:(NSString *)str {
  if (str == nil) {
    return nil;
  }
  JavaLangEnum *result = [((id<JavaUtilMap>) nil_chk(strings_)) getWithId:str];
  if (result == nil) {
    @throw create_ComThoughtworksXstreamConvertersConversionException_initWithNSString_(JreStrcat("$$$$C", @"Invalid string representation for enum type ", [((IOSClass *) nil_chk(enumType_)) getName], @": <", str, '>'));
  }
  return result;
}

- (void)dealloc {
  RELEASE_(enumType_);
  RELEASE_(strings_);
  RELEASE_(values_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, NULL, 0x2, -1, 4, -1, 5, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xa, 6, 0, -1, 7, -1, -1 },
    { NULL, "V", 0xa, 8, 0, -1, 9, -1, -1 },
    { NULL, "LJavaUtilEnumMap;", 0xa, 10, 2, -1, 11, -1, -1 },
    { NULL, "Z", 0x1, 12, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:);
  methods[1].selector = @selector(initWithIOSClass:withJavaUtilMap:);
  methods[2].selector = @selector(initWithIOSClass:withJavaUtilMap:withJavaUtilEnumMap:);
  methods[3].selector = @selector(extractStringMapWithIOSClass:);
  methods[4].selector = @selector(checkTypeWithIOSClass:);
  methods[5].selector = @selector(buildValueMapWithIOSClass:withJavaUtilMap:);
  methods[6].selector = @selector(canConvertWithIOSClass:);
  methods[7].selector = @selector(toStringWithId:);
  methods[8].selector = @selector(fromStringWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "enumType_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 17, -1 },
    { "strings_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
    { "values_", "LJavaUtilEnumMap;", .constantValue.asLong = 0, 0x12, -1, -1, 19, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;", "(Ljava/lang/Class<TT;>;)V", "LIOSClass;LJavaUtilMap;", "(Ljava/lang/Class<TT;>;Ljava/util/Map<Ljava/lang/String;TT;>;)V", "LIOSClass;LJavaUtilMap;LJavaUtilEnumMap;", "(Ljava/lang/Class<TT;>;Ljava/util/Map<Ljava/lang/String;TT;>;Ljava/util/EnumMap<TT;Ljava/lang/String;>;)V", "extractStringMap", "<T:Ljava/lang/Enum<TT;>;>(Ljava/lang/Class<TT;>;)Ljava/util/Map<Ljava/lang/String;TT;>;", "checkType", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)V", "buildValueMap", "<T:Ljava/lang/Enum<TT;>;>(Ljava/lang/Class<TT;>;Ljava/util/Map<Ljava/lang/String;TT;>;)Ljava/util/EnumMap<TT;Ljava/lang/String;>;", "canConvert", "toString", "LNSObject;", "fromString", "LNSString;", "Ljava/lang/Class<TT;>;", "Ljava/util/Map<Ljava/lang/String;TT;>;", "Ljava/util/EnumMap<TT;Ljava/lang/String;>;", "<T:Ljava/lang/Enum<TT;>;>Lcom/thoughtworks/xstream/converters/basic/AbstractSingleValueConverter;" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersEnumsEnumToStringConverter = { "EnumToStringConverter", "com.thoughtworks.xstream.converters.enums", ptrTable, methods, fields, 7, 0x1, 9, 3, -1, -1, -1, 20, -1 };
  return &_ComThoughtworksXstreamConvertersEnumsEnumToStringConverter;
}

@end

void ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_initWithIOSClass_(ComThoughtworksXstreamConvertersEnumsEnumToStringConverter *self, IOSClass *type) {
  ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_initWithIOSClass_withJavaUtilMap_withJavaUtilEnumMap_(self, type, ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_extractStringMapWithIOSClass_(type), nil);
}

ComThoughtworksXstreamConvertersEnumsEnumToStringConverter *new_ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_initWithIOSClass_(IOSClass *type) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamConvertersEnumsEnumToStringConverter, initWithIOSClass_, type)
}

ComThoughtworksXstreamConvertersEnumsEnumToStringConverter *create_ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_initWithIOSClass_(IOSClass *type) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamConvertersEnumsEnumToStringConverter, initWithIOSClass_, type)
}

void ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_initWithIOSClass_withJavaUtilMap_(ComThoughtworksXstreamConvertersEnumsEnumToStringConverter *self, IOSClass *type, id<JavaUtilMap> strings) {
  ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_initWithIOSClass_withJavaUtilMap_withJavaUtilEnumMap_(self, type, strings, ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_buildValueMapWithIOSClass_withJavaUtilMap_(type, strings));
}

ComThoughtworksXstreamConvertersEnumsEnumToStringConverter *new_ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_initWithIOSClass_withJavaUtilMap_(IOSClass *type, id<JavaUtilMap> strings) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamConvertersEnumsEnumToStringConverter, initWithIOSClass_withJavaUtilMap_, type, strings)
}

ComThoughtworksXstreamConvertersEnumsEnumToStringConverter *create_ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_initWithIOSClass_withJavaUtilMap_(IOSClass *type, id<JavaUtilMap> strings) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamConvertersEnumsEnumToStringConverter, initWithIOSClass_withJavaUtilMap_, type, strings)
}

void ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_initWithIOSClass_withJavaUtilMap_withJavaUtilEnumMap_(ComThoughtworksXstreamConvertersEnumsEnumToStringConverter *self, IOSClass *type, id<JavaUtilMap> strings, JavaUtilEnumMap *values) {
  ComThoughtworksXstreamConvertersBasicAbstractSingleValueConverter_init(self);
  JreStrongAssign(&self->enumType_, type);
  JreStrongAssign(&self->strings_, strings);
  JreStrongAssign(&self->values_, values);
}

ComThoughtworksXstreamConvertersEnumsEnumToStringConverter *new_ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_initWithIOSClass_withJavaUtilMap_withJavaUtilEnumMap_(IOSClass *type, id<JavaUtilMap> strings, JavaUtilEnumMap *values) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamConvertersEnumsEnumToStringConverter, initWithIOSClass_withJavaUtilMap_withJavaUtilEnumMap_, type, strings, values)
}

ComThoughtworksXstreamConvertersEnumsEnumToStringConverter *create_ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_initWithIOSClass_withJavaUtilMap_withJavaUtilEnumMap_(IOSClass *type, id<JavaUtilMap> strings, JavaUtilEnumMap *values) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamConvertersEnumsEnumToStringConverter, initWithIOSClass_withJavaUtilMap_withJavaUtilEnumMap_, type, strings, values)
}

id<JavaUtilMap> ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_extractStringMapWithIOSClass_(IOSClass *type) {
  ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_initialize();
  ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_checkTypeWithIOSClass_(type);
  JavaUtilEnumSet *values = JavaUtilEnumSet_allOfWithIOSClass_(type);
  id<JavaUtilMap> strings = create_JavaUtilHashMap_initWithInt_([((JavaUtilEnumSet *) nil_chk(values)) size]);
  for (JavaLangEnum * __strong value in values) {
    if ([strings putWithId:[((JavaLangEnum *) nil_chk(value)) description] withId:value] != nil) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"Enum type ", [((IOSClass *) nil_chk(type)) getName], @" does not have unique string representations for its values"));
    }
  }
  return strings;
}

void ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_checkTypeWithIOSClass_(IOSClass *type) {
  ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_initialize();
  if (![JavaLangEnum_class_() isAssignableFrom:type] && type != JavaLangEnum_class_()) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Converter can only handle enum types");
  }
}

JavaUtilEnumMap *ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_buildValueMapWithIOSClass_withJavaUtilMap_(IOSClass *type, id<JavaUtilMap> strings) {
  ComThoughtworksXstreamConvertersEnumsEnumToStringConverter_initialize();
  JavaUtilEnumMap *values = create_JavaUtilEnumMap_initWithIOSClass_(type);
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(strings)) entrySet])) {
    [values putWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue] withId:[entry_ getKey]];
  }
  return values;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersEnumsEnumToStringConverter)
