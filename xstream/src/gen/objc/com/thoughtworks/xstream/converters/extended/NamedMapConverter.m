//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/converters/extended/NamedMapConverter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/Converter.h"
#include "com/thoughtworks/xstream/converters/ConverterLookup.h"
#include "com/thoughtworks/xstream/converters/MarshallingContext.h"
#include "com/thoughtworks/xstream/converters/SingleValueConverter.h"
#include "com/thoughtworks/xstream/converters/UnmarshallingContext.h"
#include "com/thoughtworks/xstream/converters/collections/MapConverter.h"
#include "com/thoughtworks/xstream/converters/extended/NamedMapConverter.h"
#include "com/thoughtworks/xstream/converters/extended/UseAttributeForEnumMapper.h"
#include "com/thoughtworks/xstream/core/JVM.h"
#include "com/thoughtworks/xstream/core/util/HierarchicalStreams.h"
#include "com/thoughtworks/xstream/io/ExtendedHierarchicalStreamWriterHelper.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamWriter.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface ComThoughtworksXstreamConvertersExtendedNamedMapConverter () {
 @public
  NSString *entryName_;
  NSString *keyName_;
  IOSClass *keyType_;
  NSString *valueName_;
  IOSClass *valueType_;
  jboolean keyAsAttribute_;
  jboolean valueAsAttribute_;
  id<ComThoughtworksXstreamConvertersConverterLookup> lookup_;
  id<ComThoughtworksXstreamMapperMapper> enumMapper_;
}

- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getSingleValueConverterWithIOSClass:(IOSClass *)type;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersExtendedNamedMapConverter, entryName_, NSString *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersExtendedNamedMapConverter, keyName_, NSString *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersExtendedNamedMapConverter, keyType_, IOSClass *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersExtendedNamedMapConverter, valueName_, NSString *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersExtendedNamedMapConverter, valueType_, IOSClass *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersExtendedNamedMapConverter, lookup_, id<ComThoughtworksXstreamConvertersConverterLookup>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersExtendedNamedMapConverter, enumMapper_, id<ComThoughtworksXstreamMapperMapper>)

__attribute__((unused)) static id<ComThoughtworksXstreamConvertersSingleValueConverter> ComThoughtworksXstreamConvertersExtendedNamedMapConverter_getSingleValueConverterWithIOSClass_(ComThoughtworksXstreamConvertersExtendedNamedMapConverter *self, IOSClass *type);

@implementation ComThoughtworksXstreamConvertersExtendedNamedMapConverter

- (instancetype __nonnull)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
                                                        withNSString:(NSString *)entryName
                                                        withNSString:(NSString *)keyName
                                                        withIOSClass:(IOSClass *)keyType
                                                        withNSString:(NSString *)valueName
                                                        withIOSClass:(IOSClass *)valueType {
  ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_(self, mapper, entryName, keyName, keyType, valueName, valueType);
  return self;
}

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)type
    withComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
                              withNSString:(NSString *)entryName
                              withNSString:(NSString *)keyName
                              withIOSClass:(IOSClass *)keyType
                              withNSString:(NSString *)valueName
                              withIOSClass:(IOSClass *)valueType {
  ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_(self, type, mapper, entryName, keyName, keyType, valueName, valueType);
  return self;
}

- (instancetype __nonnull)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
                                                        withNSString:(NSString *)entryName
                                                        withNSString:(NSString *)keyName
                                                        withIOSClass:(IOSClass *)keyType
                                                        withNSString:(NSString *)valueName
                                                        withIOSClass:(IOSClass *)valueType
                                                         withBoolean:(jboolean)keyAsAttribute
                                                         withBoolean:(jboolean)valueAsAttribute
                 withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)lookup {
  ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_(self, mapper, entryName, keyName, keyType, valueName, valueType, keyAsAttribute, valueAsAttribute, lookup);
  return self;
}

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)type
    withComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
                              withNSString:(NSString *)entryName
                              withNSString:(NSString *)keyName
                              withIOSClass:(IOSClass *)keyType
                              withNSString:(NSString *)valueName
                              withIOSClass:(IOSClass *)valueType
                               withBoolean:(jboolean)keyAsAttribute
                               withBoolean:(jboolean)valueAsAttribute
withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)lookup {
  ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_(self, type, mapper, entryName, keyName, keyType, valueName, valueType, keyAsAttribute, valueAsAttribute, lookup);
  return self;
}

- (void)marshalWithId:(id)source
withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
withComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)context {
  id<JavaUtilMap> map = (id<JavaUtilMap>) cast_check(source, JavaUtilMap_class_());
  id<ComThoughtworksXstreamConvertersSingleValueConverter> keyConverter = nil;
  id<ComThoughtworksXstreamConvertersSingleValueConverter> valueConverter = nil;
  if (keyAsAttribute_) {
    keyConverter = ComThoughtworksXstreamConvertersExtendedNamedMapConverter_getSingleValueConverterWithIOSClass_(self, keyType_);
  }
  if (valueAsAttribute_ || valueName_ == nil) {
    valueConverter = ComThoughtworksXstreamConvertersExtendedNamedMapConverter_getSingleValueConverterWithIOSClass_(self, valueType_);
  }
  for (id<JavaUtilIterator> iterator = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map)) entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) cast_check([iterator next], JavaUtilMap_Entry_class_());
    id key = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    id value = [entry_ getValue];
    if (entryName_ != nil) {
      ComThoughtworksXstreamIoExtendedHierarchicalStreamWriterHelper_startNodeWithComThoughtworksXstreamIoHierarchicalStreamWriter_withNSString_withIOSClass_(writer, entryName_, [entry_ java_getClass]);
      if (keyConverter != nil && key != nil) {
        [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) addAttributeWithNSString:keyName_ withNSString:[keyConverter toStringWithId:key]];
      }
      if (valueName_ != nil && valueConverter != nil && value != nil) {
        [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) addAttributeWithNSString:valueName_ withNSString:[valueConverter toStringWithId:value]];
      }
    }
    if (keyConverter == nil) {
      [self writeItemWithNSString:keyName_ withIOSClass:keyType_ withId:key withComThoughtworksXstreamConvertersMarshallingContext:context withComThoughtworksXstreamIoHierarchicalStreamWriter:writer];
    }
    if (valueConverter == nil) {
      [self writeItemWithNSString:valueName_ withIOSClass:valueType_ withId:value withComThoughtworksXstreamConvertersMarshallingContext:context withComThoughtworksXstreamIoHierarchicalStreamWriter:writer];
    }
    else if (valueName_ == nil) {
      [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) setValueWithNSString:[valueConverter toStringWithId:value]];
    }
    if (entryName_ != nil) {
      [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) endNode];
    }
  }
}

- (void)populateMapWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
               withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context
                                                        withJavaUtilMap:(id<JavaUtilMap>)map
                                                        withJavaUtilMap:(id<JavaUtilMap>)target {
  id<ComThoughtworksXstreamConvertersSingleValueConverter> keyConverter = nil;
  id<ComThoughtworksXstreamConvertersSingleValueConverter> valueConverter = nil;
  if (keyAsAttribute_) {
    keyConverter = ComThoughtworksXstreamConvertersExtendedNamedMapConverter_getSingleValueConverterWithIOSClass_(self, keyType_);
  }
  if (valueAsAttribute_ || valueName_ == nil) {
    valueConverter = ComThoughtworksXstreamConvertersExtendedNamedMapConverter_getSingleValueConverterWithIOSClass_(self, valueType_);
  }
  while ([((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) hasMoreChildren]) {
    id key = nil;
    id value = nil;
    if (entryName_ != nil) {
      [reader moveDown];
      if (keyConverter != nil) {
        NSString *attribute = [reader getAttributeWithNSString:keyName_];
        if (attribute != nil) {
          key = [keyConverter fromStringWithNSString:attribute];
        }
      }
      if (valueAsAttribute_ && valueConverter != nil) {
        NSString *attribute = [reader getAttributeWithNSString:valueName_];
        if (attribute != nil) {
          value = [valueConverter fromStringWithNSString:attribute];
        }
      }
    }
    if (keyConverter == nil) {
      [reader moveDown];
      if (valueConverter == nil && ![((NSString *) nil_chk(keyName_)) isEqual:valueName_] && [((NSString *) nil_chk([reader getNodeName])) isEqual:valueName_]) {
        value = [self readItemWithIOSClass:valueType_ withComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersUnmarshallingContext:context withId:map];
      }
      else {
        key = [self readItemWithIOSClass:keyType_ withComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersUnmarshallingContext:context withId:map];
      }
      [reader moveUp];
    }
    if (valueConverter == nil) {
      [reader moveDown];
      if (keyConverter == nil && key == nil && value != nil) {
        key = [self readItemWithIOSClass:keyType_ withComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersUnmarshallingContext:context withId:map];
      }
      else {
        value = [self readItemWithIOSClass:valueType_ withComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersUnmarshallingContext:context withId:map];
      }
      [reader moveUp];
    }
    else if (!valueAsAttribute_) {
      value = [reader getValue];
    }
    [((id<JavaUtilMap>) nil_chk(target)) putWithId:key withId:value];
    if (entryName_ != nil) {
      [reader moveUp];
    }
  }
}

- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getSingleValueConverterWithIOSClass:(IOSClass *)type {
  return ComThoughtworksXstreamConvertersExtendedNamedMapConverter_getSingleValueConverterWithIOSClass_(self, type);
}

- (void)writeItemWithNSString:(NSString *)name
                 withIOSClass:(IOSClass *)type
                       withId:(id)item
withComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)context
withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer {
  IOSClass *itemType = item == nil ? ComThoughtworksXstreamMapperMapper_Null_class_() : [item java_getClass];
  ComThoughtworksXstreamIoExtendedHierarchicalStreamWriterHelper_startNodeWithComThoughtworksXstreamIoHierarchicalStreamWriter_withNSString_withIOSClass_(writer, name, itemType);
  if (![itemType isEqual:type]) {
    NSString *attributeName = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk([self mapper])) aliasForSystemAttributeWithNSString:@"class"];
    if (attributeName != nil) {
      [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) addAttributeWithNSString:attributeName withNSString:[((id<ComThoughtworksXstreamMapperMapper>) nil_chk([self mapper])) serializedClassWithIOSClass:itemType]];
    }
  }
  if (item != nil) {
    [((id<ComThoughtworksXstreamConvertersMarshallingContext>) nil_chk(context)) convertAnotherWithId:item];
  }
  [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) endNode];
}

- (id)readItemWithIOSClass:(IOSClass *)type
withComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context
                    withId:(id)current {
  NSString *className_ = ComThoughtworksXstreamCoreUtilHierarchicalStreams_readClassAttributeWithComThoughtworksXstreamIoHierarchicalStreamReader_withComThoughtworksXstreamMapperMapper_(reader, [self mapper]);
  IOSClass *itemType = className_ == nil ? type : [((id<ComThoughtworksXstreamMapperMapper>) nil_chk([self mapper])) realClassWithNSString:className_];
  if ([ComThoughtworksXstreamMapperMapper_Null_class_() isEqual:itemType]) {
    return nil;
  }
  else {
    return [((id<ComThoughtworksXstreamConvertersUnmarshallingContext>) nil_chk(context)) convertAnotherWithId:current withIOSClass:itemType];
  }
}

- (void)dealloc {
  RELEASE_(entryName_);
  RELEASE_(keyName_);
  RELEASE_(keyType_);
  RELEASE_(valueName_);
  RELEASE_(valueType_);
  RELEASE_(lookup_);
  RELEASE_(enumMapper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "LComThoughtworksXstreamConvertersSingleValueConverter;", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComThoughtworksXstreamMapperMapper:withNSString:withNSString:withIOSClass:withNSString:withIOSClass:);
  methods[1].selector = @selector(initWithIOSClass:withComThoughtworksXstreamMapperMapper:withNSString:withNSString:withIOSClass:withNSString:withIOSClass:);
  methods[2].selector = @selector(initWithComThoughtworksXstreamMapperMapper:withNSString:withNSString:withIOSClass:withNSString:withIOSClass:withBoolean:withBoolean:withComThoughtworksXstreamConvertersConverterLookup:);
  methods[3].selector = @selector(initWithIOSClass:withComThoughtworksXstreamMapperMapper:withNSString:withNSString:withIOSClass:withNSString:withIOSClass:withBoolean:withBoolean:withComThoughtworksXstreamConvertersConverterLookup:);
  methods[4].selector = @selector(marshalWithId:withComThoughtworksXstreamIoHierarchicalStreamWriter:withComThoughtworksXstreamConvertersMarshallingContext:);
  methods[5].selector = @selector(populateMapWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:withJavaUtilMap:withJavaUtilMap:);
  methods[6].selector = @selector(getSingleValueConverterWithIOSClass:);
  methods[7].selector = @selector(writeItemWithNSString:withIOSClass:withId:withComThoughtworksXstreamConvertersMarshallingContext:withComThoughtworksXstreamIoHierarchicalStreamWriter:);
  methods[8].selector = @selector(readItemWithIOSClass:withComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "entryName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keyName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keyType_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "valueName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "valueType_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keyAsAttribute_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "valueAsAttribute_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lookup_", "LComThoughtworksXstreamConvertersConverterLookup;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "enumMapper_", "LComThoughtworksXstreamMapperMapper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComThoughtworksXstreamMapperMapper;LNSString;LNSString;LIOSClass;LNSString;LIOSClass;", "LIOSClass;LComThoughtworksXstreamMapperMapper;LNSString;LNSString;LIOSClass;LNSString;LIOSClass;", "LComThoughtworksXstreamMapperMapper;LNSString;LNSString;LIOSClass;LNSString;LIOSClass;ZZLComThoughtworksXstreamConvertersConverterLookup;", "LIOSClass;LComThoughtworksXstreamMapperMapper;LNSString;LNSString;LIOSClass;LNSString;LIOSClass;ZZLComThoughtworksXstreamConvertersConverterLookup;", "marshal", "LNSObject;LComThoughtworksXstreamIoHierarchicalStreamWriter;LComThoughtworksXstreamConvertersMarshallingContext;", "populateMap", "LComThoughtworksXstreamIoHierarchicalStreamReader;LComThoughtworksXstreamConvertersUnmarshallingContext;LJavaUtilMap;LJavaUtilMap;", "getSingleValueConverter", "LIOSClass;", "writeItem", "LNSString;LIOSClass;LNSObject;LComThoughtworksXstreamConvertersMarshallingContext;LComThoughtworksXstreamIoHierarchicalStreamWriter;", "readItem", "LIOSClass;LComThoughtworksXstreamIoHierarchicalStreamReader;LComThoughtworksXstreamConvertersUnmarshallingContext;LNSObject;" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersExtendedNamedMapConverter = { "NamedMapConverter", "com.thoughtworks.xstream.converters.extended", ptrTable, methods, fields, 7, 0x1, 9, 9, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamConvertersExtendedNamedMapConverter;
}

@end

void ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_(ComThoughtworksXstreamConvertersExtendedNamedMapConverter *self, id<ComThoughtworksXstreamMapperMapper> mapper, NSString *entryName, NSString *keyName, IOSClass *keyType, NSString *valueName, IOSClass *valueType) {
  ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_(self, mapper, entryName, keyName, keyType, valueName, valueType, false, false, nil);
}

ComThoughtworksXstreamConvertersExtendedNamedMapConverter *new_ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_(id<ComThoughtworksXstreamMapperMapper> mapper, NSString *entryName, NSString *keyName, IOSClass *keyType, NSString *valueName, IOSClass *valueType) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamConvertersExtendedNamedMapConverter, initWithComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_, mapper, entryName, keyName, keyType, valueName, valueType)
}

ComThoughtworksXstreamConvertersExtendedNamedMapConverter *create_ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_(id<ComThoughtworksXstreamMapperMapper> mapper, NSString *entryName, NSString *keyName, IOSClass *keyType, NSString *valueName, IOSClass *valueType) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamConvertersExtendedNamedMapConverter, initWithComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_, mapper, entryName, keyName, keyType, valueName, valueType)
}

void ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_(ComThoughtworksXstreamConvertersExtendedNamedMapConverter *self, IOSClass *type, id<ComThoughtworksXstreamMapperMapper> mapper, NSString *entryName, NSString *keyName, IOSClass *keyType, NSString *valueName, IOSClass *valueType) {
  ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_(self, type, mapper, entryName, keyName, keyType, valueName, valueType, false, false, nil);
}

ComThoughtworksXstreamConvertersExtendedNamedMapConverter *new_ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_(IOSClass *type, id<ComThoughtworksXstreamMapperMapper> mapper, NSString *entryName, NSString *keyName, IOSClass *keyType, NSString *valueName, IOSClass *valueType) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamConvertersExtendedNamedMapConverter, initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_, type, mapper, entryName, keyName, keyType, valueName, valueType)
}

ComThoughtworksXstreamConvertersExtendedNamedMapConverter *create_ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_(IOSClass *type, id<ComThoughtworksXstreamMapperMapper> mapper, NSString *entryName, NSString *keyName, IOSClass *keyType, NSString *valueName, IOSClass *valueType) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamConvertersExtendedNamedMapConverter, initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_, type, mapper, entryName, keyName, keyType, valueName, valueType)
}

void ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_(ComThoughtworksXstreamConvertersExtendedNamedMapConverter *self, id<ComThoughtworksXstreamMapperMapper> mapper, NSString *entryName, NSString *keyName, IOSClass *keyType, NSString *valueName, IOSClass *valueType, jboolean keyAsAttribute, jboolean valueAsAttribute, id<ComThoughtworksXstreamConvertersConverterLookup> lookup) {
  ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_(self, nil, mapper, entryName, keyName, keyType, valueName, valueType, keyAsAttribute, valueAsAttribute, lookup);
}

ComThoughtworksXstreamConvertersExtendedNamedMapConverter *new_ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_(id<ComThoughtworksXstreamMapperMapper> mapper, NSString *entryName, NSString *keyName, IOSClass *keyType, NSString *valueName, IOSClass *valueType, jboolean keyAsAttribute, jboolean valueAsAttribute, id<ComThoughtworksXstreamConvertersConverterLookup> lookup) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamConvertersExtendedNamedMapConverter, initWithComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_, mapper, entryName, keyName, keyType, valueName, valueType, keyAsAttribute, valueAsAttribute, lookup)
}

ComThoughtworksXstreamConvertersExtendedNamedMapConverter *create_ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_(id<ComThoughtworksXstreamMapperMapper> mapper, NSString *entryName, NSString *keyName, IOSClass *keyType, NSString *valueName, IOSClass *valueType, jboolean keyAsAttribute, jboolean valueAsAttribute, id<ComThoughtworksXstreamConvertersConverterLookup> lookup) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamConvertersExtendedNamedMapConverter, initWithComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_, mapper, entryName, keyName, keyType, valueName, valueType, keyAsAttribute, valueAsAttribute, lookup)
}

void ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_(ComThoughtworksXstreamConvertersExtendedNamedMapConverter *self, IOSClass *type, id<ComThoughtworksXstreamMapperMapper> mapper, NSString *entryName, NSString *keyName, IOSClass *keyType, NSString *valueName, IOSClass *valueType, jboolean keyAsAttribute, jboolean valueAsAttribute, id<ComThoughtworksXstreamConvertersConverterLookup> lookup) {
  ComThoughtworksXstreamConvertersCollectionsMapConverter_initWithComThoughtworksXstreamMapperMapper_withIOSClass_(self, mapper, type);
  JreStrongAssign(&self->entryName_, entryName != nil && [entryName java_length] == 0 ? nil : entryName);
  JreStrongAssign(&self->keyName_, keyName != nil && [keyName java_length] == 0 ? nil : keyName);
  JreStrongAssign(&self->keyType_, keyType);
  JreStrongAssign(&self->valueName_, valueName != nil && [valueName java_length] == 0 ? nil : valueName);
  JreStrongAssign(&self->valueType_, valueType);
  self->keyAsAttribute_ = keyAsAttribute;
  self->valueAsAttribute_ = valueAsAttribute;
  JreStrongAssign(&self->lookup_, lookup);
  JreStrongAssign(&self->enumMapper_, ComThoughtworksXstreamCoreJVM_is15() ? ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper_createEnumMapperWithComThoughtworksXstreamMapperMapper_(mapper) : nil);
  if (keyType == nil || valueType == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Class types of key and value are mandatory");
  }
  if (entryName == nil) {
    if (keyAsAttribute || valueAsAttribute) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot write attributes to map entry, if map entry must be omitted");
    }
    if (valueName == nil) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot write value as text of entry, if entry must be omitted");
    }
  }
  if (keyName == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot write key without name");
  }
  if (valueName == nil) {
    if (valueAsAttribute) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot write value as attribute without name");
    }
    else if (!keyAsAttribute) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot write value as text of entry, if key is also child element");
    }
  }
  if (keyAsAttribute && valueAsAttribute && [keyName isEqual:valueName]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot write key and value with same attribute name");
  }
}

ComThoughtworksXstreamConvertersExtendedNamedMapConverter *new_ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_(IOSClass *type, id<ComThoughtworksXstreamMapperMapper> mapper, NSString *entryName, NSString *keyName, IOSClass *keyType, NSString *valueName, IOSClass *valueType, jboolean keyAsAttribute, jboolean valueAsAttribute, id<ComThoughtworksXstreamConvertersConverterLookup> lookup) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamConvertersExtendedNamedMapConverter, initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_, type, mapper, entryName, keyName, keyType, valueName, valueType, keyAsAttribute, valueAsAttribute, lookup)
}

ComThoughtworksXstreamConvertersExtendedNamedMapConverter *create_ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_(IOSClass *type, id<ComThoughtworksXstreamMapperMapper> mapper, NSString *entryName, NSString *keyName, IOSClass *keyType, NSString *valueName, IOSClass *valueType, jboolean keyAsAttribute, jboolean valueAsAttribute, id<ComThoughtworksXstreamConvertersConverterLookup> lookup) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamConvertersExtendedNamedMapConverter, initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_, type, mapper, entryName, keyName, keyType, valueName, valueType, keyAsAttribute, valueAsAttribute, lookup)
}

id<ComThoughtworksXstreamConvertersSingleValueConverter> ComThoughtworksXstreamConvertersExtendedNamedMapConverter_getSingleValueConverterWithIOSClass_(ComThoughtworksXstreamConvertersExtendedNamedMapConverter *self, IOSClass *type) {
  id<ComThoughtworksXstreamConvertersSingleValueConverter> conv = ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper_isEnumWithIOSClass_(type) ? [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(self->enumMapper_)) getConverterFromItemTypeWithNSString:nil withIOSClass:type withIOSClass:nil] : [((id<ComThoughtworksXstreamMapperMapper>) nil_chk([self mapper])) getConverterFromItemTypeWithNSString:nil withIOSClass:type withIOSClass:nil];
  if (conv == nil) {
    id<ComThoughtworksXstreamConvertersConverter> converter = [((id<ComThoughtworksXstreamConvertersConverterLookup>) nil_chk(self->lookup_)) lookupConverterForTypeWithIOSClass:type];
    if ([ComThoughtworksXstreamConvertersSingleValueConverter_class_() isInstance:converter]) {
      conv = (id<ComThoughtworksXstreamConvertersSingleValueConverter>) cast_check(converter, ComThoughtworksXstreamConvertersSingleValueConverter_class_());
    }
    else {
      @throw create_ComThoughtworksXstreamConvertersConversionException_initWithNSString_(@"No SingleValueConverter for key available");
    }
  }
  return conv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersExtendedNamedMapConverter)
