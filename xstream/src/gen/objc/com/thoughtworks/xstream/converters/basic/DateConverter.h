//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/converters/basic/DateConverter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComThoughtworksXstreamConvertersBasicDateConverter")
#ifdef RESTRICT_ComThoughtworksXstreamConvertersBasicDateConverter
#define INCLUDE_ALL_ComThoughtworksXstreamConvertersBasicDateConverter 0
#else
#define INCLUDE_ALL_ComThoughtworksXstreamConvertersBasicDateConverter 1
#endif
#undef RESTRICT_ComThoughtworksXstreamConvertersBasicDateConverter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComThoughtworksXstreamConvertersBasicDateConverter_) && (INCLUDE_ALL_ComThoughtworksXstreamConvertersBasicDateConverter || defined(INCLUDE_ComThoughtworksXstreamConvertersBasicDateConverter))
#define ComThoughtworksXstreamConvertersBasicDateConverter_

#define RESTRICT_ComThoughtworksXstreamConvertersBasicAbstractSingleValueConverter 1
#define INCLUDE_ComThoughtworksXstreamConvertersBasicAbstractSingleValueConverter 1
#include "com/thoughtworks/xstream/converters/basic/AbstractSingleValueConverter.h"

#define RESTRICT_ComThoughtworksXstreamConvertersErrorReporter 1
#define INCLUDE_ComThoughtworksXstreamConvertersErrorReporter 1
#include "com/thoughtworks/xstream/converters/ErrorReporter.h"

@class IOSClass;
@class IOSObjectArray;
@class JavaUtilLocale;
@class JavaUtilTimeZone;
@protocol ComThoughtworksXstreamConvertersErrorWriter;

/*!
 @brief Converts a java.util.Date to a String as a date format, retaining precision down to
  milliseconds.
 <p>The formatted string is by default in UTC and English locale. You can provide
  a different <code>Locale</code> and <code>TimeZone</code> that are used for serialization or 
 <code>null</code> to use always the current TimeZone. Note, that the default format uses
  3-letter time zones that can be ambiguous and may cause wrong results at deserialization and
  is localized since Java 6.</p>
   
 <p>Dates in a different era are using a special default pattern that contains the era itself.</p>
 @author Joe Walnes
 @author J&ouml;rg Schaible
 */
@interface ComThoughtworksXstreamConvertersBasicDateConverter : ComThoughtworksXstreamConvertersBasicAbstractSingleValueConverter < ComThoughtworksXstreamConvertersErrorReporter >

#pragma mark Public

/*!
 @brief Construct a DateConverter with standard formats and lenient set off.
 */
- (instancetype __nonnull)init;

/*!
 @brief Construct a DateConverter with standard formats and using UTC.
 @param lenient the lenient setting of <code>SimpleDateFormat.setLenient(boolean)</code>
 @since 1.3
 */
- (instancetype __nonnull)initWithBoolean:(jboolean)lenient;

/*!
 @brief Construct a DateConverter.
 @param defaultEraFormat the default format for dates in a different era (may be             
  <code> null </code>  to drop era support)
 @param defaultFormat the default format
 @param acceptableFormats fallback formats
 @param locale locale to use for the format
 @param timeZone the TimeZone used to serialize the Date
 @param lenient the lenient setting of <code>SimpleDateFormat.setLenient(boolean)</code>
 @since 1.4.4
 */
- (instancetype __nonnull)initWithNSString:(NSString *)defaultEraFormat
                              withNSString:(NSString *)defaultFormat
                         withNSStringArray:(IOSObjectArray *)acceptableFormats
                        withJavaUtilLocale:(JavaUtilLocale *)locale
                      withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                               withBoolean:(jboolean)lenient;

/*!
 @brief Construct a DateConverter with lenient set off using UTC.
 @param defaultFormat the default format
 @param acceptableFormats fallback formats
 */
- (instancetype __nonnull)initWithNSString:(NSString *)defaultFormat
                         withNSStringArray:(IOSObjectArray *)acceptableFormats;

/*!
 @brief Construct a DateConverter.
 @param defaultFormat the default format
 @param acceptableFormats fallback formats
 @param lenient the lenient setting of <code>SimpleDateFormat.setLenient(boolean)</code>
 @since 1.3
 */
- (instancetype __nonnull)initWithNSString:(NSString *)defaultFormat
                         withNSStringArray:(IOSObjectArray *)acceptableFormats
                               withBoolean:(jboolean)lenient;

/*!
 @brief Construct a DateConverter with a given TimeZone and lenient set off.
 @param defaultFormat the default format
 @param acceptableFormats fallback formats
 @since 1.4
 */
- (instancetype __nonnull)initWithNSString:(NSString *)defaultFormat
                         withNSStringArray:(IOSObjectArray *)acceptableFormats
                      withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone;

/*!
 @brief Construct a DateConverter.
 @param defaultFormat the default format
 @param acceptableFormats fallback formats
 @param timeZone the TimeZone used to serialize the Date
 @param lenient the lenient setting of <code>SimpleDateFormat.setLenient(boolean)</code>
 @since 1.4
 */
- (instancetype __nonnull)initWithNSString:(NSString *)defaultFormat
                         withNSStringArray:(IOSObjectArray *)acceptableFormats
                      withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                               withBoolean:(jboolean)lenient;

/*!
 @brief Construct a DateConverter with standard formats, lenient set off and uses a given
  TimeZone for serialization.
 @param timeZone the TimeZone used to serialize the Date
 @since 1.4
 */
- (instancetype __nonnull)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone;

- (void)appendErrorsWithComThoughtworksXstreamConvertersErrorWriter:(id<ComThoughtworksXstreamConvertersErrorWriter>)errorWriter;

- (jboolean)canConvertWithIOSClass:(IOSClass *)type;

- (id)fromStringWithNSString:(NSString *)str;

- (NSString *)toStringWithId:(id)obj;

@end

J2OBJC_STATIC_INIT(ComThoughtworksXstreamConvertersBasicDateConverter)

FOUNDATION_EXPORT void ComThoughtworksXstreamConvertersBasicDateConverter_init(ComThoughtworksXstreamConvertersBasicDateConverter *self);

FOUNDATION_EXPORT ComThoughtworksXstreamConvertersBasicDateConverter *new_ComThoughtworksXstreamConvertersBasicDateConverter_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamConvertersBasicDateConverter *create_ComThoughtworksXstreamConvertersBasicDateConverter_init(void);

FOUNDATION_EXPORT void ComThoughtworksXstreamConvertersBasicDateConverter_initWithJavaUtilTimeZone_(ComThoughtworksXstreamConvertersBasicDateConverter *self, JavaUtilTimeZone *timeZone);

FOUNDATION_EXPORT ComThoughtworksXstreamConvertersBasicDateConverter *new_ComThoughtworksXstreamConvertersBasicDateConverter_initWithJavaUtilTimeZone_(JavaUtilTimeZone *timeZone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamConvertersBasicDateConverter *create_ComThoughtworksXstreamConvertersBasicDateConverter_initWithJavaUtilTimeZone_(JavaUtilTimeZone *timeZone);

FOUNDATION_EXPORT void ComThoughtworksXstreamConvertersBasicDateConverter_initWithBoolean_(ComThoughtworksXstreamConvertersBasicDateConverter *self, jboolean lenient);

FOUNDATION_EXPORT ComThoughtworksXstreamConvertersBasicDateConverter *new_ComThoughtworksXstreamConvertersBasicDateConverter_initWithBoolean_(jboolean lenient) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamConvertersBasicDateConverter *create_ComThoughtworksXstreamConvertersBasicDateConverter_initWithBoolean_(jboolean lenient);

FOUNDATION_EXPORT void ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_(ComThoughtworksXstreamConvertersBasicDateConverter *self, NSString *defaultFormat, IOSObjectArray *acceptableFormats);

FOUNDATION_EXPORT ComThoughtworksXstreamConvertersBasicDateConverter *new_ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_(NSString *defaultFormat, IOSObjectArray *acceptableFormats) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamConvertersBasicDateConverter *create_ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_(NSString *defaultFormat, IOSObjectArray *acceptableFormats);

FOUNDATION_EXPORT void ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_(ComThoughtworksXstreamConvertersBasicDateConverter *self, NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilTimeZone *timeZone);

FOUNDATION_EXPORT ComThoughtworksXstreamConvertersBasicDateConverter *new_ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_(NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilTimeZone *timeZone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamConvertersBasicDateConverter *create_ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_(NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilTimeZone *timeZone);

FOUNDATION_EXPORT void ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withBoolean_(ComThoughtworksXstreamConvertersBasicDateConverter *self, NSString *defaultFormat, IOSObjectArray *acceptableFormats, jboolean lenient);

FOUNDATION_EXPORT ComThoughtworksXstreamConvertersBasicDateConverter *new_ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withBoolean_(NSString *defaultFormat, IOSObjectArray *acceptableFormats, jboolean lenient) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamConvertersBasicDateConverter *create_ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withBoolean_(NSString *defaultFormat, IOSObjectArray *acceptableFormats, jboolean lenient);

FOUNDATION_EXPORT void ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_withBoolean_(ComThoughtworksXstreamConvertersBasicDateConverter *self, NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilTimeZone *timeZone, jboolean lenient);

FOUNDATION_EXPORT ComThoughtworksXstreamConvertersBasicDateConverter *new_ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_withBoolean_(NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilTimeZone *timeZone, jboolean lenient) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamConvertersBasicDateConverter *create_ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_withBoolean_(NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilTimeZone *timeZone, jboolean lenient);

FOUNDATION_EXPORT void ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSString_withNSStringArray_withJavaUtilLocale_withJavaUtilTimeZone_withBoolean_(ComThoughtworksXstreamConvertersBasicDateConverter *self, NSString *defaultEraFormat, NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilLocale *locale, JavaUtilTimeZone *timeZone, jboolean lenient);

FOUNDATION_EXPORT ComThoughtworksXstreamConvertersBasicDateConverter *new_ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSString_withNSStringArray_withJavaUtilLocale_withJavaUtilTimeZone_withBoolean_(NSString *defaultEraFormat, NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilLocale *locale, JavaUtilTimeZone *timeZone, jboolean lenient) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamConvertersBasicDateConverter *create_ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSString_withNSStringArray_withJavaUtilLocale_withJavaUtilTimeZone_withBoolean_(NSString *defaultEraFormat, NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilLocale *locale, JavaUtilTimeZone *timeZone, jboolean lenient);

J2OBJC_TYPE_LITERAL_HEADER(ComThoughtworksXstreamConvertersBasicDateConverter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComThoughtworksXstreamConvertersBasicDateConverter")
