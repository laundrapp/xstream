//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/converters/enums/EnumConverter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/MarshallingContext.h"
#include "com/thoughtworks/xstream/converters/UnmarshallingContext.h"
#include "com/thoughtworks/xstream/converters/enums/EnumConverter.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamWriter.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"

@implementation ComThoughtworksXstreamConvertersEnumsEnumConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComThoughtworksXstreamConvertersEnumsEnumConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  return [((IOSClass *) nil_chk(type)) isEnum] || [JavaLangEnum_class_() isAssignableFrom:type];
}

- (void)marshalWithId:(id)source
withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
withComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)context {
  [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) setValueWithNSString:[((JavaLangEnum *) nil_chk(((JavaLangEnum *) cast_chk(source, [JavaLangEnum class])))) name]];
}

- (id)unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
           withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context {
  IOSClass *type = [((id<ComThoughtworksXstreamConvertersUnmarshallingContext>) nil_chk(context)) getRequiredType];
  if ([((IOSClass *) nil_chk(type)) getSuperclass] != JavaLangEnum_class_()) {
    type = [type getSuperclass];
  }
  NSString *name = [((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) getValue];
  @try {
    return JavaLangEnum_valueOfWithIOSClass_withNSString_(type, name);
  }
  @catch (JavaLangIllegalArgumentException *e) {
    {
      IOSObjectArray *a__ = (IOSObjectArray *) cast_check([((IOSClass *) nil_chk(type)) getEnumConstants], IOSClass_arrayType(JavaLangEnum_class_(), 1));
      JavaLangEnum * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangEnum * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangEnum *c = *b__++;
        if ([((NSString *) nil_chk([((JavaLangEnum *) nil_chk(c)) name])) java_equalsIgnoreCase:name]) return c;
      }
    }
    @throw e;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(canConvertWithIOSClass:);
  methods[2].selector = @selector(marshalWithId:withComThoughtworksXstreamIoHierarchicalStreamWriter:withComThoughtworksXstreamConvertersMarshallingContext:);
  methods[3].selector = @selector(unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "canConvert", "LIOSClass;", "marshal", "LNSObject;LComThoughtworksXstreamIoHierarchicalStreamWriter;LComThoughtworksXstreamConvertersMarshallingContext;", "unmarshal", "LComThoughtworksXstreamIoHierarchicalStreamReader;LComThoughtworksXstreamConvertersUnmarshallingContext;" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersEnumsEnumConverter = { "EnumConverter", "com.thoughtworks.xstream.converters.enums", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamConvertersEnumsEnumConverter;
}

@end

void ComThoughtworksXstreamConvertersEnumsEnumConverter_init(ComThoughtworksXstreamConvertersEnumsEnumConverter *self) {
  NSObject_init(self);
}

ComThoughtworksXstreamConvertersEnumsEnumConverter *new_ComThoughtworksXstreamConvertersEnumsEnumConverter_init() {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamConvertersEnumsEnumConverter, init)
}

ComThoughtworksXstreamConvertersEnumsEnumConverter *create_ComThoughtworksXstreamConvertersEnumsEnumConverter_init() {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamConvertersEnumsEnumConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersEnumsEnumConverter)
