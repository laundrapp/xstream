//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/converters/collections/SingletonMapConverter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/UnmarshallingContext.h"
#include "com/thoughtworks/xstream/converters/collections/MapConverter.h"
#include "com/thoughtworks/xstream/converters/collections/SingletonMapConverter.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/lang/Boolean.h"
#include "java/util/Collections.h"
#include "java/util/Map.h"

inline IOSClass *ComThoughtworksXstreamConvertersCollectionsSingletonMapConverter_get_MAP(void);
static IOSClass *ComThoughtworksXstreamConvertersCollectionsSingletonMapConverter_MAP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComThoughtworksXstreamConvertersCollectionsSingletonMapConverter, MAP, IOSClass *)

J2OBJC_INITIALIZED_DEFN(ComThoughtworksXstreamConvertersCollectionsSingletonMapConverter)

@implementation ComThoughtworksXstreamConvertersCollectionsSingletonMapConverter

- (instancetype __nonnull)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper {
  ComThoughtworksXstreamConvertersCollectionsSingletonMapConverter_initWithComThoughtworksXstreamMapperMapper_(self, mapper);
  return self;
}

- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  return ComThoughtworksXstreamConvertersCollectionsSingletonMapConverter_MAP == type;
}

- (id)unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
           withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context {
  [((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) moveDown];
  [reader moveDown];
  id key = [self readItemWithComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersUnmarshallingContext:context withId:nil];
  [reader moveUp];
  [reader moveDown];
  id value = [self readItemWithComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersUnmarshallingContext:context withId:nil];
  [reader moveUp];
  [reader moveUp];
  return JavaUtilCollections_singletonMapWithId_withId_(key, value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComThoughtworksXstreamMapperMapper:);
  methods[1].selector = @selector(canConvertWithIOSClass:);
  methods[2].selector = @selector(unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAP", "LIOSClass;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "LComThoughtworksXstreamMapperMapper;", "canConvert", "LIOSClass;", "unmarshal", "LComThoughtworksXstreamIoHierarchicalStreamReader;LComThoughtworksXstreamConvertersUnmarshallingContext;", &ComThoughtworksXstreamConvertersCollectionsSingletonMapConverter_MAP };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersCollectionsSingletonMapConverter = { "SingletonMapConverter", "com.thoughtworks.xstream.converters.collections", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamConvertersCollectionsSingletonMapConverter;
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamConvertersCollectionsSingletonMapConverter class]) {
    JreStrongAssign(&ComThoughtworksXstreamConvertersCollectionsSingletonMapConverter_MAP, [((id<JavaUtilMap>) nil_chk(JavaUtilCollections_singletonMapWithId_withId_(JreLoadStatic(JavaLangBoolean, TRUE), nil))) java_getClass]);
    J2OBJC_SET_INITIALIZED(ComThoughtworksXstreamConvertersCollectionsSingletonMapConverter)
  }
}

@end

void ComThoughtworksXstreamConvertersCollectionsSingletonMapConverter_initWithComThoughtworksXstreamMapperMapper_(ComThoughtworksXstreamConvertersCollectionsSingletonMapConverter *self, id<ComThoughtworksXstreamMapperMapper> mapper) {
  ComThoughtworksXstreamConvertersCollectionsMapConverter_initWithComThoughtworksXstreamMapperMapper_(self, mapper);
}

ComThoughtworksXstreamConvertersCollectionsSingletonMapConverter *new_ComThoughtworksXstreamConvertersCollectionsSingletonMapConverter_initWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> mapper) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamConvertersCollectionsSingletonMapConverter, initWithComThoughtworksXstreamMapperMapper_, mapper)
}

ComThoughtworksXstreamConvertersCollectionsSingletonMapConverter *create_ComThoughtworksXstreamConvertersCollectionsSingletonMapConverter_initWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> mapper) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamConvertersCollectionsSingletonMapConverter, initWithComThoughtworksXstreamMapperMapper_, mapper)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersCollectionsSingletonMapConverter)
