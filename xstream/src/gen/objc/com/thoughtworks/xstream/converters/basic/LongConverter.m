//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/converters/basic/LongConverter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/basic/AbstractSingleValueConverter.h"
#include "com/thoughtworks/xstream/converters/basic/LongConverter.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"

@implementation ComThoughtworksXstreamConvertersBasicLongConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComThoughtworksXstreamConvertersBasicLongConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  return [((IOSClass *) nil_chk(type)) isEqual:[IOSClass longClass]] || [type isEqual:JavaLangLong_class_()];
}

- (id)fromStringWithNSString:(NSString *)str {
  jint len = [((NSString *) nil_chk(str)) java_length];
  if (len == 0) {
    @throw create_JavaLangNumberFormatException_initWithNSString_(@"For input string: \"\"");
  }
  if (len < 17) {
    return JavaLangLong_decodeWithNSString_(str);
  }
  jchar c0 = [str charAtWithInt:0];
  if (c0 != '0' && c0 != '#') {
    return JavaLangLong_decodeWithNSString_(str);
  }
  jchar c1 = [str charAtWithInt:1];
  jlong high;
  jlong low;
  if (c0 == '#' && len == 17) {
    high = JreLShift64(JavaLangLong_parseLongWithNSString_withInt_([str java_substring:1 endIndex:9], 16), 32);
    low = JavaLangLong_parseLongWithNSString_withInt_([str java_substring:9 endIndex:17], 16);
  }
  else if ((c1 == 'x' || c1 == 'X') && len == 18) {
    high = JreLShift64(JavaLangLong_parseLongWithNSString_withInt_([str java_substring:2 endIndex:10], 16), 32);
    low = JavaLangLong_parseLongWithNSString_withInt_([str java_substring:10 endIndex:18], 16);
  }
  else if (len == 23 && c1 == '1') {
    high = JreLShift64(JavaLangLong_parseLongWithNSString_withInt_([str java_substring:1 endIndex:12], 8), 33);
    low = JavaLangLong_parseLongWithNSString_withInt_([str java_substring:12 endIndex:23], 8);
  }
  else {
    return JavaLangLong_decodeWithNSString_(str);
  }
  jlong num = high | low;
  return create_JavaLangLong_initWithLong_(num);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(canConvertWithIOSClass:);
  methods[2].selector = @selector(fromStringWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "canConvert", "LIOSClass;", "fromString", "LNSString;" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersBasicLongConverter = { "LongConverter", "com.thoughtworks.xstream.converters.basic", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamConvertersBasicLongConverter;
}

@end

void ComThoughtworksXstreamConvertersBasicLongConverter_init(ComThoughtworksXstreamConvertersBasicLongConverter *self) {
  ComThoughtworksXstreamConvertersBasicAbstractSingleValueConverter_init(self);
}

ComThoughtworksXstreamConvertersBasicLongConverter *new_ComThoughtworksXstreamConvertersBasicLongConverter_init() {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamConvertersBasicLongConverter, init)
}

ComThoughtworksXstreamConvertersBasicLongConverter *create_ComThoughtworksXstreamConvertersBasicLongConverter_init() {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamConvertersBasicLongConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersBasicLongConverter)
