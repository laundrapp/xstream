//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/converters/reflection/AbstractAttributedCharacterIteratorAttributeConverter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/basic/AbstractSingleValueConverter.h"
#include "com/thoughtworks/xstream/converters/reflection/AbstractAttributedCharacterIteratorAttributeConverter.h"
#include "com/thoughtworks/xstream/converters/reflection/ObjectAccessException.h"
#include "com/thoughtworks/xstream/core/util/Fields.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NoClassDefFoundError.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "java/text/AttributedCharacterIterator.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter () {
 @public
  IOSClass *type_;
  id<JavaUtilMap> attributeMap_;
}

- (NSString *)getNameWithJavaTextAttributedCharacterIterator_Attribute:(JavaTextAttributedCharacterIterator_Attribute *)attribute;

- (id)readResolve;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter, type_, IOSClass *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter, attributeMap_, id<JavaUtilMap>)

inline id<JavaUtilMap> ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_get_instanceMaps(void);
static id<JavaUtilMap> ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_instanceMaps;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter, instanceMaps, id<JavaUtilMap>)

inline JavaLangReflectMethod *ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_get_getName(void);
static JavaLangReflectMethod *ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_getName;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter, getName, JavaLangReflectMethod *)

__attribute__((unused)) static NSString *ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_getNameWithJavaTextAttributedCharacterIterator_Attribute_(ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter *self, JavaTextAttributedCharacterIterator_Attribute *attribute);

__attribute__((unused)) static id ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_readResolve(ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter *self);

J2OBJC_INITIALIZED_DEFN(ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter)

@implementation ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)type {
  ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_initWithIOSClass_(self, type);
  return self;
}

- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  return type == self->type_ && ![((id<JavaUtilMap>) nil_chk(attributeMap_)) isEmpty];
}

- (NSString *)toStringWithId:(id)source {
  return ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_getNameWithJavaTextAttributedCharacterIterator_Attribute_(self, (JavaTextAttributedCharacterIterator_Attribute *) cast_chk(source, [JavaTextAttributedCharacterIterator_Attribute class]));
}

- (NSString *)getNameWithJavaTextAttributedCharacterIterator_Attribute:(JavaTextAttributedCharacterIterator_Attribute *)attribute {
  return ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_getNameWithJavaTextAttributedCharacterIterator_Attribute_(self, attribute);
}

- (id)fromStringWithNSString:(NSString *)str {
  if ([((id<JavaUtilMap>) nil_chk(attributeMap_)) containsKeyWithId:str]) {
    return [((id<JavaUtilMap>) nil_chk(attributeMap_)) getWithId:str];
  }
  @throw create_ComThoughtworksXstreamConvertersConversionException_initWithNSString_(JreStrcat("$$$$", @"Cannot find attribute of type ", [((IOSClass *) nil_chk(type_)) getName], @" with name ", str));
}

- (id)readResolve {
  return ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_readResolve(self);
}

- (void)dealloc {
  RELEASE_(type_);
  RELEASE_(attributeMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:);
  methods[1].selector = @selector(canConvertWithIOSClass:);
  methods[2].selector = @selector(toStringWithId:);
  methods[3].selector = @selector(getNameWithJavaTextAttributedCharacterIterator_Attribute:);
  methods[4].selector = @selector(fromStringWithNSString:);
  methods[5].selector = @selector(readResolve);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "instanceMaps", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "getName", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "type_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "attributeMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;", "canConvert", "toString", "LNSObject;", "getName", "LJavaTextAttributedCharacterIterator_Attribute;", "fromString", "LNSString;", &ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_instanceMaps, &ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_getName };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter = { "AbstractAttributedCharacterIteratorAttributeConverter", "com.thoughtworks.xstream.converters.reflection", ptrTable, methods, fields, 7, 0x1, 6, 4, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter;
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter class]) {
    JreStrongAssignAndConsume(&ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_instanceMaps, new_JavaUtilHashMap_init());
    {
      JavaLangReflectMethod *method = nil;
      @try {
        method = [JavaTextAttributedCharacterIterator_Attribute_class_() getDeclaredMethod:@"getName" parameterTypes:nil];
        if (![((JavaLangReflectMethod *) nil_chk(method)) isAccessible]) {
          [method setAccessibleWithBoolean:true];
        }
      }
      @catch (JavaLangSecurityException *e) {
      }
      @catch (JavaLangNoSuchMethodException *e) {
      }
      JreStrongAssign(&ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_getName, method);
    }
    J2OBJC_SET_INITIALIZED(ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter)
  }
}

@end

void ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_initWithIOSClass_(ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter *self, IOSClass *type) {
  ComThoughtworksXstreamConvertersBasicAbstractSingleValueConverter_init(self);
  if (![JavaTextAttributedCharacterIterator_Attribute_class_() isAssignableFrom:type]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", [((IOSClass *) nil_chk(type)) getName], @" is not a ", [JavaTextAttributedCharacterIterator_Attribute_class_() getName]));
  }
  JreStrongAssign(&self->type_, type);
  ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_readResolve(self);
}

ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter *new_ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_initWithIOSClass_(IOSClass *type) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter, initWithIOSClass_, type)
}

ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter *create_ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_initWithIOSClass_(IOSClass *type) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter, initWithIOSClass_, type)
}

NSString *ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_getNameWithJavaTextAttributedCharacterIterator_Attribute_(ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter *self, JavaTextAttributedCharacterIterator_Attribute *attribute) {
  JavaLangException *ex = nil;
  if (ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_getName != nil) {
    @try {
      return (NSString *) cast_chk([ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_getName invokeWithId:attribute withNSObjectArray:nil], [NSString class]);
    }
    @catch (JavaLangIllegalAccessException *e) {
      ex = e;
    }
    @catch (JavaLangReflectInvocationTargetException *e) {
      ex = e;
    }
  }
  NSString *s = [((JavaTextAttributedCharacterIterator_Attribute *) nil_chk(attribute)) description];
  NSString *className_ = [[attribute java_getClass] getName];
  if ([((NSString *) nil_chk(s)) java_hasPrefix:className_]) {
    return [s java_substring:[((NSString *) nil_chk(className_)) java_length] + 1 endIndex:[s java_length] - 1];
  }
  @throw create_ComThoughtworksXstreamConvertersConversionException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Cannot find name of attribute of type ", className_), ex);
}

id ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_readResolve(ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter *self) {
  JreStrongAssign(&self->attributeMap_, (id<JavaUtilMap>) cast_check([((id<JavaUtilMap>) nil_chk(ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_instanceMaps)) getWithId:[((IOSClass *) nil_chk(self->type_)) getName]], JavaUtilMap_class_()));
  if (self->attributeMap_ == nil) {
    JreStrongAssignAndConsume(&self->attributeMap_, new_JavaUtilHashMap_init());
    JavaLangReflectField *instanceMap = ComThoughtworksXstreamCoreUtilFields_locateWithIOSClass_withIOSClass_withBoolean_(self->type_, JavaUtilMap_class_(), true);
    if (instanceMap != nil) {
      @try {
        id<JavaUtilMap> map = (id<JavaUtilMap>) cast_check(ComThoughtworksXstreamCoreUtilFields_readWithJavaLangReflectField_withId_(instanceMap, nil), JavaUtilMap_class_());
        if (map != nil) {
          jboolean valid = true;
          for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([map entrySet])) iterator]; valid && [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
            id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) cast_check([((id<JavaUtilIterator>) nil_chk(iter)) next], JavaUtilMap_Entry_class_());
            valid = ([nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]) java_getClass] == NSString_class_() && [nil_chk([entry_ getValue]) java_getClass] == self->type_);
          }
          if (valid) {
            [((id<JavaUtilMap>) nil_chk(self->attributeMap_)) putAllWithJavaUtilMap:map];
          }
        }
      }
      @catch (ComThoughtworksXstreamConvertersReflectionObjectAccessException *e) {
      }
    }
    if ([((id<JavaUtilMap>) nil_chk(self->attributeMap_)) isEmpty]) {
      @try {
        IOSObjectArray *fields = [self->type_ getDeclaredFields];
        for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; ++i) {
          if ([((JavaLangReflectField *) nil_chk(IOSObjectArray_Get(fields, i))) getType] == self->type_ == JavaLangReflectModifier_isStaticWithInt_([((JavaLangReflectField *) nil_chk(IOSObjectArray_Get(fields, i))) getModifiers])) {
            JavaTextAttributedCharacterIterator_Attribute *attribute = (JavaTextAttributedCharacterIterator_Attribute *) cast_chk(ComThoughtworksXstreamCoreUtilFields_readWithJavaLangReflectField_withId_(IOSObjectArray_Get(fields, i), nil), [JavaTextAttributedCharacterIterator_Attribute class]);
            [((id<JavaUtilMap>) nil_chk(self->attributeMap_)) putWithId:[self toStringWithId:attribute] withId:attribute];
          }
        }
      }
      @catch (JavaLangSecurityException *e) {
        [((id<JavaUtilMap>) nil_chk(self->attributeMap_)) clear];
      }
      @catch (ComThoughtworksXstreamConvertersReflectionObjectAccessException *e) {
        [((id<JavaUtilMap>) nil_chk(self->attributeMap_)) clear];
      }
      @catch (JavaLangNoClassDefFoundError *e) {
        [((id<JavaUtilMap>) nil_chk(self->attributeMap_)) clear];
      }
    }
    [ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter_instanceMaps putWithId:[self->type_ getName] withId:self->attributeMap_];
  }
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersReflectionAbstractAttributedCharacterIteratorAttributeConverter)
