//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/converters/reflection/FieldKey.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/reflection/FieldKey.h"
#include "java/lang/IllegalArgumentException.h"

@interface ComThoughtworksXstreamConvertersReflectionFieldKey () {
 @public
  NSString *fieldName_;
  IOSClass *declaringClass_;
  jint depth_;
  jint order_;
}

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersReflectionFieldKey, fieldName_, NSString *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersReflectionFieldKey, declaringClass_, IOSClass *)

@implementation ComThoughtworksXstreamConvertersReflectionFieldKey

- (instancetype __nonnull)initWithNSString:(NSString *)fieldName
                              withIOSClass:(IOSClass *)declaringClass
                                   withInt:(jint)order {
  ComThoughtworksXstreamConvertersReflectionFieldKey_initWithNSString_withIOSClass_withInt_(self, fieldName, declaringClass, order);
  return self;
}

- (NSString *)getFieldName {
  return self->fieldName_;
}

- (IOSClass *)getDeclaringClass {
  return self->declaringClass_;
}

- (jint)getDepth {
  return self->depth_;
}

- (jint)getOrder {
  return self->order_;
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (!([o isKindOfClass:[ComThoughtworksXstreamConvertersReflectionFieldKey class]])) return false;
  ComThoughtworksXstreamConvertersReflectionFieldKey *fieldKey = (ComThoughtworksXstreamConvertersReflectionFieldKey *) cast_chk(o, [ComThoughtworksXstreamConvertersReflectionFieldKey class]);
  if (![((IOSClass *) nil_chk(declaringClass_)) isEqual:((ComThoughtworksXstreamConvertersReflectionFieldKey *) nil_chk(fieldKey))->declaringClass_]) return false;
  if (![((NSString *) nil_chk(fieldName_)) isEqual:fieldKey->fieldName_]) return false;
  return true;
}

- (NSUInteger)hash {
  jint result;
  result = ((jint) [((NSString *) nil_chk(fieldName_)) hash]);
  result = 29 * result + ((jint) [((IOSClass *) nil_chk(declaringClass_)) hash]);
  return result;
}

- (NSString *)description {
  return JreStrcat("$I$I$@$$$", @"FieldKey{order=", order_, @", writer=", depth_, @", declaringClass=", declaringClass_, @", fieldName='", fieldName_, @"'}");
}

- (void)dealloc {
  RELEASE_(fieldName_);
  RELEASE_(declaringClass_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withIOSClass:withInt:);
  methods[1].selector = @selector(getFieldName);
  methods[2].selector = @selector(getDeclaringClass);
  methods[3].selector = @selector(getDepth);
  methods[4].selector = @selector(getOrder);
  methods[5].selector = @selector(isEqual:);
  methods[6].selector = @selector(hash);
  methods[7].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fieldName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "declaringClass_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "depth_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "order_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LIOSClass;I", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersReflectionFieldKey = { "FieldKey", "com.thoughtworks.xstream.converters.reflection", ptrTable, methods, fields, 7, 0x1, 8, 4, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamConvertersReflectionFieldKey;
}

@end

void ComThoughtworksXstreamConvertersReflectionFieldKey_initWithNSString_withIOSClass_withInt_(ComThoughtworksXstreamConvertersReflectionFieldKey *self, NSString *fieldName, IOSClass *declaringClass, jint order) {
  NSObject_init(self);
  if (fieldName == nil || declaringClass == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"fieldName or declaringClass is null");
  }
  JreStrongAssign(&self->fieldName_, fieldName);
  JreStrongAssign(&self->declaringClass_, declaringClass);
  self->order_ = order;
  IOSClass *c = declaringClass;
  jint i = 0;
  while ([((IOSClass *) nil_chk(c)) getSuperclass] != nil) {
    i++;
    c = [c getSuperclass];
  }
  self->depth_ = i;
}

ComThoughtworksXstreamConvertersReflectionFieldKey *new_ComThoughtworksXstreamConvertersReflectionFieldKey_initWithNSString_withIOSClass_withInt_(NSString *fieldName, IOSClass *declaringClass, jint order) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamConvertersReflectionFieldKey, initWithNSString_withIOSClass_withInt_, fieldName, declaringClass, order)
}

ComThoughtworksXstreamConvertersReflectionFieldKey *create_ComThoughtworksXstreamConvertersReflectionFieldKey_initWithNSString_withIOSClass_withInt_(NSString *fieldName, IOSClass *declaringClass, jint order) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamConvertersReflectionFieldKey, initWithNSString_withIOSClass_withInt_, fieldName, declaringClass, order)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersReflectionFieldKey)
