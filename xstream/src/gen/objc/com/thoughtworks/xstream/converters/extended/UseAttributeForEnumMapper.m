//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/converters/extended/UseAttributeForEnumMapper.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/SingleValueConverter.h"
#include "com/thoughtworks/xstream/converters/extended/UseAttributeForEnumMapper.h"
#include "com/thoughtworks/xstream/core/util/DependencyInjectionFactory.h"
#include "com/thoughtworks/xstream/mapper/AttributeMapper.h"
#include "com/thoughtworks/xstream/mapper/DefaultMapper.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Exception.h"

@implementation ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper

- (instancetype __nonnull)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped {
  ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper_initWithComThoughtworksXstreamMapperMapper_(self, wrapped);
  return self;
}

+ (jboolean)isEnumWithIOSClass:(IOSClass *)type {
  return ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper_isEnumWithIOSClass_(type);
}

- (jboolean)shouldLookForSingleValueConverterWithNSString:(NSString *)fieldName
                                             withIOSClass:(IOSClass *)type
                                             withIOSClass:(IOSClass *)definedIn {
  return ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper_isEnumWithIOSClass_(type);
}

- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getConverterFromItemTypeWithNSString:(NSString *)fieldName
                                                                                    withIOSClass:(IOSClass *)type
                                                                                    withIOSClass:(IOSClass *)definedIn {
  return nil;
}

- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getConverterFromAttributeWithIOSClass:(IOSClass *)definedIn
                                                                                     withNSString:(NSString *)attribute
                                                                                     withIOSClass:(IOSClass *)type {
  return nil;
}

+ (id<ComThoughtworksXstreamMapperMapper>)createEnumMapperWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper {
  return ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper_createEnumMapperWithComThoughtworksXstreamMapperMapper_(mapper);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LComThoughtworksXstreamConvertersSingleValueConverter;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LComThoughtworksXstreamConvertersSingleValueConverter;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LComThoughtworksXstreamMapperMapper;", 0x8, 8, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComThoughtworksXstreamMapperMapper:);
  methods[1].selector = @selector(isEnumWithIOSClass:);
  methods[2].selector = @selector(shouldLookForSingleValueConverterWithNSString:withIOSClass:withIOSClass:);
  methods[3].selector = @selector(getConverterFromItemTypeWithNSString:withIOSClass:withIOSClass:);
  methods[4].selector = @selector(getConverterFromAttributeWithIOSClass:withNSString:withIOSClass:);
  methods[5].selector = @selector(createEnumMapperWithComThoughtworksXstreamMapperMapper:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComThoughtworksXstreamMapperMapper;", "isEnum", "LIOSClass;", "shouldLookForSingleValueConverter", "LNSString;LIOSClass;LIOSClass;", "getConverterFromItemType", "getConverterFromAttribute", "LIOSClass;LNSString;LIOSClass;", "createEnumMapper" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper = { "UseAttributeForEnumMapper", "com.thoughtworks.xstream.converters.extended", ptrTable, methods, NULL, 7, 0x0, 6, 0, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper;
}

@end

void ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper_initWithComThoughtworksXstreamMapperMapper_(ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper *self, id<ComThoughtworksXstreamMapperMapper> wrapped) {
  ComThoughtworksXstreamMapperAttributeMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamConvertersReflectionReflectionProvider_(self, wrapped, nil, nil);
}

ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper *new_ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper_initWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> wrapped) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper, initWithComThoughtworksXstreamMapperMapper_, wrapped)
}

ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper *create_ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper_initWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> wrapped) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper, initWithComThoughtworksXstreamMapperMapper_, wrapped)
}

jboolean ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper_isEnumWithIOSClass_(IOSClass *type) {
  ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper_initialize();
  while (type != nil && type != NSObject_class_()) {
    if ([((NSString *) nil_chk([type getName])) isEqual:@"java.lang.Enum"]) {
      return true;
    }
    type = [type getSuperclass];
  }
  return false;
}

id<ComThoughtworksXstreamMapperMapper> ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper_createEnumMapperWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> mapper) {
  ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper_initialize();
  @try {
    IOSClass *enumMapperClass = IOSClass_forName_initialize_classLoader_(@"com.thoughtworks.xstream.mapper.EnumMapper", true, [ComThoughtworksXstreamMapperMapper_class_() getClassLoader]);
    return (id<ComThoughtworksXstreamMapperMapper>) cast_check(ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_newInstanceWithIOSClass_withNSObjectArray_(enumMapperClass, [IOSObjectArray arrayWithObjects:(id[]){ create_ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper_initWithComThoughtworksXstreamMapperMapper_([((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper)) lookupMapperOfTypeWithIOSClass:ComThoughtworksXstreamMapperDefaultMapper_class_()]) } count:1 type:NSObject_class_()]), ComThoughtworksXstreamMapperMapper_class_());
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper)
