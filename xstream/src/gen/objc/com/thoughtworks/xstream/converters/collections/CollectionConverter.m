//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/converters/collections/CollectionConverter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/MarshallingContext.h"
#include "com/thoughtworks/xstream/converters/UnmarshallingContext.h"
#include "com/thoughtworks/xstream/converters/collections/AbstractCollectionConverter.h"
#include "com/thoughtworks/xstream/converters/collections/CollectionConverter.h"
#include "com/thoughtworks/xstream/core/JVM.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamWriter.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/Vector.h"

@interface ComThoughtworksXstreamConvertersCollectionsCollectionConverter () {
 @public
  IOSClass *type_;
}

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersCollectionsCollectionConverter, type_, IOSClass *)

@implementation ComThoughtworksXstreamConvertersCollectionsCollectionConverter

- (instancetype __nonnull)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper {
  ComThoughtworksXstreamConvertersCollectionsCollectionConverter_initWithComThoughtworksXstreamMapperMapper_(self, mapper);
  return self;
}

- (instancetype __nonnull)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
                                                        withIOSClass:(IOSClass *)type {
  ComThoughtworksXstreamConvertersCollectionsCollectionConverter_initWithComThoughtworksXstreamMapperMapper_withIOSClass_(self, mapper, type);
  return self;
}

- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  if (self->type_ != nil) {
    return [((IOSClass *) nil_chk(type)) isEqual:self->type_];
  }
  return [((IOSClass *) nil_chk(type)) isEqual:JavaUtilArrayList_class_()] || [type isEqual:JavaUtilHashSet_class_()] || [type isEqual:JavaUtilLinkedList_class_()] || [type isEqual:JavaUtilVector_class_()] || (ComThoughtworksXstreamCoreJVM_is14() && [((NSString *) nil_chk([type getName])) isEqual:@"java.util.LinkedHashSet"]);
}

- (void)marshalWithId:(id)source
withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
withComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)context {
  id<JavaUtilCollection> collection = (id<JavaUtilCollection>) cast_check(source, JavaUtilCollection_class_());
  for (id<JavaUtilIterator> iterator = [((id<JavaUtilCollection>) nil_chk(collection)) iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
    id item = [iterator next];
    [self writeItemWithId:item withComThoughtworksXstreamConvertersMarshallingContext:context withComThoughtworksXstreamIoHierarchicalStreamWriter:writer];
  }
}

- (id)unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
           withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context {
  id<JavaUtilCollection> collection = (id<JavaUtilCollection>) cast_check([self createCollectionWithIOSClass:[((id<ComThoughtworksXstreamConvertersUnmarshallingContext>) nil_chk(context)) getRequiredType]], JavaUtilCollection_class_());
  [self populateCollectionWithComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersUnmarshallingContext:context withJavaUtilCollection:collection];
  return collection;
}

- (void)populateCollectionWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
                      withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context
                                                        withJavaUtilCollection:(id<JavaUtilCollection>)collection {
  [self populateCollectionWithComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersUnmarshallingContext:context withJavaUtilCollection:collection withJavaUtilCollection:collection];
}

- (void)populateCollectionWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
                      withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context
                                                        withJavaUtilCollection:(id<JavaUtilCollection>)collection
                                                        withJavaUtilCollection:(id<JavaUtilCollection>)target {
  while ([((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) hasMoreChildren]) {
    [reader moveDown];
    [self addCurrentElementToCollectionWithComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersUnmarshallingContext:context withJavaUtilCollection:collection withJavaUtilCollection:target];
    [reader moveUp];
  }
}

- (void)addCurrentElementToCollectionWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
                                 withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context
                                                                   withJavaUtilCollection:(id<JavaUtilCollection>)collection
                                                                   withJavaUtilCollection:(id<JavaUtilCollection>)target {
  id item = [self readItemWithComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersUnmarshallingContext:context withId:collection];
  [((id<JavaUtilCollection>) nil_chk(target)) addWithId:item];
}

- (id)createCollectionWithIOSClass:(IOSClass *)type {
  return [super createCollectionWithIOSClass:self->type_ != nil ? self->type_ : type];
}

- (void)dealloc {
  RELEASE_(type_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 8, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 12, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComThoughtworksXstreamMapperMapper:);
  methods[1].selector = @selector(initWithComThoughtworksXstreamMapperMapper:withIOSClass:);
  methods[2].selector = @selector(canConvertWithIOSClass:);
  methods[3].selector = @selector(marshalWithId:withComThoughtworksXstreamIoHierarchicalStreamWriter:withComThoughtworksXstreamConvertersMarshallingContext:);
  methods[4].selector = @selector(unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:);
  methods[5].selector = @selector(populateCollectionWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:withJavaUtilCollection:);
  methods[6].selector = @selector(populateCollectionWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:withJavaUtilCollection:withJavaUtilCollection:);
  methods[7].selector = @selector(addCurrentElementToCollectionWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:withJavaUtilCollection:withJavaUtilCollection:);
  methods[8].selector = @selector(createCollectionWithIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComThoughtworksXstreamMapperMapper;", "LComThoughtworksXstreamMapperMapper;LIOSClass;", "canConvert", "LIOSClass;", "marshal", "LNSObject;LComThoughtworksXstreamIoHierarchicalStreamWriter;LComThoughtworksXstreamConvertersMarshallingContext;", "unmarshal", "LComThoughtworksXstreamIoHierarchicalStreamReader;LComThoughtworksXstreamConvertersUnmarshallingContext;", "populateCollection", "LComThoughtworksXstreamIoHierarchicalStreamReader;LComThoughtworksXstreamConvertersUnmarshallingContext;LJavaUtilCollection;", "LComThoughtworksXstreamIoHierarchicalStreamReader;LComThoughtworksXstreamConvertersUnmarshallingContext;LJavaUtilCollection;LJavaUtilCollection;", "addCurrentElementToCollection", "createCollection" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersCollectionsCollectionConverter = { "CollectionConverter", "com.thoughtworks.xstream.converters.collections", ptrTable, methods, fields, 7, 0x1, 9, 1, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamConvertersCollectionsCollectionConverter;
}

@end

void ComThoughtworksXstreamConvertersCollectionsCollectionConverter_initWithComThoughtworksXstreamMapperMapper_(ComThoughtworksXstreamConvertersCollectionsCollectionConverter *self, id<ComThoughtworksXstreamMapperMapper> mapper) {
  ComThoughtworksXstreamConvertersCollectionsCollectionConverter_initWithComThoughtworksXstreamMapperMapper_withIOSClass_(self, mapper, nil);
}

ComThoughtworksXstreamConvertersCollectionsCollectionConverter *new_ComThoughtworksXstreamConvertersCollectionsCollectionConverter_initWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> mapper) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamConvertersCollectionsCollectionConverter, initWithComThoughtworksXstreamMapperMapper_, mapper)
}

ComThoughtworksXstreamConvertersCollectionsCollectionConverter *create_ComThoughtworksXstreamConvertersCollectionsCollectionConverter_initWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> mapper) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamConvertersCollectionsCollectionConverter, initWithComThoughtworksXstreamMapperMapper_, mapper)
}

void ComThoughtworksXstreamConvertersCollectionsCollectionConverter_initWithComThoughtworksXstreamMapperMapper_withIOSClass_(ComThoughtworksXstreamConvertersCollectionsCollectionConverter *self, id<ComThoughtworksXstreamMapperMapper> mapper, IOSClass *type) {
  ComThoughtworksXstreamConvertersCollectionsAbstractCollectionConverter_initWithComThoughtworksXstreamMapperMapper_(self, mapper);
  JreStrongAssign(&self->type_, type);
  if (type != nil && ![JavaUtilCollection_class_() isAssignableFrom:type]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("@$@", type, @" not of type ", JavaUtilCollection_class_()));
  }
}

ComThoughtworksXstreamConvertersCollectionsCollectionConverter *new_ComThoughtworksXstreamConvertersCollectionsCollectionConverter_initWithComThoughtworksXstreamMapperMapper_withIOSClass_(id<ComThoughtworksXstreamMapperMapper> mapper, IOSClass *type) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamConvertersCollectionsCollectionConverter, initWithComThoughtworksXstreamMapperMapper_withIOSClass_, mapper, type)
}

ComThoughtworksXstreamConvertersCollectionsCollectionConverter *create_ComThoughtworksXstreamConvertersCollectionsCollectionConverter_initWithComThoughtworksXstreamMapperMapper_withIOSClass_(id<ComThoughtworksXstreamMapperMapper> mapper, IOSClass *type) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamConvertersCollectionsCollectionConverter, initWithComThoughtworksXstreamMapperMapper_withIOSClass_, mapper, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersCollectionsCollectionConverter)
