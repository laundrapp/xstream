//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/converters/extended/ISO8601GregorianCalendarConverter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/basic/AbstractSingleValueConverter.h"
#include "com/thoughtworks/xstream/converters/extended/ISO8601GregorianCalendarConverter.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Calendar.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/TimeZone.h"
#include "org/joda/time/DateTime.h"
#include "org/joda/time/DateTimeZone.h"
#include "org/joda/time/format/DateTimeFormatter.h"
#include "org/joda/time/format/ISODateTimeFormat.h"

inline IOSObjectArray *ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter_get_formattersUTC(void);
static IOSObjectArray *ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter_formattersUTC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter, formattersUTC, IOSObjectArray *)

inline IOSObjectArray *ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter_get_formattersNoUTC(void);
static IOSObjectArray *ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter_formattersNoUTC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter, formattersNoUTC, IOSObjectArray *)

J2OBJC_INITIALIZED_DEFN(ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter)

@implementation ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  return [((IOSClass *) nil_chk(type)) isEqual:JavaUtilGregorianCalendar_class_()];
}

- (id)fromStringWithNSString:(NSString *)str {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter_formattersUTC))->size_; i++) {
    OrgJodaTimeFormatDateTimeFormatter *formatter = IOSObjectArray_Get(ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter_formattersUTC, i);
    @try {
      OrgJodaTimeDateTime *dt = [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(formatter)) parseDateTimeWithNSString:str];
      JavaUtilCalendar *calendar = [((OrgJodaTimeDateTime *) nil_chk(dt)) toGregorianCalendar];
      [((JavaUtilCalendar *) nil_chk(calendar)) setTimeZoneWithJavaUtilTimeZone:JavaUtilTimeZone_getDefault()];
      return calendar;
    }
    @catch (JavaLangIllegalArgumentException *e) {
    }
  }
  NSString *timeZoneID = [((JavaUtilTimeZone *) nil_chk(JavaUtilTimeZone_getDefault())) getID];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter_formattersNoUTC))->size_; i++) {
    @try {
      OrgJodaTimeFormatDateTimeFormatter *formatter = [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(IOSObjectArray_Get(ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter_formattersNoUTC, i))) withZoneWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_forIDWithNSString_(timeZoneID)];
      OrgJodaTimeDateTime *dt = [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(formatter)) parseDateTimeWithNSString:str];
      JavaUtilCalendar *calendar = [((OrgJodaTimeDateTime *) nil_chk(dt)) toGregorianCalendar];
      [((JavaUtilCalendar *) nil_chk(calendar)) setTimeZoneWithJavaUtilTimeZone:JavaUtilTimeZone_getDefault()];
      return calendar;
    }
    @catch (JavaLangIllegalArgumentException *e) {
    }
  }
  @throw create_ComThoughtworksXstreamConvertersConversionException_initWithNSString_(JreStrcat("$$", @"Cannot parse date ", str));
}

- (NSString *)toStringWithId:(id)obj {
  OrgJodaTimeDateTime *dt = create_OrgJodaTimeDateTime_initWithId_(obj);
  return [dt toStringWithOrgJodaTimeFormatDateTimeFormatter:IOSObjectArray_Get(nil_chk(ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter_formattersUTC), 0)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(canConvertWithIOSClass:);
  methods[2].selector = @selector(fromStringWithNSString:);
  methods[3].selector = @selector(toStringWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "formattersUTC", "[LOrgJodaTimeFormatDateTimeFormatter;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "formattersNoUTC", "[LOrgJodaTimeFormatDateTimeFormatter;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "canConvert", "LIOSClass;", "fromString", "LNSString;", "toString", "LNSObject;", &ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter_formattersUTC, &ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter_formattersNoUTC };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter = { "ISO8601GregorianCalendarConverter", "com.thoughtworks.xstream.converters.extended", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter;
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter class]) {
    JreStrongAssignAndConsume(&ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter_formattersUTC, [IOSObjectArray newArrayWithObjects:(id[]){ OrgJodaTimeFormatISODateTimeFormat_dateTime(), OrgJodaTimeFormatISODateTimeFormat_dateTimeNoMillis(), OrgJodaTimeFormatISODateTimeFormat_basicDateTime(), OrgJodaTimeFormatISODateTimeFormat_basicOrdinalDateTime(), OrgJodaTimeFormatISODateTimeFormat_basicOrdinalDateTimeNoMillis(), OrgJodaTimeFormatISODateTimeFormat_basicTime(), OrgJodaTimeFormatISODateTimeFormat_basicTimeNoMillis(), OrgJodaTimeFormatISODateTimeFormat_basicTTime(), OrgJodaTimeFormatISODateTimeFormat_basicTTimeNoMillis(), OrgJodaTimeFormatISODateTimeFormat_basicWeekDateTime(), OrgJodaTimeFormatISODateTimeFormat_basicWeekDateTimeNoMillis(), OrgJodaTimeFormatISODateTimeFormat_ordinalDateTime(), OrgJodaTimeFormatISODateTimeFormat_ordinalDateTimeNoMillis(), OrgJodaTimeFormatISODateTimeFormat_time(), OrgJodaTimeFormatISODateTimeFormat_timeNoMillis(), OrgJodaTimeFormatISODateTimeFormat_tTime(), OrgJodaTimeFormatISODateTimeFormat_tTimeNoMillis(), OrgJodaTimeFormatISODateTimeFormat_weekDateTime(), OrgJodaTimeFormatISODateTimeFormat_weekDateTimeNoMillis() } count:19 type:OrgJodaTimeFormatDateTimeFormatter_class_()]);
    JreStrongAssignAndConsume(&ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter_formattersNoUTC, [IOSObjectArray newArrayWithObjects:(id[]){ OrgJodaTimeFormatISODateTimeFormat_basicDate(), OrgJodaTimeFormatISODateTimeFormat_basicOrdinalDate(), OrgJodaTimeFormatISODateTimeFormat_basicWeekDate(), OrgJodaTimeFormatISODateTimeFormat_date(), OrgJodaTimeFormatISODateTimeFormat_dateHour(), OrgJodaTimeFormatISODateTimeFormat_dateHourMinute(), OrgJodaTimeFormatISODateTimeFormat_dateHourMinuteSecond(), OrgJodaTimeFormatISODateTimeFormat_dateHourMinuteSecondFraction(), OrgJodaTimeFormatISODateTimeFormat_dateHourMinuteSecondMillis(), OrgJodaTimeFormatISODateTimeFormat_hour(), OrgJodaTimeFormatISODateTimeFormat_hourMinute(), OrgJodaTimeFormatISODateTimeFormat_hourMinuteSecond(), OrgJodaTimeFormatISODateTimeFormat_hourMinuteSecondFraction(), OrgJodaTimeFormatISODateTimeFormat_hourMinuteSecondMillis(), OrgJodaTimeFormatISODateTimeFormat_ordinalDate(), OrgJodaTimeFormatISODateTimeFormat_weekDate(), OrgJodaTimeFormatISODateTimeFormat_year(), OrgJodaTimeFormatISODateTimeFormat_yearMonth(), OrgJodaTimeFormatISODateTimeFormat_yearMonthDay(), OrgJodaTimeFormatISODateTimeFormat_weekyear(), OrgJodaTimeFormatISODateTimeFormat_weekyearWeek(), OrgJodaTimeFormatISODateTimeFormat_weekyearWeekDay() } count:22 type:OrgJodaTimeFormatDateTimeFormatter_class_()]);
    J2OBJC_SET_INITIALIZED(ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter)
  }
}

@end

void ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter_init(ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter *self) {
  ComThoughtworksXstreamConvertersBasicAbstractSingleValueConverter_init(self);
}

ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter *new_ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter_init() {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter, init)
}

ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter *create_ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter_init() {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersExtendedISO8601GregorianCalendarConverter)
