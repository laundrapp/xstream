//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/converters/reflection/SunLimitedUnsafeReflectionProvider.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/reflection/FieldDictionary.h"
#include "com/thoughtworks/xstream/converters/reflection/ObjectAccessException.h"
#include "com/thoughtworks/xstream/converters/reflection/PureJavaReflectionProvider.h"
#include "com/thoughtworks/xstream/converters/reflection/SunLimitedUnsafeReflectionProvider.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NoSuchFieldException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/reflect/Field.h"
#include "sun/misc/Unsafe.h"

@interface ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider ()

- (id)readResolve;

@end

__attribute__((unused)) static id ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider_readResolve(ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider *self);

J2OBJC_INITIALIZED_DEFN(ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider)

SunMiscUnsafe *ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider_unsafe;
JavaLangException *ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider_exception;

@implementation ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithComThoughtworksXstreamConvertersReflectionFieldDictionary:(ComThoughtworksXstreamConvertersReflectionFieldDictionary *)fieldDictionary {
  ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider_initWithComThoughtworksXstreamConvertersReflectionFieldDictionary_(self, fieldDictionary);
  return self;
}

- (id)newInstanceWithIOSClass:(IOSClass *)type {
  if (ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider_exception != nil) {
    @throw create_ComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Cannot construct ", [((IOSClass *) nil_chk(type)) getName]), ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider_exception);
  }
  @try {
    return [((SunMiscUnsafe *) nil_chk(ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider_unsafe)) allocateInstanceWithIOSClass:type];
  }
  @catch (JavaLangException *e) {
    @throw create_ComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Cannot construct ", [((IOSClass *) nil_chk(type)) getName]), e);
  }
}

- (void)validateFieldAccessWithJavaLangReflectField:(JavaLangReflectField *)field {
}

- (id)readResolve {
  return ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider_readResolve(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithComThoughtworksXstreamConvertersReflectionFieldDictionary:);
  methods[2].selector = @selector(newInstanceWithIOSClass:);
  methods[3].selector = @selector(validateFieldAccessWithJavaLangReflectField:);
  methods[4].selector = @selector(readResolve);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "unsafe", "LSunMiscUnsafe;", .constantValue.asLong = 0, 0x1c, -1, 5, -1, -1 },
    { "exception", "LJavaLangException;", .constantValue.asLong = 0, 0x1c, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "LComThoughtworksXstreamConvertersReflectionFieldDictionary;", "newInstance", "LIOSClass;", "validateFieldAccess", "LJavaLangReflectField;", &ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider_unsafe, &ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider_exception };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider = { "SunLimitedUnsafeReflectionProvider", "com.thoughtworks.xstream.converters.reflection", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider;
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider class]) {
    {
      SunMiscUnsafe *u = nil;
      JavaLangException *ex = nil;
      @try {
        JavaLangReflectField *unsafeField = [SunMiscUnsafe_class_() getDeclaredField:@"theUnsafe"];
        [((JavaLangReflectField *) nil_chk(unsafeField)) setAccessibleWithBoolean:true];
        u = (SunMiscUnsafe *) cast_chk([unsafeField getWithId:nil], [SunMiscUnsafe class]);
      }
      @catch (JavaLangSecurityException *e) {
        ex = e;
      }
      @catch (JavaLangNoSuchFieldException *e) {
        ex = e;
      }
      @catch (JavaLangIllegalArgumentException *e) {
        ex = e;
      }
      @catch (JavaLangIllegalAccessException *e) {
        ex = e;
      }
      JreStrongAssign(&ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider_exception, ex);
      JreStrongAssign(&ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider_unsafe, u);
    }
    J2OBJC_SET_INITIALIZED(ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider)
  }
}

@end

void ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider_init(ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider *self) {
  ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider_init(self);
}

ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider *new_ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider_init() {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider, init)
}

ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider *create_ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider_init() {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider, init)
}

void ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider_initWithComThoughtworksXstreamConvertersReflectionFieldDictionary_(ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider *self, ComThoughtworksXstreamConvertersReflectionFieldDictionary *fieldDictionary) {
  ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider_initWithComThoughtworksXstreamConvertersReflectionFieldDictionary_(self, fieldDictionary);
}

ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider *new_ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider_initWithComThoughtworksXstreamConvertersReflectionFieldDictionary_(ComThoughtworksXstreamConvertersReflectionFieldDictionary *fieldDictionary) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider, initWithComThoughtworksXstreamConvertersReflectionFieldDictionary_, fieldDictionary)
}

ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider *create_ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider_initWithComThoughtworksXstreamConvertersReflectionFieldDictionary_(ComThoughtworksXstreamConvertersReflectionFieldDictionary *fieldDictionary) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider, initWithComThoughtworksXstreamConvertersReflectionFieldDictionary_, fieldDictionary)
}

id ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider_readResolve(ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider *self) {
  [self init__];
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersReflectionSunLimitedUnsafeReflectionProvider)
