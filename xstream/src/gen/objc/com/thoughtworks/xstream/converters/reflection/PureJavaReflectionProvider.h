//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/converters/reflection/PureJavaReflectionProvider.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider")
#ifdef RESTRICT_ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider
#define INCLUDE_ALL_ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider 0
#else
#define INCLUDE_ALL_ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider 1
#endif
#undef RESTRICT_ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider_) && (INCLUDE_ALL_ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider || defined(INCLUDE_ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider))
#define ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider_

#define RESTRICT_ComThoughtworksXstreamConvertersReflectionReflectionProvider 1
#define INCLUDE_ComThoughtworksXstreamConvertersReflectionReflectionProvider 1
#include "com/thoughtworks/xstream/converters/reflection/ReflectionProvider.h"

@class ComThoughtworksXstreamConvertersReflectionFieldDictionary;
@class IOSClass;
@class JavaLangReflectField;
@protocol ComThoughtworksXstreamConvertersReflectionReflectionProvider_Visitor;

/*!
 @brief Pure Java ObjectFactory that instantiates objects using standard Java reflection, however the types of objects
  that can be constructed are limited.
 <p>
  Can newInstance: classes with public visibility, outer classes, static inner classes, classes with default constructors
  and any class that implements java.io.Serializable. 
 </p>
  <p>
  Cannot newInstance: classes without public visibility, non-static inner classes, classes without default constructors.
  Note that any code in the constructor of a class will be executed when the ObjectFactory instantiates the object. 
 </p>
 @author Joe Walnes
 */
@interface ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider : NSObject < ComThoughtworksXstreamConvertersReflectionReflectionProvider > {
 @public
  ComThoughtworksXstreamConvertersReflectionFieldDictionary *fieldDictionary_;
}

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithComThoughtworksXstreamConvertersReflectionFieldDictionary:(ComThoughtworksXstreamConvertersReflectionFieldDictionary *)fieldDictionary;

/*!
 */
- (jboolean)fieldDefinedInClassWithNSString:(NSString *)fieldName
                               withIOSClass:(IOSClass *)type;

- (JavaLangReflectField *)getFieldWithIOSClass:(IOSClass *)definedIn
                                  withNSString:(NSString *)fieldName;

- (JavaLangReflectField *)getFieldOrNullWithIOSClass:(IOSClass *)definedIn
                                        withNSString:(NSString *)fieldName;

- (IOSClass *)getFieldTypeWithId:(id)object
                    withNSString:(NSString *)fieldName
                    withIOSClass:(IOSClass *)definedIn;

- (id)newInstanceWithIOSClass:(IOSClass *)type OBJC_METHOD_FAMILY_NONE;

- (void)setFieldDictionaryWithComThoughtworksXstreamConvertersReflectionFieldDictionary:(ComThoughtworksXstreamConvertersReflectionFieldDictionary *)dictionary;

- (void)visitSerializableFieldsWithId:(id)object
withComThoughtworksXstreamConvertersReflectionReflectionProvider_Visitor:(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider_Visitor>)visitor;

- (void)writeFieldWithId:(id)object
            withNSString:(NSString *)fieldName
                  withId:(id)value
            withIOSClass:(IOSClass *)definedIn;

#pragma mark Protected

- (jboolean)fieldModifiersSupportedWithJavaLangReflectField:(JavaLangReflectField *)field;

- (void)init__ OBJC_METHOD_FAMILY_NONE;

- (void)validateFieldAccessWithJavaLangReflectField:(JavaLangReflectField *)field;

@end

J2OBJC_EMPTY_STATIC_INIT(ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider)

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider, fieldDictionary_, ComThoughtworksXstreamConvertersReflectionFieldDictionary *)

FOUNDATION_EXPORT void ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider_init(ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider *self);

FOUNDATION_EXPORT ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider *new_ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider *create_ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider_init(void);

FOUNDATION_EXPORT void ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider_initWithComThoughtworksXstreamConvertersReflectionFieldDictionary_(ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider *self, ComThoughtworksXstreamConvertersReflectionFieldDictionary *fieldDictionary);

FOUNDATION_EXPORT ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider *new_ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider_initWithComThoughtworksXstreamConvertersReflectionFieldDictionary_(ComThoughtworksXstreamConvertersReflectionFieldDictionary *fieldDictionary) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider *create_ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider_initWithComThoughtworksXstreamConvertersReflectionFieldDictionary_(ComThoughtworksXstreamConvertersReflectionFieldDictionary *fieldDictionary);

J2OBJC_TYPE_LITERAL_HEADER(ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider")
