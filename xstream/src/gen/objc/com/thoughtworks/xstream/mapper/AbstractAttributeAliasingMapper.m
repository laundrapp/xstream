//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/mapper/AbstractAttributeAliasingMapper.java
//

#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/mapper/AbstractAttributeAliasingMapper.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "com/thoughtworks/xstream/mapper/MapperWrapper.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface ComThoughtworksXstreamMapperAbstractAttributeAliasingMapper ()

- (id)readResolve;

@end

__attribute__((unused)) static id ComThoughtworksXstreamMapperAbstractAttributeAliasingMapper_readResolve(ComThoughtworksXstreamMapperAbstractAttributeAliasingMapper *self);

@implementation ComThoughtworksXstreamMapperAbstractAttributeAliasingMapper

- (instancetype __nonnull)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped {
  ComThoughtworksXstreamMapperAbstractAttributeAliasingMapper_initWithComThoughtworksXstreamMapperMapper_(self, wrapped);
  return self;
}

- (void)addAliasForWithNSString:(NSString *)attributeName
                   withNSString:(NSString *)alias {
  [((id<JavaUtilMap>) nil_chk(aliasToName_)) putWithId:alias withId:attributeName];
  [((id<JavaUtilMap>) nil_chk(nameToAlias_)) putWithId:attributeName withId:alias];
}

- (id)readResolve {
  return ComThoughtworksXstreamMapperAbstractAttributeAliasingMapper_readResolve(self);
}

- (void)dealloc {
  RELEASE_(aliasToName_);
  RELEASE_(nameToAlias_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComThoughtworksXstreamMapperMapper:);
  methods[1].selector = @selector(addAliasForWithNSString:withNSString:);
  methods[2].selector = @selector(readResolve);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "aliasToName_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "nameToAlias_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComThoughtworksXstreamMapperMapper;", "addAliasFor", "LNSString;LNSString;" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperAbstractAttributeAliasingMapper = { "AbstractAttributeAliasingMapper", "com.thoughtworks.xstream.mapper", ptrTable, methods, fields, 7, 0x401, 3, 2, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamMapperAbstractAttributeAliasingMapper;
}

@end

void ComThoughtworksXstreamMapperAbstractAttributeAliasingMapper_initWithComThoughtworksXstreamMapperMapper_(ComThoughtworksXstreamMapperAbstractAttributeAliasingMapper *self, id<ComThoughtworksXstreamMapperMapper> wrapped) {
  ComThoughtworksXstreamMapperMapperWrapper_initWithComThoughtworksXstreamMapperMapper_(self, wrapped);
  JreStrongAssignAndConsume(&self->aliasToName_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->nameToAlias_, new_JavaUtilHashMap_init());
}

id ComThoughtworksXstreamMapperAbstractAttributeAliasingMapper_readResolve(ComThoughtworksXstreamMapperAbstractAttributeAliasingMapper *self) {
  JreStrongAssignAndConsume(&self->nameToAlias_, new_JavaUtilHashMap_init());
  for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(self->aliasToName_)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    id alias = [iter next];
    [((id<JavaUtilMap>) nil_chk(self->nameToAlias_)) putWithId:[self->aliasToName_ getWithId:alias] withId:alias];
  }
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamMapperAbstractAttributeAliasingMapper)
