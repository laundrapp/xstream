//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/mapper/ArrayMapper.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/core/util/Primitives.h"
#include "com/thoughtworks/xstream/mapper/ArrayMapper.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "com/thoughtworks/xstream/mapper/MapperWrapper.h"
#include "java/lang/StringBuffer.h"

@interface ComThoughtworksXstreamMapperArrayMapper ()

- (NSString *)arrayTypeWithInt:(jint)dimensions
                  withIOSClass:(IOSClass *)componentType;

- (NSString *)boxedTypeNameWithIOSClass:(IOSClass *)type;

@end

__attribute__((unused)) static NSString *ComThoughtworksXstreamMapperArrayMapper_arrayTypeWithInt_withIOSClass_(ComThoughtworksXstreamMapperArrayMapper *self, jint dimensions, IOSClass *componentType);

__attribute__((unused)) static NSString *ComThoughtworksXstreamMapperArrayMapper_boxedTypeNameWithIOSClass_(ComThoughtworksXstreamMapperArrayMapper *self, IOSClass *type);

@implementation ComThoughtworksXstreamMapperArrayMapper

- (instancetype __nonnull)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped {
  ComThoughtworksXstreamMapperArrayMapper_initWithComThoughtworksXstreamMapperMapper_(self, wrapped);
  return self;
}

- (NSString *)serializedClassWithIOSClass:(IOSClass *)type {
  JavaLangStringBuffer *arraySuffix = create_JavaLangStringBuffer_init();
  NSString *name = nil;
  while ([((IOSClass *) nil_chk(type)) isArray]) {
    name = [super serializedClassWithIOSClass:type];
    if ([((NSString *) nil_chk([type getName])) isEqual:name]) {
      type = [type getComponentType];
      [arraySuffix appendWithNSString:@"-array"];
      name = nil;
    }
    else {
      break;
    }
  }
  if (name == nil) {
    name = ComThoughtworksXstreamMapperArrayMapper_boxedTypeNameWithIOSClass_(self, type);
  }
  if (name == nil) {
    name = [super serializedClassWithIOSClass:type];
  }
  if ([arraySuffix java_length] > 0) {
    return JreStrcat("$@", name, arraySuffix);
  }
  else {
    return name;
  }
}

- (IOSClass *)realClassWithNSString:(NSString *)elementName {
  jint dimensions = 0;
  while ([((NSString *) nil_chk(elementName)) java_hasSuffix:@"-array"]) {
    elementName = [elementName java_substring:0 endIndex:[elementName java_length] - 6];
    ++dimensions;
  }
  if (dimensions > 0) {
    IOSClass *componentType = ComThoughtworksXstreamCoreUtilPrimitives_primitiveTypeWithNSString_(elementName);
    if (componentType == nil) {
      componentType = [super realClassWithNSString:elementName];
    }
    while ([((IOSClass *) nil_chk(componentType)) isArray]) {
      componentType = [componentType getComponentType];
      ++dimensions;
    }
    return [super realClassWithNSString:ComThoughtworksXstreamMapperArrayMapper_arrayTypeWithInt_withIOSClass_(self, dimensions, componentType)];
  }
  else {
    return [super realClassWithNSString:elementName];
  }
}

- (NSString *)arrayTypeWithInt:(jint)dimensions
                  withIOSClass:(IOSClass *)componentType {
  return ComThoughtworksXstreamMapperArrayMapper_arrayTypeWithInt_withIOSClass_(self, dimensions, componentType);
}

- (NSString *)boxedTypeNameWithIOSClass:(IOSClass *)type {
  return ComThoughtworksXstreamMapperArrayMapper_boxedTypeNameWithIOSClass_(self, type);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 7, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComThoughtworksXstreamMapperMapper:);
  methods[1].selector = @selector(serializedClassWithIOSClass:);
  methods[2].selector = @selector(realClassWithNSString:);
  methods[3].selector = @selector(arrayTypeWithInt:withIOSClass:);
  methods[4].selector = @selector(boxedTypeNameWithIOSClass:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComThoughtworksXstreamMapperMapper;", "serializedClass", "LIOSClass;", "realClass", "LNSString;", "arrayType", "ILIOSClass;", "boxedTypeName" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperArrayMapper = { "ArrayMapper", "com.thoughtworks.xstream.mapper", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamMapperArrayMapper;
}

@end

void ComThoughtworksXstreamMapperArrayMapper_initWithComThoughtworksXstreamMapperMapper_(ComThoughtworksXstreamMapperArrayMapper *self, id<ComThoughtworksXstreamMapperMapper> wrapped) {
  ComThoughtworksXstreamMapperMapperWrapper_initWithComThoughtworksXstreamMapperMapper_(self, wrapped);
}

ComThoughtworksXstreamMapperArrayMapper *new_ComThoughtworksXstreamMapperArrayMapper_initWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> wrapped) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamMapperArrayMapper, initWithComThoughtworksXstreamMapperMapper_, wrapped)
}

ComThoughtworksXstreamMapperArrayMapper *create_ComThoughtworksXstreamMapperArrayMapper_initWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> wrapped) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamMapperArrayMapper, initWithComThoughtworksXstreamMapperMapper_, wrapped)
}

NSString *ComThoughtworksXstreamMapperArrayMapper_arrayTypeWithInt_withIOSClass_(ComThoughtworksXstreamMapperArrayMapper *self, jint dimensions, IOSClass *componentType) {
  JavaLangStringBuffer *className_ = create_JavaLangStringBuffer_init();
  for (jint i = 0; i < dimensions; i++) {
    [className_ appendWithChar:'['];
  }
  if ([((IOSClass *) nil_chk(componentType)) isPrimitive]) {
    [className_ appendWithChar:ComThoughtworksXstreamCoreUtilPrimitives_representingCharWithIOSClass_(componentType)];
    return [className_ description];
  }
  else {
    [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([className_ appendWithChar:'L'])) appendWithNSString:[componentType getName]])) appendWithChar:';'];
    return [className_ description];
  }
}

NSString *ComThoughtworksXstreamMapperArrayMapper_boxedTypeNameWithIOSClass_(ComThoughtworksXstreamMapperArrayMapper *self, IOSClass *type) {
  return ComThoughtworksXstreamCoreUtilPrimitives_isBoxedWithIOSClass_(type) ? [((IOSClass *) nil_chk(type)) getName] : nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamMapperArrayMapper)
