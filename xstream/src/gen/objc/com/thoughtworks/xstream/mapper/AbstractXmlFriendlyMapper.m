//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/mapper/AbstractXmlFriendlyMapper.java
//

#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/mapper/AbstractXmlFriendlyMapper.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "com/thoughtworks/xstream/mapper/MapperWrapper.h"
#include "java/lang/StringBuffer.h"

@interface ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper () {
 @public
  jchar dollarReplacementInClass_;
  NSString *dollarReplacementInField_;
  NSString *underscoreReplacementInField_;
  NSString *noPackagePrefix_;
}

- (jboolean)stringFoundAtWithNSString:(NSString *)name
                              withInt:(jint)i
                         withNSString:(NSString *)replacement;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper, dollarReplacementInField_, NSString *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper, underscoreReplacementInField_, NSString *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper, noPackagePrefix_, NSString *)

__attribute__((unused)) static jboolean ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper_stringFoundAtWithNSString_withInt_withNSString_(ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper *self, NSString *name, jint i, NSString *replacement);

@implementation ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper

- (instancetype __nonnull)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped {
  ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper_initWithComThoughtworksXstreamMapperMapper_(self, wrapped);
  return self;
}

- (NSString *)escapeClassNameWithNSString:(NSString *)className_ {
  className_ = [((NSString *) nil_chk(className_)) java_replace:'$' withChar:dollarReplacementInClass_];
  if ([((NSString *) nil_chk(className_)) charAtWithInt:0] == dollarReplacementInClass_) {
    className_ = JreStrcat("$$", noPackagePrefix_, className_);
  }
  return className_;
}

- (NSString *)unescapeClassNameWithNSString:(NSString *)className_ {
  if ([((NSString *) nil_chk(className_)) java_hasPrefix:JreStrcat("$C", noPackagePrefix_, dollarReplacementInClass_)]) {
    className_ = [className_ java_substring:[((NSString *) nil_chk(noPackagePrefix_)) java_length]];
  }
  className_ = [((NSString *) nil_chk(className_)) java_replace:dollarReplacementInClass_ withChar:'$'];
  return className_;
}

- (NSString *)escapeFieldNameWithNSString:(NSString *)fieldName {
  JavaLangStringBuffer *result = create_JavaLangStringBuffer_init();
  jint length = [((NSString *) nil_chk(fieldName)) java_length];
  for (jint i = 0; i < length; i++) {
    jchar c = [fieldName charAtWithInt:i];
    if (c == '$') {
      [result appendWithNSString:dollarReplacementInField_];
    }
    else if (c == '_') {
      [result appendWithNSString:underscoreReplacementInField_];
    }
    else {
      [result appendWithChar:c];
    }
  }
  return [result description];
}

- (NSString *)unescapeFieldNameWithNSString:(NSString *)xmlName {
  JavaLangStringBuffer *result = create_JavaLangStringBuffer_init();
  jint length = [((NSString *) nil_chk(xmlName)) java_length];
  for (jint i = 0; i < length; i++) {
    jchar c = [xmlName charAtWithInt:i];
    if (ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper_stringFoundAtWithNSString_withInt_withNSString_(self, xmlName, i, underscoreReplacementInField_)) {
      i += [((NSString *) nil_chk(underscoreReplacementInField_)) java_length] - 1;
      [result appendWithChar:'_'];
    }
    else if (ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper_stringFoundAtWithNSString_withInt_withNSString_(self, xmlName, i, dollarReplacementInField_)) {
      i += [((NSString *) nil_chk(dollarReplacementInField_)) java_length] - 1;
      [result appendWithChar:'$'];
    }
    else {
      [result appendWithChar:c];
    }
  }
  return [result description];
}

- (jboolean)stringFoundAtWithNSString:(NSString *)name
                              withInt:(jint)i
                         withNSString:(NSString *)replacement {
  return ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper_stringFoundAtWithNSString_withInt_withNSString_(self, name, i, replacement);
}

- (void)dealloc {
  RELEASE_(dollarReplacementInField_);
  RELEASE_(underscoreReplacementInField_);
  RELEASE_(noPackagePrefix_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 4, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 5, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComThoughtworksXstreamMapperMapper:);
  methods[1].selector = @selector(escapeClassNameWithNSString:);
  methods[2].selector = @selector(unescapeClassNameWithNSString:);
  methods[3].selector = @selector(escapeFieldNameWithNSString:);
  methods[4].selector = @selector(unescapeFieldNameWithNSString:);
  methods[5].selector = @selector(stringFoundAtWithNSString:withInt:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "dollarReplacementInClass_", "C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dollarReplacementInField_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "underscoreReplacementInField_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "noPackagePrefix_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComThoughtworksXstreamMapperMapper;", "escapeClassName", "LNSString;", "unescapeClassName", "escapeFieldName", "unescapeFieldName", "stringFoundAt", "LNSString;ILNSString;" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper = { "AbstractXmlFriendlyMapper", "com.thoughtworks.xstream.mapper", ptrTable, methods, fields, 7, 0x1, 6, 4, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper;
}

@end

void ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper_initWithComThoughtworksXstreamMapperMapper_(ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper *self, id<ComThoughtworksXstreamMapperMapper> wrapped) {
  ComThoughtworksXstreamMapperMapperWrapper_initWithComThoughtworksXstreamMapperMapper_(self, wrapped);
  self->dollarReplacementInClass_ = '-';
  JreStrongAssign(&self->dollarReplacementInField_, @"_DOLLAR_");
  JreStrongAssign(&self->underscoreReplacementInField_, @"__");
  JreStrongAssign(&self->noPackagePrefix_, @"default");
}

ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper *new_ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper_initWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> wrapped) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper, initWithComThoughtworksXstreamMapperMapper_, wrapped)
}

ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper *create_ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper_initWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> wrapped) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper, initWithComThoughtworksXstreamMapperMapper_, wrapped)
}

jboolean ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper_stringFoundAtWithNSString_withInt_withNSString_(ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper *self, NSString *name, jint i, NSString *replacement) {
  if ([((NSString *) nil_chk(name)) java_length] >= i + [((NSString *) nil_chk(replacement)) java_length] && [((NSString *) nil_chk([name java_substring:i endIndex:i + [replacement java_length]])) isEqual:replacement]) {
    return true;
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamMapperAbstractXmlFriendlyMapper)
