//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/mapper/EnumMapper.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/ConverterLookup.h"
#include "com/thoughtworks/xstream/converters/SingleValueConverter.h"
#include "com/thoughtworks/xstream/converters/enums/EnumSingleValueConverter.h"
#include "com/thoughtworks/xstream/mapper/AttributeMapper.h"
#include "com/thoughtworks/xstream/mapper/EnumMapper.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "com/thoughtworks/xstream/mapper/MapperWrapper.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Enum.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/EnumSet.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

static id (*ComThoughtworksXstreamMapperEnumMapper_super$_getConverterFromItemTypeWithNSString_withIOSClass_withIOSClass_)(id, SEL, id, id, id);

@interface ComThoughtworksXstreamMapperEnumMapper () {
 @public
  ComThoughtworksXstreamMapperAttributeMapper *attributeMapper_;
  id<JavaUtilMap> enumConverterMap_;
}

- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getLocalConverterWithNSString:(NSString *)fieldName
                                                                             withIOSClass:(IOSClass *)type
                                                                             withIOSClass:(IOSClass *)definedIn;

- (id)readResolve;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperEnumMapper, attributeMapper_, ComThoughtworksXstreamMapperAttributeMapper *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperEnumMapper, enumConverterMap_, id<JavaUtilMap>)

__attribute__((unused)) static id<ComThoughtworksXstreamConvertersSingleValueConverter> ComThoughtworksXstreamMapperEnumMapper_getLocalConverterWithNSString_withIOSClass_withIOSClass_(ComThoughtworksXstreamMapperEnumMapper *self, NSString *fieldName, IOSClass *type, IOSClass *definedIn);

__attribute__((unused)) static id ComThoughtworksXstreamMapperEnumMapper_readResolve(ComThoughtworksXstreamMapperEnumMapper *self);

__attribute__((unused)) static IOSObjectArray *ComThoughtworksXstreamMapperEnumMapper__Annotations$0(void);

J2OBJC_INITIALIZED_DEFN(ComThoughtworksXstreamMapperEnumMapper)

@implementation ComThoughtworksXstreamMapperEnumMapper

- (instancetype __nonnull)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped
                 withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)lookup {
  ComThoughtworksXstreamMapperEnumMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_(self, wrapped, lookup);
  return self;
}

- (instancetype __nonnull)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped {
  ComThoughtworksXstreamMapperEnumMapper_initWithComThoughtworksXstreamMapperMapper_(self, wrapped);
  return self;
}

- (NSString *)serializedClassWithIOSClass:(IOSClass *)type {
  if (type == nil) {
    return [super serializedClassWithIOSClass:type];
  }
  if ([JavaLangEnum_class_() isAssignableFrom:type] && [type getSuperclass] != JavaLangEnum_class_()) {
    return [super serializedClassWithIOSClass:[type getSuperclass]];
  }
  else if ([JavaUtilEnumSet_class_() isAssignableFrom:type]) {
    return [super serializedClassWithIOSClass:JavaUtilEnumSet_class_()];
  }
  else {
    return [super serializedClassWithIOSClass:type];
  }
}

- (jboolean)isImmutableValueTypeWithIOSClass:(IOSClass *)type {
  return ([JavaLangEnum_class_() isAssignableFrom:type]) || [super isImmutableValueTypeWithIOSClass:type];
}

- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getConverterFromItemTypeWithNSString:(NSString *)fieldName
                                                                                    withIOSClass:(IOSClass *)type
                                                                                    withIOSClass:(IOSClass *)definedIn {
  id<ComThoughtworksXstreamConvertersSingleValueConverter> converter = ComThoughtworksXstreamMapperEnumMapper_getLocalConverterWithNSString_withIOSClass_withIOSClass_(self, fieldName, type, definedIn);
  return converter == nil ? [super getConverterFromItemTypeWithNSString:fieldName withIOSClass:type withIOSClass:definedIn] : converter;
}

- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getConverterFromAttributeWithIOSClass:(IOSClass *)definedIn
                                                                                     withNSString:(NSString *)attribute
                                                                                     withIOSClass:(IOSClass *)type {
  id<ComThoughtworksXstreamConvertersSingleValueConverter> converter = ComThoughtworksXstreamMapperEnumMapper_getLocalConverterWithNSString_withIOSClass_withIOSClass_(self, attribute, type, definedIn);
  return converter == nil ? [super getConverterFromAttributeWithIOSClass:definedIn withNSString:attribute withIOSClass:type] : converter;
}

- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getLocalConverterWithNSString:(NSString *)fieldName
                                                                             withIOSClass:(IOSClass *)type
                                                                             withIOSClass:(IOSClass *)definedIn {
  return ComThoughtworksXstreamMapperEnumMapper_getLocalConverterWithNSString_withIOSClass_withIOSClass_(self, fieldName, type, definedIn);
}

- (void)flushCache {
  if ([((id<JavaUtilMap>) nil_chk(enumConverterMap_)) size] > 0) {
    @synchronized(enumConverterMap_) {
      [((id<JavaUtilMap>) nil_chk(enumConverterMap_)) clear];
    }
  }
}

- (id)readResolve {
  return ComThoughtworksXstreamMapperEnumMapper_readResolve(self);
}

- (void)dealloc {
  RELEASE_(attributeMapper_);
  RELEASE_(enumConverterMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, 1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LComThoughtworksXstreamConvertersSingleValueConverter;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LComThoughtworksXstreamConvertersSingleValueConverter;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LComThoughtworksXstreamConvertersSingleValueConverter;", 0x2, 10, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComThoughtworksXstreamMapperMapper:withComThoughtworksXstreamConvertersConverterLookup:);
  methods[1].selector = @selector(initWithComThoughtworksXstreamMapperMapper:);
  methods[2].selector = @selector(serializedClassWithIOSClass:);
  methods[3].selector = @selector(isImmutableValueTypeWithIOSClass:);
  methods[4].selector = @selector(getConverterFromItemTypeWithNSString:withIOSClass:withIOSClass:);
  methods[5].selector = @selector(getConverterFromAttributeWithIOSClass:withNSString:withIOSClass:);
  methods[6].selector = @selector(getLocalConverterWithNSString:withIOSClass:withIOSClass:);
  methods[7].selector = @selector(flushCache);
  methods[8].selector = @selector(readResolve);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "attributeMapper_", "LComThoughtworksXstreamMapperAttributeMapper;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "enumConverterMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x82, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LComThoughtworksXstreamMapperMapper;LComThoughtworksXstreamConvertersConverterLookup;", (void *)&ComThoughtworksXstreamMapperEnumMapper__Annotations$0, "LComThoughtworksXstreamMapperMapper;", "serializedClass", "LIOSClass;", "isImmutableValueType", "getConverterFromItemType", "LNSString;LIOSClass;LIOSClass;", "getConverterFromAttribute", "LIOSClass;LNSString;LIOSClass;", "getLocalConverter", "Ljava/util/Map<Ljava/lang/Class;Lcom/thoughtworks/xstream/converters/SingleValueConverter;>;" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperEnumMapper = { "EnumMapper", "com.thoughtworks.xstream.mapper", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamMapperEnumMapper;
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamMapperEnumMapper class]) {
    ComThoughtworksXstreamMapperEnumMapper_super$_getConverterFromItemTypeWithNSString_withIOSClass_withIOSClass_ = (id (*)(id, SEL, id, id, id))[ComThoughtworksXstreamMapperMapperWrapper instanceMethodForSelector:@selector(getConverterFromItemTypeWithNSString:withIOSClass:withIOSClass:)];
    J2OBJC_SET_INITIALIZED(ComThoughtworksXstreamMapperEnumMapper)
  }
}

@end

void ComThoughtworksXstreamMapperEnumMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_(ComThoughtworksXstreamMapperEnumMapper *self, id<ComThoughtworksXstreamMapperMapper> wrapped, id<ComThoughtworksXstreamConvertersConverterLookup> lookup) {
  ComThoughtworksXstreamMapperMapperWrapper_initWithComThoughtworksXstreamMapperMapper_(self, wrapped);
  ComThoughtworksXstreamMapperEnumMapper_readResolve(self);
}

ComThoughtworksXstreamMapperEnumMapper *new_ComThoughtworksXstreamMapperEnumMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_(id<ComThoughtworksXstreamMapperMapper> wrapped, id<ComThoughtworksXstreamConvertersConverterLookup> lookup) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamMapperEnumMapper, initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_, wrapped, lookup)
}

ComThoughtworksXstreamMapperEnumMapper *create_ComThoughtworksXstreamMapperEnumMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_(id<ComThoughtworksXstreamMapperMapper> wrapped, id<ComThoughtworksXstreamConvertersConverterLookup> lookup) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamMapperEnumMapper, initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_, wrapped, lookup)
}

void ComThoughtworksXstreamMapperEnumMapper_initWithComThoughtworksXstreamMapperMapper_(ComThoughtworksXstreamMapperEnumMapper *self, id<ComThoughtworksXstreamMapperMapper> wrapped) {
  ComThoughtworksXstreamMapperMapperWrapper_initWithComThoughtworksXstreamMapperMapper_(self, wrapped);
  ComThoughtworksXstreamMapperEnumMapper_readResolve(self);
}

ComThoughtworksXstreamMapperEnumMapper *new_ComThoughtworksXstreamMapperEnumMapper_initWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> wrapped) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamMapperEnumMapper, initWithComThoughtworksXstreamMapperMapper_, wrapped)
}

ComThoughtworksXstreamMapperEnumMapper *create_ComThoughtworksXstreamMapperEnumMapper_initWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> wrapped) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamMapperEnumMapper, initWithComThoughtworksXstreamMapperMapper_, wrapped)
}

id<ComThoughtworksXstreamConvertersSingleValueConverter> ComThoughtworksXstreamMapperEnumMapper_getLocalConverterWithNSString_withIOSClass_withIOSClass_(ComThoughtworksXstreamMapperEnumMapper *self, NSString *fieldName, IOSClass *type, IOSClass *definedIn) {
  if (self->attributeMapper_ != nil && [JavaLangEnum_class_() isAssignableFrom:type] && [((ComThoughtworksXstreamMapperAttributeMapper *) nil_chk(self->attributeMapper_)) shouldLookForSingleValueConverterWithNSString:fieldName withIOSClass:type withIOSClass:definedIn]) {
    @synchronized(self->enumConverterMap_) {
      id<ComThoughtworksXstreamConvertersSingleValueConverter> singleValueConverter = [((id<JavaUtilMap>) nil_chk(self->enumConverterMap_)) getWithId:type];
      if (singleValueConverter == nil) {
        singleValueConverter = ComThoughtworksXstreamMapperEnumMapper_super$_getConverterFromItemTypeWithNSString_withIOSClass_withIOSClass_(self, @selector(getConverterFromItemTypeWithNSString:withIOSClass:withIOSClass:), fieldName, type, definedIn);
        if (singleValueConverter == nil) {
          IOSClass *enumType = type;
          singleValueConverter = create_ComThoughtworksXstreamConvertersEnumsEnumSingleValueConverter_initWithIOSClass_(enumType);
        }
        [((id<JavaUtilMap>) nil_chk(self->enumConverterMap_)) putWithId:type withId:singleValueConverter];
      }
      return JreRetainedLocalValue(singleValueConverter);
    }
  }
  return nil;
}

id ComThoughtworksXstreamMapperEnumMapper_readResolve(ComThoughtworksXstreamMapperEnumMapper *self) {
  JreStrongAssignAndConsume(&self->enumConverterMap_, new_JavaUtilHashMap_init());
  JreStrongAssign(&self->attributeMapper_, (ComThoughtworksXstreamMapperAttributeMapper *) cast_chk([self lookupMapperOfTypeWithIOSClass:ComThoughtworksXstreamMapperAttributeMapper_class_()], [ComThoughtworksXstreamMapperAttributeMapper class]));
  return self;
}

IOSObjectArray *ComThoughtworksXstreamMapperEnumMapper__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamMapperEnumMapper)
