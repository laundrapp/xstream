//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/mapper/CannotResolveClassException.java
//

#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/XStreamException.h"
#include "com/thoughtworks/xstream/mapper/CannotResolveClassException.h"
#include "java/lang/Throwable.h"

@implementation ComThoughtworksXstreamMapperCannotResolveClassException

- (instancetype __nonnull)initWithNSString:(NSString *)className_ {
  ComThoughtworksXstreamMapperCannotResolveClassException_initWithNSString_(self, className_);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)className_
                     withJavaLangThrowable:(JavaLangThrowable *)cause {
  ComThoughtworksXstreamMapperCannotResolveClassException_initWithNSString_withJavaLangThrowable_(self, className_, cause);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LNSString;LJavaLangThrowable;" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperCannotResolveClassException = { "CannotResolveClassException", "com.thoughtworks.xstream.mapper", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamMapperCannotResolveClassException;
}

@end

void ComThoughtworksXstreamMapperCannotResolveClassException_initWithNSString_(ComThoughtworksXstreamMapperCannotResolveClassException *self, NSString *className_) {
  ComThoughtworksXstreamXStreamException_initWithNSString_(self, className_);
}

ComThoughtworksXstreamMapperCannotResolveClassException *new_ComThoughtworksXstreamMapperCannotResolveClassException_initWithNSString_(NSString *className_) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamMapperCannotResolveClassException, initWithNSString_, className_)
}

ComThoughtworksXstreamMapperCannotResolveClassException *create_ComThoughtworksXstreamMapperCannotResolveClassException_initWithNSString_(NSString *className_) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamMapperCannotResolveClassException, initWithNSString_, className_)
}

void ComThoughtworksXstreamMapperCannotResolveClassException_initWithNSString_withJavaLangThrowable_(ComThoughtworksXstreamMapperCannotResolveClassException *self, NSString *className_, JavaLangThrowable *cause) {
  ComThoughtworksXstreamXStreamException_initWithNSString_withJavaLangThrowable_(self, className_, cause);
}

ComThoughtworksXstreamMapperCannotResolveClassException *new_ComThoughtworksXstreamMapperCannotResolveClassException_initWithNSString_withJavaLangThrowable_(NSString *className_, JavaLangThrowable *cause) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamMapperCannotResolveClassException, initWithNSString_withJavaLangThrowable_, className_, cause)
}

ComThoughtworksXstreamMapperCannotResolveClassException *create_ComThoughtworksXstreamMapperCannotResolveClassException_initWithNSString_withJavaLangThrowable_(NSString *className_, JavaLangThrowable *cause) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamMapperCannotResolveClassException, initWithNSString_withJavaLangThrowable_, className_, cause)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamMapperCannotResolveClassException)
