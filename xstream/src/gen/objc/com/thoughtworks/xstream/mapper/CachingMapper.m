//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/mapper/CachingMapper.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/XStreamException.h"
#include "com/thoughtworks/xstream/mapper/CachingMapper.h"
#include "com/thoughtworks/xstream/mapper/CannotResolveClassException.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "com/thoughtworks/xstream/mapper/MapperWrapper.h"
#include "com/thoughtworks/xstream/security/ForbiddenClassException.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@interface ComThoughtworksXstreamMapperCachingMapper () {
 @public
  id<JavaUtilMap> realClassCache_;
}

- (id)readResolve;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperCachingMapper, realClassCache_, id<JavaUtilMap>)

__attribute__((unused)) static id ComThoughtworksXstreamMapperCachingMapper_readResolve(ComThoughtworksXstreamMapperCachingMapper *self);

@implementation ComThoughtworksXstreamMapperCachingMapper

- (instancetype __nonnull)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped {
  ComThoughtworksXstreamMapperCachingMapper_initWithComThoughtworksXstreamMapperMapper_(self, wrapped);
  return self;
}

- (IOSClass *)realClassWithNSString:(NSString *)elementName {
  id cached = [((id<JavaUtilMap>) nil_chk(realClassCache_)) getWithId:elementName];
  if (cached != nil) {
    if ([cached isKindOfClass:[IOSClass class]]) {
      return (IOSClass *) cast_chk(cached, [IOSClass class]);
    }
    @throw (ComThoughtworksXstreamXStreamException *) cast_chk(cached, [ComThoughtworksXstreamXStreamException class]);
  }
  @try {
    IOSClass *result = [super realClassWithNSString:elementName];
    [((id<JavaUtilMap>) nil_chk(realClassCache_)) putWithId:elementName withId:result];
    return result;
  }
  @catch (ComThoughtworksXstreamSecurityForbiddenClassException *e) {
    [((id<JavaUtilMap>) nil_chk(realClassCache_)) putWithId:elementName withId:e];
    @throw e;
  }
  @catch (ComThoughtworksXstreamMapperCannotResolveClassException *e) {
    [((id<JavaUtilMap>) nil_chk(realClassCache_)) putWithId:elementName withId:e];
    @throw e;
  }
}

- (void)flushCache {
  [((id<JavaUtilMap>) nil_chk(realClassCache_)) clear];
}

- (id)readResolve {
  return ComThoughtworksXstreamMapperCachingMapper_readResolve(self);
}

- (void)dealloc {
  RELEASE_(realClassCache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComThoughtworksXstreamMapperMapper:);
  methods[1].selector = @selector(realClassWithNSString:);
  methods[2].selector = @selector(flushCache);
  methods[3].selector = @selector(readResolve);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "realClassCache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComThoughtworksXstreamMapperMapper;", "realClass", "LNSString;" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperCachingMapper = { "CachingMapper", "com.thoughtworks.xstream.mapper", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamMapperCachingMapper;
}

@end

void ComThoughtworksXstreamMapperCachingMapper_initWithComThoughtworksXstreamMapperMapper_(ComThoughtworksXstreamMapperCachingMapper *self, id<ComThoughtworksXstreamMapperMapper> wrapped) {
  ComThoughtworksXstreamMapperMapperWrapper_initWithComThoughtworksXstreamMapperMapper_(self, wrapped);
  ComThoughtworksXstreamMapperCachingMapper_readResolve(self);
}

ComThoughtworksXstreamMapperCachingMapper *new_ComThoughtworksXstreamMapperCachingMapper_initWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> wrapped) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamMapperCachingMapper, initWithComThoughtworksXstreamMapperMapper_, wrapped)
}

ComThoughtworksXstreamMapperCachingMapper *create_ComThoughtworksXstreamMapperCachingMapper_initWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> wrapped) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamMapperCachingMapper, initWithComThoughtworksXstreamMapperMapper_, wrapped)
}

id ComThoughtworksXstreamMapperCachingMapper_readResolve(ComThoughtworksXstreamMapperCachingMapper *self) {
  JreStrongAssign(&self->realClassCache_, JavaUtilCollections_synchronizedMapWithJavaUtilMap_(create_JavaUtilHashMap_initWithInt_(128)));
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamMapperCachingMapper)
