//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/mapper/AttributeMapper.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/Converter.h"
#include "com/thoughtworks/xstream/converters/ConverterLookup.h"
#include "com/thoughtworks/xstream/converters/SingleValueConverter.h"
#include "com/thoughtworks/xstream/converters/reflection/ReflectionProvider.h"
#include "com/thoughtworks/xstream/mapper/AttributeMapper.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "com/thoughtworks/xstream/mapper/MapperWrapper.h"
#include "java/lang/reflect/Field.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface ComThoughtworksXstreamMapperAttributeMapper () {
 @public
  id<JavaUtilMap> fieldNameToTypeMap_;
  id<JavaUtilSet> typeSet_;
  id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup_;
  id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider_;
  id<JavaUtilSet> fieldToUseAsAttribute_;
}

- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getLocalConverterFromItemTypeWithIOSClass:(IOSClass *)type;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAttributeMapper, fieldNameToTypeMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAttributeMapper, typeSet_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAttributeMapper, converterLookup_, id<ComThoughtworksXstreamConvertersConverterLookup>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAttributeMapper, reflectionProvider_, id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAttributeMapper, fieldToUseAsAttribute_, id<JavaUtilSet>)

__attribute__((unused)) static id<ComThoughtworksXstreamConvertersSingleValueConverter> ComThoughtworksXstreamMapperAttributeMapper_getLocalConverterFromItemTypeWithIOSClass_(ComThoughtworksXstreamMapperAttributeMapper *self, IOSClass *type);

@implementation ComThoughtworksXstreamMapperAttributeMapper

- (instancetype __nonnull)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped {
  ComThoughtworksXstreamMapperAttributeMapper_initWithComThoughtworksXstreamMapperMapper_(self, wrapped);
  return self;
}

- (instancetype __nonnull)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped
                 withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)converterLookup
    withComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)refProvider {
  ComThoughtworksXstreamMapperAttributeMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamConvertersReflectionReflectionProvider_(self, wrapped, converterLookup, refProvider);
  return self;
}

- (void)setConverterLookupWithComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)converterLookup {
  JreStrongAssign(&self->converterLookup_, converterLookup);
}

- (void)addAttributeForWithNSString:(NSString *)fieldName
                       withIOSClass:(IOSClass *)type {
  [((id<JavaUtilMap>) nil_chk(fieldNameToTypeMap_)) putWithId:fieldName withId:type];
}

- (void)addAttributeForWithIOSClass:(IOSClass *)type {
  [((id<JavaUtilSet>) nil_chk(typeSet_)) addWithId:type];
}

- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getLocalConverterFromItemTypeWithIOSClass:(IOSClass *)type {
  return ComThoughtworksXstreamMapperAttributeMapper_getLocalConverterFromItemTypeWithIOSClass_(self, type);
}

- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getConverterFromItemTypeWithNSString:(NSString *)fieldName
                                                                                    withIOSClass:(IOSClass *)type {
  if ([((id<JavaUtilMap>) nil_chk(fieldNameToTypeMap_)) getWithId:fieldName] == type) {
    return ComThoughtworksXstreamMapperAttributeMapper_getLocalConverterFromItemTypeWithIOSClass_(self, type);
  }
  else {
    return nil;
  }
}

- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getConverterFromItemTypeWithNSString:(NSString *)fieldName
                                                                                    withIOSClass:(IOSClass *)type
                                                                                    withIOSClass:(IOSClass *)definedIn {
  if ([self shouldLookForSingleValueConverterWithNSString:fieldName withIOSClass:type withIOSClass:definedIn]) {
    id<ComThoughtworksXstreamConvertersSingleValueConverter> converter = ComThoughtworksXstreamMapperAttributeMapper_getLocalConverterFromItemTypeWithIOSClass_(self, type);
    if (converter != nil) {
      return converter;
    }
  }
  return [super getConverterFromItemTypeWithNSString:fieldName withIOSClass:type withIOSClass:definedIn];
}

- (jboolean)shouldLookForSingleValueConverterWithNSString:(NSString *)fieldName
                                             withIOSClass:(IOSClass *)type
                                             withIOSClass:(IOSClass *)definedIn {
  if ([((id<JavaUtilSet>) nil_chk(typeSet_)) containsWithId:type]) {
    return true;
  }
  else if ([((id<JavaUtilMap>) nil_chk(fieldNameToTypeMap_)) getWithId:fieldName] == type) {
    return true;
  }
  else if (fieldName != nil && definedIn != nil) {
    JavaLangReflectField *field = [((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(reflectionProvider_)) getFieldWithIOSClass:definedIn withNSString:fieldName];
    return [((id<JavaUtilSet>) nil_chk(fieldToUseAsAttribute_)) containsWithId:field];
  }
  return false;
}

- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getConverterFromItemTypeWithIOSClass:(IOSClass *)type {
  if ([((id<JavaUtilSet>) nil_chk(typeSet_)) containsWithId:type]) {
    return ComThoughtworksXstreamMapperAttributeMapper_getLocalConverterFromItemTypeWithIOSClass_(self, type);
  }
  else {
    return nil;
  }
}

- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getConverterFromAttributeWithNSString:(NSString *)attributeName {
  id<ComThoughtworksXstreamConvertersSingleValueConverter> converter = nil;
  IOSClass *type = (IOSClass *) cast_chk([((id<JavaUtilMap>) nil_chk(fieldNameToTypeMap_)) getWithId:attributeName], [IOSClass class]);
  if (type != nil) {
    converter = ComThoughtworksXstreamMapperAttributeMapper_getLocalConverterFromItemTypeWithIOSClass_(self, type);
  }
  return converter;
}

- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getConverterFromAttributeWithIOSClass:(IOSClass *)definedIn
                                                                                     withNSString:(NSString *)attribute {
  JavaLangReflectField *field = [((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(reflectionProvider_)) getFieldWithIOSClass:definedIn withNSString:attribute];
  return [self getConverterFromAttributeWithIOSClass:definedIn withNSString:attribute withIOSClass:[((JavaLangReflectField *) nil_chk(field)) getType]];
}

- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getConverterFromAttributeWithIOSClass:(IOSClass *)definedIn
                                                                                     withNSString:(NSString *)attribute
                                                                                     withIOSClass:(IOSClass *)type {
  if ([self shouldLookForSingleValueConverterWithNSString:attribute withIOSClass:type withIOSClass:definedIn]) {
    id<ComThoughtworksXstreamConvertersSingleValueConverter> converter = ComThoughtworksXstreamMapperAttributeMapper_getLocalConverterFromItemTypeWithIOSClass_(self, type);
    if (converter != nil) {
      return converter;
    }
  }
  return [super getConverterFromAttributeWithIOSClass:definedIn withNSString:attribute withIOSClass:type];
}

- (void)addAttributeForWithJavaLangReflectField:(JavaLangReflectField *)field {
  [((id<JavaUtilSet>) nil_chk(fieldToUseAsAttribute_)) addWithId:field];
}

- (void)addAttributeForWithIOSClass:(IOSClass *)definedIn
                       withNSString:(NSString *)fieldName {
  [((id<JavaUtilSet>) nil_chk(fieldToUseAsAttribute_)) addWithId:[((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(reflectionProvider_)) getFieldWithIOSClass:definedIn withNSString:fieldName]];
}

- (void)dealloc {
  RELEASE_(fieldNameToTypeMap_);
  RELEASE_(typeSet_);
  RELEASE_(converterLookup_);
  RELEASE_(reflectionProvider_);
  RELEASE_(fieldToUseAsAttribute_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "LComThoughtworksXstreamConvertersSingleValueConverter;", 0x2, 7, 6, -1, -1, -1, -1 },
    { NULL, "LComThoughtworksXstreamConvertersSingleValueConverter;", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "LComThoughtworksXstreamConvertersSingleValueConverter;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "LComThoughtworksXstreamConvertersSingleValueConverter;", 0x1, 8, 6, -1, -1, -1, -1 },
    { NULL, "LComThoughtworksXstreamConvertersSingleValueConverter;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LComThoughtworksXstreamConvertersSingleValueConverter;", 0x1, 11, 13, -1, -1, -1, -1 },
    { NULL, "LComThoughtworksXstreamConvertersSingleValueConverter;", 0x1, 11, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComThoughtworksXstreamMapperMapper:);
  methods[1].selector = @selector(initWithComThoughtworksXstreamMapperMapper:withComThoughtworksXstreamConvertersConverterLookup:withComThoughtworksXstreamConvertersReflectionReflectionProvider:);
  methods[2].selector = @selector(setConverterLookupWithComThoughtworksXstreamConvertersConverterLookup:);
  methods[3].selector = @selector(addAttributeForWithNSString:withIOSClass:);
  methods[4].selector = @selector(addAttributeForWithIOSClass:);
  methods[5].selector = @selector(getLocalConverterFromItemTypeWithIOSClass:);
  methods[6].selector = @selector(getConverterFromItemTypeWithNSString:withIOSClass:);
  methods[7].selector = @selector(getConverterFromItemTypeWithNSString:withIOSClass:withIOSClass:);
  methods[8].selector = @selector(shouldLookForSingleValueConverterWithNSString:withIOSClass:withIOSClass:);
  methods[9].selector = @selector(getConverterFromItemTypeWithIOSClass:);
  methods[10].selector = @selector(getConverterFromAttributeWithNSString:);
  methods[11].selector = @selector(getConverterFromAttributeWithIOSClass:withNSString:);
  methods[12].selector = @selector(getConverterFromAttributeWithIOSClass:withNSString:withIOSClass:);
  methods[13].selector = @selector(addAttributeForWithJavaLangReflectField:);
  methods[14].selector = @selector(addAttributeForWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fieldNameToTypeMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "typeSet_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "converterLookup_", "LComThoughtworksXstreamConvertersConverterLookup;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "reflectionProvider_", "LComThoughtworksXstreamConvertersReflectionReflectionProvider;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fieldToUseAsAttribute_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComThoughtworksXstreamMapperMapper;", "LComThoughtworksXstreamMapperMapper;LComThoughtworksXstreamConvertersConverterLookup;LComThoughtworksXstreamConvertersReflectionReflectionProvider;", "setConverterLookup", "LComThoughtworksXstreamConvertersConverterLookup;", "addAttributeFor", "LNSString;LIOSClass;", "LIOSClass;", "getLocalConverterFromItemType", "getConverterFromItemType", "LNSString;LIOSClass;LIOSClass;", "shouldLookForSingleValueConverter", "getConverterFromAttribute", "LNSString;", "LIOSClass;LNSString;", "LIOSClass;LNSString;LIOSClass;", "LJavaLangReflectField;" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperAttributeMapper = { "AttributeMapper", "com.thoughtworks.xstream.mapper", ptrTable, methods, fields, 7, 0x1, 15, 5, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamMapperAttributeMapper;
}

@end

void ComThoughtworksXstreamMapperAttributeMapper_initWithComThoughtworksXstreamMapperMapper_(ComThoughtworksXstreamMapperAttributeMapper *self, id<ComThoughtworksXstreamMapperMapper> wrapped) {
  ComThoughtworksXstreamMapperAttributeMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamConvertersReflectionReflectionProvider_(self, wrapped, nil, nil);
}

ComThoughtworksXstreamMapperAttributeMapper *new_ComThoughtworksXstreamMapperAttributeMapper_initWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> wrapped) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamMapperAttributeMapper, initWithComThoughtworksXstreamMapperMapper_, wrapped)
}

ComThoughtworksXstreamMapperAttributeMapper *create_ComThoughtworksXstreamMapperAttributeMapper_initWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> wrapped) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamMapperAttributeMapper, initWithComThoughtworksXstreamMapperMapper_, wrapped)
}

void ComThoughtworksXstreamMapperAttributeMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamConvertersReflectionReflectionProvider_(ComThoughtworksXstreamMapperAttributeMapper *self, id<ComThoughtworksXstreamMapperMapper> wrapped, id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup, id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> refProvider) {
  ComThoughtworksXstreamMapperMapperWrapper_initWithComThoughtworksXstreamMapperMapper_(self, wrapped);
  JreStrongAssignAndConsume(&self->fieldNameToTypeMap_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->typeSet_, new_JavaUtilHashSet_init());
  JreStrongAssignAndConsume(&self->fieldToUseAsAttribute_, new_JavaUtilHashSet_init());
  JreStrongAssign(&self->converterLookup_, converterLookup);
  JreStrongAssign(&self->reflectionProvider_, refProvider);
}

ComThoughtworksXstreamMapperAttributeMapper *new_ComThoughtworksXstreamMapperAttributeMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamConvertersReflectionReflectionProvider_(id<ComThoughtworksXstreamMapperMapper> wrapped, id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup, id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> refProvider) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamMapperAttributeMapper, initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamConvertersReflectionReflectionProvider_, wrapped, converterLookup, refProvider)
}

ComThoughtworksXstreamMapperAttributeMapper *create_ComThoughtworksXstreamMapperAttributeMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamConvertersReflectionReflectionProvider_(id<ComThoughtworksXstreamMapperMapper> wrapped, id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup, id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> refProvider) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamMapperAttributeMapper, initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamConvertersReflectionReflectionProvider_, wrapped, converterLookup, refProvider)
}

id<ComThoughtworksXstreamConvertersSingleValueConverter> ComThoughtworksXstreamMapperAttributeMapper_getLocalConverterFromItemTypeWithIOSClass_(ComThoughtworksXstreamMapperAttributeMapper *self, IOSClass *type) {
  id<ComThoughtworksXstreamConvertersConverter> converter = [((id<ComThoughtworksXstreamConvertersConverterLookup>) nil_chk(self->converterLookup_)) lookupConverterForTypeWithIOSClass:type];
  if (converter != nil && [ComThoughtworksXstreamConvertersSingleValueConverter_class_() isInstance:converter]) {
    return (id<ComThoughtworksXstreamConvertersSingleValueConverter>) cast_check(converter, ComThoughtworksXstreamConvertersSingleValueConverter_class_());
  }
  else {
    return nil;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamMapperAttributeMapper)
