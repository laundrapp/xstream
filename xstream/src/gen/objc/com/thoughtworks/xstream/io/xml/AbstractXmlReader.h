//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/io/xml/AbstractXmlReader.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComThoughtworksXstreamIoXmlAbstractXmlReader")
#ifdef RESTRICT_ComThoughtworksXstreamIoXmlAbstractXmlReader
#define INCLUDE_ALL_ComThoughtworksXstreamIoXmlAbstractXmlReader 0
#else
#define INCLUDE_ALL_ComThoughtworksXstreamIoXmlAbstractXmlReader 1
#endif
#undef RESTRICT_ComThoughtworksXstreamIoXmlAbstractXmlReader

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComThoughtworksXstreamIoXmlAbstractXmlReader_) && (INCLUDE_ALL_ComThoughtworksXstreamIoXmlAbstractXmlReader || defined(INCLUDE_ComThoughtworksXstreamIoXmlAbstractXmlReader))
#define ComThoughtworksXstreamIoXmlAbstractXmlReader_

#define RESTRICT_ComThoughtworksXstreamIoAbstractReader 1
#define INCLUDE_ComThoughtworksXstreamIoAbstractReader 1
#include "com/thoughtworks/xstream/io/AbstractReader.h"

@class ComThoughtworksXstreamIoXmlXmlFriendlyReplacer;
@protocol ComThoughtworksXstreamIoNamingNameCoder;

/*!
 @brief Abstract base implementation of HierarchicalStreamReader that provides common functionality
  to all XML-based readers.
 @author Mauro Talevi
 @author J&ouml;rg Schaible
 @since 1.2
 */
@interface ComThoughtworksXstreamIoXmlAbstractXmlReader : ComThoughtworksXstreamIoAbstractReader

#pragma mark Public

/*!
 @brief Unescapes XML-friendly name (node or attribute)
 @param name the escaped XML-friendly name
 @return An unescaped name with original characters
 */
- (NSString *)unescapeXmlNameWithNSString:(NSString *)name;

#pragma mark Protected

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithComThoughtworksXstreamIoNamingNameCoder:(id<ComThoughtworksXstreamIoNamingNameCoder>)nameCoder;

/*!
 */
- (instancetype __nonnull)initWithComThoughtworksXstreamIoXmlXmlFriendlyReplacer:(ComThoughtworksXstreamIoXmlXmlFriendlyReplacer *)replacer;

/*!
 @brief Escapes XML-unfriendly name (node or attribute)
 @param name the unescaped XML-unfriendly name
 @return An escaped name with original characters
 */
- (NSString *)escapeXmlNameWithNSString:(NSString *)name;

@end

J2OBJC_EMPTY_STATIC_INIT(ComThoughtworksXstreamIoXmlAbstractXmlReader)

FOUNDATION_EXPORT void ComThoughtworksXstreamIoXmlAbstractXmlReader_init(ComThoughtworksXstreamIoXmlAbstractXmlReader *self);

FOUNDATION_EXPORT void ComThoughtworksXstreamIoXmlAbstractXmlReader_initWithComThoughtworksXstreamIoXmlXmlFriendlyReplacer_(ComThoughtworksXstreamIoXmlAbstractXmlReader *self, ComThoughtworksXstreamIoXmlXmlFriendlyReplacer *replacer);

FOUNDATION_EXPORT void ComThoughtworksXstreamIoXmlAbstractXmlReader_initWithComThoughtworksXstreamIoNamingNameCoder_(ComThoughtworksXstreamIoXmlAbstractXmlReader *self, id<ComThoughtworksXstreamIoNamingNameCoder> nameCoder);

J2OBJC_TYPE_LITERAL_HEADER(ComThoughtworksXstreamIoXmlAbstractXmlReader)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComThoughtworksXstreamIoXmlAbstractXmlReader")
