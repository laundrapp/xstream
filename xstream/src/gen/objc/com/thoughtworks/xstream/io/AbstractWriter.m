//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/io/AbstractWriter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/core/util/Cloneables.h"
#include "com/thoughtworks/xstream/io/AbstractWriter.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamWriter.h"
#include "com/thoughtworks/xstream/io/naming/NameCoder.h"
#include "com/thoughtworks/xstream/io/naming/NoNameCoder.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface ComThoughtworksXstreamIoAbstractWriter () {
 @public
  id<ComThoughtworksXstreamIoNamingNameCoder> nameCoder_;
}

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoAbstractWriter, nameCoder_, id<ComThoughtworksXstreamIoNamingNameCoder>)

@implementation ComThoughtworksXstreamIoAbstractWriter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComThoughtworksXstreamIoAbstractWriter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithComThoughtworksXstreamIoNamingNameCoder:(id<ComThoughtworksXstreamIoNamingNameCoder>)nameCoder {
  ComThoughtworksXstreamIoAbstractWriter_initWithComThoughtworksXstreamIoNamingNameCoder_(self, nameCoder);
  return self;
}

- (void)startNodeWithNSString:(NSString *)name
                 withIOSClass:(IOSClass *)clazz {
  [self startNodeWithNSString:name];
}

- (id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)underlyingWriter {
  return self;
}

- (NSString *)encodeNodeWithNSString:(NSString *)name {
  return [((id<ComThoughtworksXstreamIoNamingNameCoder>) nil_chk(nameCoder_)) encodeNodeWithNSString:name];
}

- (NSString *)encodeAttributeWithNSString:(NSString *)name {
  return [((id<ComThoughtworksXstreamIoNamingNameCoder>) nil_chk(nameCoder_)) encodeAttributeWithNSString:name];
}

- (void)dealloc {
  RELEASE_(nameCoder_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LComThoughtworksXstreamIoHierarchicalStreamWriter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithComThoughtworksXstreamIoNamingNameCoder:);
  methods[2].selector = @selector(startNodeWithNSString:withIOSClass:);
  methods[3].selector = @selector(underlyingWriter);
  methods[4].selector = @selector(encodeNodeWithNSString:);
  methods[5].selector = @selector(encodeAttributeWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "nameCoder_", "LComThoughtworksXstreamIoNamingNameCoder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComThoughtworksXstreamIoNamingNameCoder;", "startNode", "LNSString;LIOSClass;", "encodeNode", "LNSString;", "encodeAttribute" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoAbstractWriter = { "AbstractWriter", "com.thoughtworks.xstream.io", ptrTable, methods, fields, 7, 0x401, 6, 1, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamIoAbstractWriter;
}

@end

void ComThoughtworksXstreamIoAbstractWriter_init(ComThoughtworksXstreamIoAbstractWriter *self) {
  ComThoughtworksXstreamIoAbstractWriter_initWithComThoughtworksXstreamIoNamingNameCoder_(self, create_ComThoughtworksXstreamIoNamingNoNameCoder_init());
}

void ComThoughtworksXstreamIoAbstractWriter_initWithComThoughtworksXstreamIoNamingNameCoder_(ComThoughtworksXstreamIoAbstractWriter *self, id<ComThoughtworksXstreamIoNamingNameCoder> nameCoder) {
  NSObject_init(self);
  JreStrongAssign(&self->nameCoder_, (id<ComThoughtworksXstreamIoNamingNameCoder>) cast_check(ComThoughtworksXstreamCoreUtilCloneables_cloneIfPossibleWithId_(nameCoder), ComThoughtworksXstreamIoNamingNameCoder_class_()));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamIoAbstractWriter)
