//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/io/xml/AbstractXmlWriter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComThoughtworksXstreamIoXmlAbstractXmlWriter")
#ifdef RESTRICT_ComThoughtworksXstreamIoXmlAbstractXmlWriter
#define INCLUDE_ALL_ComThoughtworksXstreamIoXmlAbstractXmlWriter 0
#else
#define INCLUDE_ALL_ComThoughtworksXstreamIoXmlAbstractXmlWriter 1
#endif
#undef RESTRICT_ComThoughtworksXstreamIoXmlAbstractXmlWriter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComThoughtworksXstreamIoXmlAbstractXmlWriter_) && (INCLUDE_ALL_ComThoughtworksXstreamIoXmlAbstractXmlWriter || defined(INCLUDE_ComThoughtworksXstreamIoXmlAbstractXmlWriter))
#define ComThoughtworksXstreamIoXmlAbstractXmlWriter_

#define RESTRICT_ComThoughtworksXstreamIoAbstractWriter 1
#define INCLUDE_ComThoughtworksXstreamIoAbstractWriter 1
#include "com/thoughtworks/xstream/io/AbstractWriter.h"

#define RESTRICT_ComThoughtworksXstreamIoXmlXmlFriendlyWriter 1
#define INCLUDE_ComThoughtworksXstreamIoXmlXmlFriendlyWriter 1
#include "com/thoughtworks/xstream/io/xml/XmlFriendlyWriter.h"

@class ComThoughtworksXstreamIoXmlXmlFriendlyReplacer;
@protocol ComThoughtworksXstreamIoNamingNameCoder;

/*!
 @brief Abstract base implementation of HierarchicalStreamWriter that provides common functionality
  to all XML-based writers.
 @author Mauro Talevi
 @author J&ouml;rg Schaible
 @since 1.2
 */
@interface ComThoughtworksXstreamIoXmlAbstractXmlWriter : ComThoughtworksXstreamIoAbstractWriter < ComThoughtworksXstreamIoXmlXmlFriendlyWriter >

#pragma mark Public

/*!
 @brief Escapes XML name (node or attribute) to be XML-friendly
 @param name the unescaped XML name
 @return An escaped name with original characters replaced
 */
- (NSString *)escapeXmlNameWithNSString:(NSString *)name;

#pragma mark Protected

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithComThoughtworksXstreamIoNamingNameCoder:(id<ComThoughtworksXstreamIoNamingNameCoder>)nameCoder;

/*!
 */
- (instancetype __nonnull)initWithComThoughtworksXstreamIoXmlXmlFriendlyReplacer:(ComThoughtworksXstreamIoXmlXmlFriendlyReplacer *)replacer;

@end

J2OBJC_EMPTY_STATIC_INIT(ComThoughtworksXstreamIoXmlAbstractXmlWriter)

FOUNDATION_EXPORT void ComThoughtworksXstreamIoXmlAbstractXmlWriter_init(ComThoughtworksXstreamIoXmlAbstractXmlWriter *self);

FOUNDATION_EXPORT void ComThoughtworksXstreamIoXmlAbstractXmlWriter_initWithComThoughtworksXstreamIoXmlXmlFriendlyReplacer_(ComThoughtworksXstreamIoXmlAbstractXmlWriter *self, ComThoughtworksXstreamIoXmlXmlFriendlyReplacer *replacer);

FOUNDATION_EXPORT void ComThoughtworksXstreamIoXmlAbstractXmlWriter_initWithComThoughtworksXstreamIoNamingNameCoder_(ComThoughtworksXstreamIoXmlAbstractXmlWriter *self, id<ComThoughtworksXstreamIoNamingNameCoder> nameCoder);

J2OBJC_TYPE_LITERAL_HEADER(ComThoughtworksXstreamIoXmlAbstractXmlWriter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComThoughtworksXstreamIoXmlAbstractXmlWriter")
