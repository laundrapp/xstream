//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/io/xml/AbstractPullReader.java
//

#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/core/util/FastStack.h"
#include "com/thoughtworks/xstream/io/AttributeNameIterator.h"
#include "com/thoughtworks/xstream/io/naming/NameCoder.h"
#include "com/thoughtworks/xstream/io/xml/AbstractPullReader.h"
#include "com/thoughtworks/xstream/io/xml/AbstractXmlReader.h"
#include "com/thoughtworks/xstream/io/xml/XmlFriendlyReplacer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Iterator.h"

@class ComThoughtworksXstreamIoXmlAbstractPullReader_Event;

@interface ComThoughtworksXstreamIoXmlAbstractPullReader () {
 @public
  ComThoughtworksXstreamCoreUtilFastStack *elementStack_;
  ComThoughtworksXstreamCoreUtilFastStack *pool_;
  ComThoughtworksXstreamCoreUtilFastStack *lookahead_;
  ComThoughtworksXstreamCoreUtilFastStack *lookback_;
  jboolean marked_;
}

- (void)move;

- (ComThoughtworksXstreamIoXmlAbstractPullReader_Event *)readEvent;

- (ComThoughtworksXstreamIoXmlAbstractPullReader_Event *)readRealEvent;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoXmlAbstractPullReader, elementStack_, ComThoughtworksXstreamCoreUtilFastStack *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoXmlAbstractPullReader, pool_, ComThoughtworksXstreamCoreUtilFastStack *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoXmlAbstractPullReader, lookahead_, ComThoughtworksXstreamCoreUtilFastStack *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoXmlAbstractPullReader, lookback_, ComThoughtworksXstreamCoreUtilFastStack *)

__attribute__((unused)) static void ComThoughtworksXstreamIoXmlAbstractPullReader_move(ComThoughtworksXstreamIoXmlAbstractPullReader *self);

__attribute__((unused)) static ComThoughtworksXstreamIoXmlAbstractPullReader_Event *ComThoughtworksXstreamIoXmlAbstractPullReader_readEvent(ComThoughtworksXstreamIoXmlAbstractPullReader *self);

__attribute__((unused)) static ComThoughtworksXstreamIoXmlAbstractPullReader_Event *ComThoughtworksXstreamIoXmlAbstractPullReader_readRealEvent(ComThoughtworksXstreamIoXmlAbstractPullReader *self);

@interface ComThoughtworksXstreamIoXmlAbstractPullReader_Event : NSObject {
 @public
  jint type_;
  NSString *value_;
}

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComThoughtworksXstreamIoXmlAbstractPullReader_Event)

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoXmlAbstractPullReader_Event, value_, NSString *)

__attribute__((unused)) static void ComThoughtworksXstreamIoXmlAbstractPullReader_Event_init(ComThoughtworksXstreamIoXmlAbstractPullReader_Event *self);

__attribute__((unused)) static ComThoughtworksXstreamIoXmlAbstractPullReader_Event *new_ComThoughtworksXstreamIoXmlAbstractPullReader_Event_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComThoughtworksXstreamIoXmlAbstractPullReader_Event *create_ComThoughtworksXstreamIoXmlAbstractPullReader_Event_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComThoughtworksXstreamIoXmlAbstractPullReader_Event)

@implementation ComThoughtworksXstreamIoXmlAbstractPullReader

- (instancetype __nonnull)initWithComThoughtworksXstreamIoNamingNameCoder:(id<ComThoughtworksXstreamIoNamingNameCoder>)nameCoder {
  ComThoughtworksXstreamIoXmlAbstractPullReader_initWithComThoughtworksXstreamIoNamingNameCoder_(self, nameCoder);
  return self;
}

- (instancetype __nonnull)initWithComThoughtworksXstreamIoXmlXmlFriendlyReplacer:(ComThoughtworksXstreamIoXmlXmlFriendlyReplacer *)replacer {
  ComThoughtworksXstreamIoXmlAbstractPullReader_initWithComThoughtworksXstreamIoXmlXmlFriendlyReplacer_(self, replacer);
  return self;
}

- (jint)pullNextEvent {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)pullElementName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)pullText {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)hasMoreChildren {
  [self mark];
  while (true) {
    switch (((ComThoughtworksXstreamIoXmlAbstractPullReader_Event *) nil_chk(ComThoughtworksXstreamIoXmlAbstractPullReader_readEvent(self)))->type_) {
      case ComThoughtworksXstreamIoXmlAbstractPullReader_START_NODE:
      [self reset];
      return true;
      case ComThoughtworksXstreamIoXmlAbstractPullReader_END_NODE:
      [self reset];
      return false;
      default:
      continue;
    }
  }
}

- (void)moveDown {
  jint currentDepth = [((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(elementStack_)) size];
  while ([elementStack_ size] <= currentDepth) {
    ComThoughtworksXstreamIoXmlAbstractPullReader_move(self);
    if ([elementStack_ size] < currentDepth) {
      @throw create_JavaLangRuntimeException_init();
    }
  }
}

- (void)moveUp {
  jint currentDepth = [((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(elementStack_)) size];
  while ([elementStack_ size] >= currentDepth) {
    ComThoughtworksXstreamIoXmlAbstractPullReader_move(self);
  }
}

- (void)move {
  ComThoughtworksXstreamIoXmlAbstractPullReader_move(self);
}

- (ComThoughtworksXstreamIoXmlAbstractPullReader_Event *)readEvent {
  return ComThoughtworksXstreamIoXmlAbstractPullReader_readEvent(self);
}

- (ComThoughtworksXstreamIoXmlAbstractPullReader_Event *)readRealEvent {
  return ComThoughtworksXstreamIoXmlAbstractPullReader_readRealEvent(self);
}

- (void)mark {
  marked_ = true;
}

- (void)reset {
  while ([((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(lookahead_)) hasStuff]) {
    [((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(lookback_)) pushWithId:[lookahead_ pop]];
  }
  marked_ = false;
}

- (NSString *)getValue {
  NSString *last = nil;
  JavaLangStringBuffer *buffer = nil;
  [self mark];
  ComThoughtworksXstreamIoXmlAbstractPullReader_Event *event = ComThoughtworksXstreamIoXmlAbstractPullReader_readEvent(self);
  while (true) {
    if (((ComThoughtworksXstreamIoXmlAbstractPullReader_Event *) nil_chk(event))->type_ == ComThoughtworksXstreamIoXmlAbstractPullReader_TEXT) {
      NSString *text = event->value_;
      if (text != nil && [text java_length] > 0) {
        if (last == nil) {
          last = text;
        }
        else {
          if (buffer == nil) {
            buffer = create_JavaLangStringBuffer_initWithNSString_(last);
          }
          [buffer appendWithNSString:text];
        }
      }
    }
    else if (event->type_ != ComThoughtworksXstreamIoXmlAbstractPullReader_COMMENT) {
      break;
    }
    event = ComThoughtworksXstreamIoXmlAbstractPullReader_readEvent(self);
  }
  [self reset];
  if (buffer != nil) {
    return [buffer description];
  }
  else {
    return (last == nil) ? @"" : last;
  }
}

- (id<JavaUtilIterator>)getAttributeNames {
  return create_ComThoughtworksXstreamIoAttributeNameIterator_initWithComThoughtworksXstreamIoHierarchicalStreamReader_(self);
}

- (NSString *)getNodeName {
  return [self unescapeXmlNameWithNSString:(NSString *) cast_chk([((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(elementStack_)) peek], [NSString class])];
}

- (NSString *)peekNextChild {
  [self mark];
  while (true) {
    ComThoughtworksXstreamIoXmlAbstractPullReader_Event *ev = ComThoughtworksXstreamIoXmlAbstractPullReader_readEvent(self);
    switch (((ComThoughtworksXstreamIoXmlAbstractPullReader_Event *) nil_chk(ev))->type_) {
      case ComThoughtworksXstreamIoXmlAbstractPullReader_START_NODE:
      [self reset];
      return ev->value_;
      case ComThoughtworksXstreamIoXmlAbstractPullReader_END_NODE:
      [self reset];
      return nil;
      default:
      continue;
    }
  }
}

- (void)dealloc {
  RELEASE_(elementStack_);
  RELEASE_(pool_);
  RELEASE_(lookahead_);
  RELEASE_(lookback_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComThoughtworksXstreamIoXmlAbstractPullReader_Event;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComThoughtworksXstreamIoXmlAbstractPullReader_Event;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComThoughtworksXstreamIoNamingNameCoder:);
  methods[1].selector = @selector(initWithComThoughtworksXstreamIoXmlXmlFriendlyReplacer:);
  methods[2].selector = @selector(pullNextEvent);
  methods[3].selector = @selector(pullElementName);
  methods[4].selector = @selector(pullText);
  methods[5].selector = @selector(hasMoreChildren);
  methods[6].selector = @selector(moveDown);
  methods[7].selector = @selector(moveUp);
  methods[8].selector = @selector(move);
  methods[9].selector = @selector(readEvent);
  methods[10].selector = @selector(readRealEvent);
  methods[11].selector = @selector(mark);
  methods[12].selector = @selector(reset);
  methods[13].selector = @selector(getValue);
  methods[14].selector = @selector(getAttributeNames);
  methods[15].selector = @selector(getNodeName);
  methods[16].selector = @selector(peekNextChild);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "START_NODE", "I", .constantValue.asInt = ComThoughtworksXstreamIoXmlAbstractPullReader_START_NODE, 0x1c, -1, -1, -1, -1 },
    { "END_NODE", "I", .constantValue.asInt = ComThoughtworksXstreamIoXmlAbstractPullReader_END_NODE, 0x1c, -1, -1, -1, -1 },
    { "TEXT", "I", .constantValue.asInt = ComThoughtworksXstreamIoXmlAbstractPullReader_TEXT, 0x1c, -1, -1, -1, -1 },
    { "COMMENT", "I", .constantValue.asInt = ComThoughtworksXstreamIoXmlAbstractPullReader_COMMENT, 0x1c, -1, -1, -1, -1 },
    { "OTHER", "I", .constantValue.asInt = ComThoughtworksXstreamIoXmlAbstractPullReader_OTHER, 0x1c, -1, -1, -1, -1 },
    { "elementStack_", "LComThoughtworksXstreamCoreUtilFastStack;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pool_", "LComThoughtworksXstreamCoreUtilFastStack;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lookahead_", "LComThoughtworksXstreamCoreUtilFastStack;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lookback_", "LComThoughtworksXstreamCoreUtilFastStack;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "marked_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComThoughtworksXstreamIoNamingNameCoder;", "LComThoughtworksXstreamIoXmlXmlFriendlyReplacer;", "LComThoughtworksXstreamIoXmlAbstractPullReader_Event;" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoXmlAbstractPullReader = { "AbstractPullReader", "com.thoughtworks.xstream.io.xml", ptrTable, methods, fields, 7, 0x401, 17, 10, -1, 2, -1, -1, -1 };
  return &_ComThoughtworksXstreamIoXmlAbstractPullReader;
}

@end

void ComThoughtworksXstreamIoXmlAbstractPullReader_initWithComThoughtworksXstreamIoNamingNameCoder_(ComThoughtworksXstreamIoXmlAbstractPullReader *self, id<ComThoughtworksXstreamIoNamingNameCoder> nameCoder) {
  ComThoughtworksXstreamIoXmlAbstractXmlReader_initWithComThoughtworksXstreamIoNamingNameCoder_(self, nameCoder);
  JreStrongAssignAndConsume(&self->elementStack_, new_ComThoughtworksXstreamCoreUtilFastStack_initWithInt_(16));
  JreStrongAssignAndConsume(&self->pool_, new_ComThoughtworksXstreamCoreUtilFastStack_initWithInt_(16));
  JreStrongAssignAndConsume(&self->lookahead_, new_ComThoughtworksXstreamCoreUtilFastStack_initWithInt_(4));
  JreStrongAssignAndConsume(&self->lookback_, new_ComThoughtworksXstreamCoreUtilFastStack_initWithInt_(4));
}

void ComThoughtworksXstreamIoXmlAbstractPullReader_initWithComThoughtworksXstreamIoXmlXmlFriendlyReplacer_(ComThoughtworksXstreamIoXmlAbstractPullReader *self, ComThoughtworksXstreamIoXmlXmlFriendlyReplacer *replacer) {
  ComThoughtworksXstreamIoXmlAbstractPullReader_initWithComThoughtworksXstreamIoNamingNameCoder_(self, replacer);
}

void ComThoughtworksXstreamIoXmlAbstractPullReader_move(ComThoughtworksXstreamIoXmlAbstractPullReader *self) {
  ComThoughtworksXstreamIoXmlAbstractPullReader_Event *event = ComThoughtworksXstreamIoXmlAbstractPullReader_readEvent(self);
  [((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(self->pool_)) pushWithId:event];
  switch (((ComThoughtworksXstreamIoXmlAbstractPullReader_Event *) nil_chk(event))->type_) {
    case ComThoughtworksXstreamIoXmlAbstractPullReader_START_NODE:
    [((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(self->elementStack_)) pushWithId:[self pullElementName]];
    break;
    case ComThoughtworksXstreamIoXmlAbstractPullReader_END_NODE:
    [((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(self->elementStack_)) pop];
    break;
  }
}

ComThoughtworksXstreamIoXmlAbstractPullReader_Event *ComThoughtworksXstreamIoXmlAbstractPullReader_readEvent(ComThoughtworksXstreamIoXmlAbstractPullReader *self) {
  if (self->marked_) {
    if ([((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(self->lookback_)) hasStuff]) {
      return (ComThoughtworksXstreamIoXmlAbstractPullReader_Event *) cast_chk([((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(self->lookahead_)) pushWithId:[self->lookback_ pop]], [ComThoughtworksXstreamIoXmlAbstractPullReader_Event class]);
    }
    else {
      return (ComThoughtworksXstreamIoXmlAbstractPullReader_Event *) cast_chk([((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(self->lookahead_)) pushWithId:ComThoughtworksXstreamIoXmlAbstractPullReader_readRealEvent(self)], [ComThoughtworksXstreamIoXmlAbstractPullReader_Event class]);
    }
  }
  else {
    if ([((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(self->lookback_)) hasStuff]) {
      return (ComThoughtworksXstreamIoXmlAbstractPullReader_Event *) cast_chk([self->lookback_ pop], [ComThoughtworksXstreamIoXmlAbstractPullReader_Event class]);
    }
    else {
      return ComThoughtworksXstreamIoXmlAbstractPullReader_readRealEvent(self);
    }
  }
}

ComThoughtworksXstreamIoXmlAbstractPullReader_Event *ComThoughtworksXstreamIoXmlAbstractPullReader_readRealEvent(ComThoughtworksXstreamIoXmlAbstractPullReader *self) {
  ComThoughtworksXstreamIoXmlAbstractPullReader_Event *event = [((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(self->pool_)) hasStuff] ? (ComThoughtworksXstreamIoXmlAbstractPullReader_Event *) cast_chk([self->pool_ pop], [ComThoughtworksXstreamIoXmlAbstractPullReader_Event class]) : create_ComThoughtworksXstreamIoXmlAbstractPullReader_Event_init();
  event->type_ = [self pullNextEvent];
  if (event->type_ == ComThoughtworksXstreamIoXmlAbstractPullReader_TEXT) {
    JreStrongAssign(&event->value_, [self pullText]);
  }
  else if (event->type_ == ComThoughtworksXstreamIoXmlAbstractPullReader_START_NODE) {
    JreStrongAssign(&event->value_, [self pullElementName]);
  }
  else {
    JreStrongAssign(&event->value_, nil);
  }
  return event;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamIoXmlAbstractPullReader)

@implementation ComThoughtworksXstreamIoXmlAbstractPullReader_Event

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComThoughtworksXstreamIoXmlAbstractPullReader_Event_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "value_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComThoughtworksXstreamIoXmlAbstractPullReader;" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoXmlAbstractPullReader_Event = { "Event", "com.thoughtworks.xstream.io.xml", ptrTable, methods, fields, 7, 0xa, 1, 2, 0, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamIoXmlAbstractPullReader_Event;
}

@end

void ComThoughtworksXstreamIoXmlAbstractPullReader_Event_init(ComThoughtworksXstreamIoXmlAbstractPullReader_Event *self) {
  NSObject_init(self);
}

ComThoughtworksXstreamIoXmlAbstractPullReader_Event *new_ComThoughtworksXstreamIoXmlAbstractPullReader_Event_init() {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamIoXmlAbstractPullReader_Event, init)
}

ComThoughtworksXstreamIoXmlAbstractPullReader_Event *create_ComThoughtworksXstreamIoXmlAbstractPullReader_Event_init() {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamIoXmlAbstractPullReader_Event, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamIoXmlAbstractPullReader_Event)
