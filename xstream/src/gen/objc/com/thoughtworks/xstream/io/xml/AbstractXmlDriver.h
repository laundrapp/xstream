//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/io/xml/AbstractXmlDriver.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComThoughtworksXstreamIoXmlAbstractXmlDriver")
#ifdef RESTRICT_ComThoughtworksXstreamIoXmlAbstractXmlDriver
#define INCLUDE_ALL_ComThoughtworksXstreamIoXmlAbstractXmlDriver 0
#else
#define INCLUDE_ALL_ComThoughtworksXstreamIoXmlAbstractXmlDriver 1
#endif
#undef RESTRICT_ComThoughtworksXstreamIoXmlAbstractXmlDriver

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComThoughtworksXstreamIoXmlAbstractXmlDriver_) && (INCLUDE_ALL_ComThoughtworksXstreamIoXmlAbstractXmlDriver || defined(INCLUDE_ComThoughtworksXstreamIoXmlAbstractXmlDriver))
#define ComThoughtworksXstreamIoXmlAbstractXmlDriver_

#define RESTRICT_ComThoughtworksXstreamIoAbstractDriver 1
#define INCLUDE_ComThoughtworksXstreamIoAbstractDriver 1
#include "com/thoughtworks/xstream/io/AbstractDriver.h"

@class ComThoughtworksXstreamIoXmlXmlFriendlyReplacer;
@protocol ComThoughtworksXstreamIoNamingNameCoder;

/*!
 @brief Base class for HierarchicalStreamDrivers to use xml-based HierarchicalStreamReader and
  HierarchicalStreamWriter.
 @author Mauro Talevi
 @author J&ouml;rg Schaible
 @since 1.2
 */
@interface ComThoughtworksXstreamIoXmlAbstractXmlDriver : ComThoughtworksXstreamIoAbstractDriver

#pragma mark Public

/*!
 @brief Creates a AbstractXmlFriendlyDriver with default XmlFriendlyReplacer
 */
- (instancetype __nonnull)init;

/*!
 @brief Creates a AbstractXmlFriendlyDriver with default XmlFriendlyReplacer
 @since 1.4
 */
- (instancetype __nonnull)initWithComThoughtworksXstreamIoNamingNameCoder:(id<ComThoughtworksXstreamIoNamingNameCoder>)nameCoder;

/*!
 @brief Creates a AbstractXmlFriendlyDriver with custom XmlFriendlyReplacer
 @param replacer the XmlFriendlyReplacer
 */
- (instancetype __nonnull)initWithComThoughtworksXstreamIoXmlXmlFriendlyReplacer:(ComThoughtworksXstreamIoXmlXmlFriendlyReplacer *)replacer;

#pragma mark Protected

/*!
 */
- (ComThoughtworksXstreamIoXmlXmlFriendlyReplacer *)xmlFriendlyReplacer;

@end

J2OBJC_EMPTY_STATIC_INIT(ComThoughtworksXstreamIoXmlAbstractXmlDriver)

FOUNDATION_EXPORT void ComThoughtworksXstreamIoXmlAbstractXmlDriver_init(ComThoughtworksXstreamIoXmlAbstractXmlDriver *self);

FOUNDATION_EXPORT void ComThoughtworksXstreamIoXmlAbstractXmlDriver_initWithComThoughtworksXstreamIoNamingNameCoder_(ComThoughtworksXstreamIoXmlAbstractXmlDriver *self, id<ComThoughtworksXstreamIoNamingNameCoder> nameCoder);

FOUNDATION_EXPORT void ComThoughtworksXstreamIoXmlAbstractXmlDriver_initWithComThoughtworksXstreamIoXmlXmlFriendlyReplacer_(ComThoughtworksXstreamIoXmlAbstractXmlDriver *self, ComThoughtworksXstreamIoXmlXmlFriendlyReplacer *replacer);

J2OBJC_TYPE_LITERAL_HEADER(ComThoughtworksXstreamIoXmlAbstractXmlDriver)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComThoughtworksXstreamIoXmlAbstractXmlDriver")
