//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/io/xml/SaxWriter.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/XStream.h"
#include "com/thoughtworks/xstream/io/StreamException.h"
#include "com/thoughtworks/xstream/io/naming/NameCoder.h"
#include "com/thoughtworks/xstream/io/xml/AbstractXmlWriter.h"
#include "com/thoughtworks/xstream/io/xml/SaxWriter.h"
#include "com/thoughtworks/xstream/io/xml/XmlFriendlyNameCoder.h"
#include "com/thoughtworks/xstream/io/xml/XmlFriendlyReplacer.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/xml/sax/ContentHandler.h"
#include "org/xml/sax/DTDHandler.h"
#include "org/xml/sax/EntityResolver.h"
#include "org/xml/sax/ErrorHandler.h"
#include "org/xml/sax/InputSource.h"
#include "org/xml/sax/SAXException.h"
#include "org/xml/sax/SAXNotRecognizedException.h"
#include "org/xml/sax/SAXNotSupportedException.h"
#include "org/xml/sax/helpers/AttributesImpl.h"

@interface ComThoughtworksXstreamIoXmlSaxWriter () {
 @public
  /*!
   @brief The SAX EntityResolver associated to this XMLReader.
   */
  id<OrgXmlSaxEntityResolver> entityResolver_;
  /*!
   @brief The SAX DTDHandler associated to this XMLReader.
   */
  id<OrgXmlSaxDTDHandler> dtdHandler_;
  /*!
   @brief The SAX ContentHandler associated to this XMLReader.
   */
  id<OrgXmlSaxContentHandler> contentHandler_;
  /*!
   @brief The SAX ErrorHandler associated to this XMLReader.
   */
  id<OrgXmlSaxErrorHandler> errorHandler_;
  /*!
   @brief The SAX features defined for this XMLReader.
   <p>
  This class does not define any feature (yet) and ignores
  the SAX mandatory feature.  Thus, this member is present
  only to support the mandatory feature setting and retrieval
  logic defined by SAX.</p>
   */
  id<JavaUtilMap> features_;
  /*!
   @brief The SAX properties defined for this XMLReader.
   */
  id<JavaUtilMap> properties_;
  jboolean includeEnclosingDocument_;
  jint depth_;
  id<JavaUtilList> elementStack_;
  IOSCharArray *buffer_;
  jboolean startTagInProgress_;
  OrgXmlSaxHelpersAttributesImpl *attributeList_;
}

/*!
 @brief Serializes the Java objects of the configured list into a flow
  of SAX events.
 @throw SAXExceptionif the configured object list is invalid
                       or object serialization failed.
 */
- (void)parse;

/*!
 @brief Fires the SAX startDocument event towards the configured
  ContentHandler.
 @param multiObjectMode whether serialization of several                         object will be merge into a single
                          SAX document.
 @throw SAXExceptionif thrown by the ContentHandler.
 */
- (void)startDocumentWithBoolean:(jboolean)multiObjectMode;

/*!
 @brief Fires the SAX endDocument event towards the configured
  ContentHandler.
 @param multiObjectMode whether serialization of several                         object will be merge into a single
                          SAX document.
 @throw SAXExceptionif thrown by the ContentHandler.
 */
- (void)endDocumentWithBoolean:(jboolean)multiObjectMode;

/*!
 @brief Fires any pending SAX startElement event towards the
  configured ContentHandler.
 @throw SAXExceptionif thrown by the ContentHandler.
 */
- (void)flushStartTag;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoXmlSaxWriter, entityResolver_, id<OrgXmlSaxEntityResolver>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoXmlSaxWriter, dtdHandler_, id<OrgXmlSaxDTDHandler>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoXmlSaxWriter, contentHandler_, id<OrgXmlSaxContentHandler>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoXmlSaxWriter, errorHandler_, id<OrgXmlSaxErrorHandler>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoXmlSaxWriter, features_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoXmlSaxWriter, properties_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoXmlSaxWriter, elementStack_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoXmlSaxWriter, buffer_, IOSCharArray *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoXmlSaxWriter, attributeList_, OrgXmlSaxHelpersAttributesImpl *)

__attribute__((unused)) static void ComThoughtworksXstreamIoXmlSaxWriter_parse(ComThoughtworksXstreamIoXmlSaxWriter *self);

__attribute__((unused)) static void ComThoughtworksXstreamIoXmlSaxWriter_startDocumentWithBoolean_(ComThoughtworksXstreamIoXmlSaxWriter *self, jboolean multiObjectMode);

__attribute__((unused)) static void ComThoughtworksXstreamIoXmlSaxWriter_endDocumentWithBoolean_(ComThoughtworksXstreamIoXmlSaxWriter *self, jboolean multiObjectMode);

__attribute__((unused)) static void ComThoughtworksXstreamIoXmlSaxWriter_flushStartTag(ComThoughtworksXstreamIoXmlSaxWriter *self);

NSString *ComThoughtworksXstreamIoXmlSaxWriter_CONFIGURED_XSTREAM_PROPERTY = @"http://com.thoughtworks.xstream/sax/property/configured-xstream";
NSString *ComThoughtworksXstreamIoXmlSaxWriter_SOURCE_OBJECT_LIST_PROPERTY = @"http://com.thoughtworks.xstream/sax/property/source-object-list";

@implementation ComThoughtworksXstreamIoXmlSaxWriter

- (instancetype __nonnull)initWithComThoughtworksXstreamIoNamingNameCoder:(id<ComThoughtworksXstreamIoNamingNameCoder>)nameCoder {
  ComThoughtworksXstreamIoXmlSaxWriter_initWithComThoughtworksXstreamIoNamingNameCoder_(self, nameCoder);
  return self;
}

- (instancetype __nonnull)initWithBoolean:(jboolean)includeEnclosingDocument
withComThoughtworksXstreamIoNamingNameCoder:(id<ComThoughtworksXstreamIoNamingNameCoder>)nameCoder {
  ComThoughtworksXstreamIoXmlSaxWriter_initWithBoolean_withComThoughtworksXstreamIoNamingNameCoder_(self, includeEnclosingDocument, nameCoder);
  return self;
}

- (instancetype __nonnull)initWithComThoughtworksXstreamIoXmlXmlFriendlyReplacer:(ComThoughtworksXstreamIoXmlXmlFriendlyReplacer *)replacer {
  ComThoughtworksXstreamIoXmlSaxWriter_initWithComThoughtworksXstreamIoXmlXmlFriendlyReplacer_(self, replacer);
  return self;
}

- (instancetype __nonnull)initWithBoolean:(jboolean)includeEnclosingDocument
withComThoughtworksXstreamIoXmlXmlFriendlyReplacer:(ComThoughtworksXstreamIoXmlXmlFriendlyReplacer *)replacer {
  ComThoughtworksXstreamIoXmlSaxWriter_initWithBoolean_withComThoughtworksXstreamIoXmlXmlFriendlyReplacer_(self, includeEnclosingDocument, replacer);
  return self;
}

- (instancetype __nonnull)initWithBoolean:(jboolean)includeEnclosingDocument {
  ComThoughtworksXstreamIoXmlSaxWriter_initWithBoolean_(self, includeEnclosingDocument);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComThoughtworksXstreamIoXmlSaxWriter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setFeatureWithNSString:(NSString *)name
                   withBoolean:(jboolean)value {
  if (([((NSString *) nil_chk(name)) isEqual:@"http://xml.org/sax/features/namespaces"]) || ([name isEqual:@"http://xml.org/sax/features/namespace-prefixes"])) {
    [((id<JavaUtilMap>) nil_chk(self->features_)) putWithId:name withId:value ? JreLoadStatic(JavaLangBoolean, TRUE) : JreLoadStatic(JavaLangBoolean, FALSE)];
  }
  else {
    @throw create_OrgXmlSaxSAXNotRecognizedException_initWithNSString_(name);
  }
}

- (jboolean)getFeatureWithNSString:(NSString *)name {
  if (([((NSString *) nil_chk(name)) isEqual:@"http://xml.org/sax/features/namespaces"]) || ([name isEqual:@"http://xml.org/sax/features/namespace-prefixes"])) {
    JavaLangBoolean *value = (JavaLangBoolean *) cast_chk(([((id<JavaUtilMap>) nil_chk(self->features_)) getWithId:name]), [JavaLangBoolean class]);
    if (value == nil) {
      value = JreLoadStatic(JavaLangBoolean, FALSE);
    }
    return [((JavaLangBoolean *) nil_chk(value)) booleanValue];
  }
  else {
    @throw create_OrgXmlSaxSAXNotRecognizedException_initWithNSString_(name);
  }
}

- (void)setPropertyWithNSString:(NSString *)name
                         withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:ComThoughtworksXstreamIoXmlSaxWriter_CONFIGURED_XSTREAM_PROPERTY]) {
    if (!([value isKindOfClass:[ComThoughtworksXstreamXStream class]])) {
      @throw create_OrgXmlSaxSAXNotSupportedException_initWithNSString_(JreStrcat("$$$", @"Value for property \"", ComThoughtworksXstreamIoXmlSaxWriter_CONFIGURED_XSTREAM_PROPERTY, @"\" must be a non-null XStream object"));
    }
  }
  else if ([name isEqual:ComThoughtworksXstreamIoXmlSaxWriter_SOURCE_OBJECT_LIST_PROPERTY]) {
    if ([JavaUtilList_class_() isInstance:value]) {
      id<JavaUtilList> list = (id<JavaUtilList>) cast_check(value, JavaUtilList_class_());
      if ([((id<JavaUtilList>) nil_chk(list)) isEmpty]) {
        @throw create_OrgXmlSaxSAXNotSupportedException_initWithNSString_(JreStrcat("$$$", @"Value for property \"", ComThoughtworksXstreamIoXmlSaxWriter_SOURCE_OBJECT_LIST_PROPERTY, @"\" shall not be an empty list"));
      }
      else {
        value = JavaUtilCollections_unmodifiableListWithJavaUtilList_(create_JavaUtilArrayList_initWithJavaUtilCollection_(list));
      }
    }
    else {
      @throw create_OrgXmlSaxSAXNotSupportedException_initWithNSString_(JreStrcat("$$$", @"Value for property \"", ComThoughtworksXstreamIoXmlSaxWriter_SOURCE_OBJECT_LIST_PROPERTY, @"\" must be a non-null List object"));
    }
  }
  else {
    @throw create_OrgXmlSaxSAXNotRecognizedException_initWithNSString_(name);
  }
  [((id<JavaUtilMap>) nil_chk(self->properties_)) putWithId:name withId:value];
}

- (id)getPropertyWithNSString:(NSString *)name {
  if (([((NSString *) nil_chk(name)) isEqual:ComThoughtworksXstreamIoXmlSaxWriter_CONFIGURED_XSTREAM_PROPERTY]) || ([name isEqual:ComThoughtworksXstreamIoXmlSaxWriter_SOURCE_OBJECT_LIST_PROPERTY])) {
    return [((id<JavaUtilMap>) nil_chk(self->properties_)) getWithId:name];
  }
  else {
    @throw create_OrgXmlSaxSAXNotRecognizedException_initWithNSString_(name);
  }
}

- (void)setEntityResolverWithOrgXmlSaxEntityResolver:(id<OrgXmlSaxEntityResolver>)resolver {
  if (resolver == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"resolver");
  }
  JreStrongAssign(&self->entityResolver_, resolver);
  return;
}

- (id<OrgXmlSaxEntityResolver>)getEntityResolver {
  return self->entityResolver_;
}

- (void)setDTDHandlerWithOrgXmlSaxDTDHandler:(id<OrgXmlSaxDTDHandler>)handler {
  if (handler == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"handler");
  }
  JreStrongAssign(&self->dtdHandler_, handler);
  return;
}

- (id<OrgXmlSaxDTDHandler>)getDTDHandler {
  return self->dtdHandler_;
}

- (void)setContentHandlerWithOrgXmlSaxContentHandler:(id<OrgXmlSaxContentHandler>)handler {
  if (handler == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"handler");
  }
  JreStrongAssign(&self->contentHandler_, handler);
  return;
}

- (id<OrgXmlSaxContentHandler>)getContentHandler {
  return self->contentHandler_;
}

- (void)setErrorHandlerWithOrgXmlSaxErrorHandler:(id<OrgXmlSaxErrorHandler>)handler {
  if (handler == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"handler");
  }
  JreStrongAssign(&self->errorHandler_, handler);
  return;
}

- (id<OrgXmlSaxErrorHandler>)getErrorHandler {
  return self->errorHandler_;
}

- (void)parseWithNSString:(NSString *)systemId {
  ComThoughtworksXstreamIoXmlSaxWriter_parse(self);
}

- (void)parseWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)input {
  ComThoughtworksXstreamIoXmlSaxWriter_parse(self);
}

- (void)parse {
  ComThoughtworksXstreamIoXmlSaxWriter_parse(self);
}

- (void)startNodeWithNSString:(NSString *)name {
  @try {
    if (self->depth_ != 0) {
      ComThoughtworksXstreamIoXmlSaxWriter_flushStartTag(self);
    }
    else if (includeEnclosingDocument_) {
      ComThoughtworksXstreamIoXmlSaxWriter_startDocumentWithBoolean_(self, false);
    }
    [((id<JavaUtilList>) nil_chk(self->elementStack_)) addWithInt:0 withId:[self escapeXmlNameWithNSString:name]];
    self->startTagInProgress_ = true;
    self->depth_++;
  }
  @catch (OrgXmlSaxSAXException *e) {
    @throw create_ComThoughtworksXstreamIoStreamException_initWithJavaLangThrowable_(e);
  }
}

- (void)addAttributeWithNSString:(NSString *)name
                    withNSString:(NSString *)value {
  if (self->startTagInProgress_) {
    NSString *escapedName = [self escapeXmlNameWithNSString:name];
    [((OrgXmlSaxHelpersAttributesImpl *) nil_chk(self->attributeList_)) addAttributeWithNSString:@"" withNSString:escapedName withNSString:escapedName withNSString:@"CDATA" withNSString:value];
  }
  else {
    @throw create_ComThoughtworksXstreamIoStreamException_initWithJavaLangThrowable_(create_JavaLangIllegalStateException_initWithNSString_(@"No startElement being processed"));
  }
}

- (void)setValueWithNSString:(NSString *)text {
  @try {
    ComThoughtworksXstreamIoXmlSaxWriter_flushStartTag(self);
    jint lg = [((NSString *) nil_chk(text)) java_length];
    if (lg > ((IOSCharArray *) nil_chk(buffer_))->size_) {
      JreStrongAssignAndConsume(&buffer_, [IOSCharArray newArrayWithLength:lg]);
    }
    [text java_getChars:0 sourceEnd:lg destination:buffer_ destinationBegin:0];
    [((id<OrgXmlSaxContentHandler>) nil_chk(self->contentHandler_)) charactersWithCharArray:buffer_ withInt:0 withInt:lg];
  }
  @catch (OrgXmlSaxSAXException *e) {
    @throw create_ComThoughtworksXstreamIoStreamException_initWithJavaLangThrowable_(e);
  }
}

- (void)endNode {
  @try {
    ComThoughtworksXstreamIoXmlSaxWriter_flushStartTag(self);
    NSString *tagName = (NSString *) cast_chk(([((id<JavaUtilList>) nil_chk(self->elementStack_)) removeWithInt:0]), [NSString class]);
    [((id<OrgXmlSaxContentHandler>) nil_chk(self->contentHandler_)) endElementWithNSString:@"" withNSString:tagName withNSString:tagName];
    self->depth_--;
    if (self->depth_ == 0 && includeEnclosingDocument_) {
      ComThoughtworksXstreamIoXmlSaxWriter_endDocumentWithBoolean_(self, false);
    }
  }
  @catch (OrgXmlSaxSAXException *e) {
    @throw create_ComThoughtworksXstreamIoStreamException_initWithJavaLangThrowable_(e);
  }
}

- (void)startDocumentWithBoolean:(jboolean)multiObjectMode {
  ComThoughtworksXstreamIoXmlSaxWriter_startDocumentWithBoolean_(self, multiObjectMode);
}

- (void)endDocumentWithBoolean:(jboolean)multiObjectMode {
  ComThoughtworksXstreamIoXmlSaxWriter_endDocumentWithBoolean_(self, multiObjectMode);
}

- (void)flushStartTag {
  ComThoughtworksXstreamIoXmlSaxWriter_flushStartTag(self);
}

- (void)flush {
}

- (void)close {
}

- (void)dealloc {
  RELEASE_(entityResolver_);
  RELEASE_(dtdHandler_);
  RELEASE_(contentHandler_);
  RELEASE_(errorHandler_);
  RELEASE_(features_);
  RELEASE_(properties_);
  RELEASE_(elementStack_);
  RELEASE_(buffer_);
  RELEASE_(attributeList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 7, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, 12, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 9, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LOrgXmlSaxEntityResolver;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "LOrgXmlSaxDTDHandler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "LOrgXmlSaxContentHandler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LOrgXmlSaxErrorHandler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 9, 23, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 24, 23, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 23, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 4, 23, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 4, 23, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 23, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComThoughtworksXstreamIoNamingNameCoder:);
  methods[1].selector = @selector(initWithBoolean:withComThoughtworksXstreamIoNamingNameCoder:);
  methods[2].selector = @selector(initWithComThoughtworksXstreamIoXmlXmlFriendlyReplacer:);
  methods[3].selector = @selector(initWithBoolean:withComThoughtworksXstreamIoXmlXmlFriendlyReplacer:);
  methods[4].selector = @selector(initWithBoolean:);
  methods[5].selector = @selector(init);
  methods[6].selector = @selector(setFeatureWithNSString:withBoolean:);
  methods[7].selector = @selector(getFeatureWithNSString:);
  methods[8].selector = @selector(setPropertyWithNSString:withId:);
  methods[9].selector = @selector(getPropertyWithNSString:);
  methods[10].selector = @selector(setEntityResolverWithOrgXmlSaxEntityResolver:);
  methods[11].selector = @selector(getEntityResolver);
  methods[12].selector = @selector(setDTDHandlerWithOrgXmlSaxDTDHandler:);
  methods[13].selector = @selector(getDTDHandler);
  methods[14].selector = @selector(setContentHandlerWithOrgXmlSaxContentHandler:);
  methods[15].selector = @selector(getContentHandler);
  methods[16].selector = @selector(setErrorHandlerWithOrgXmlSaxErrorHandler:);
  methods[17].selector = @selector(getErrorHandler);
  methods[18].selector = @selector(parseWithNSString:);
  methods[19].selector = @selector(parseWithOrgXmlSaxInputSource:);
  methods[20].selector = @selector(parse);
  methods[21].selector = @selector(startNodeWithNSString:);
  methods[22].selector = @selector(addAttributeWithNSString:withNSString:);
  methods[23].selector = @selector(setValueWithNSString:);
  methods[24].selector = @selector(endNode);
  methods[25].selector = @selector(startDocumentWithBoolean:);
  methods[26].selector = @selector(endDocumentWithBoolean:);
  methods[27].selector = @selector(flushStartTag);
  methods[28].selector = @selector(flush);
  methods[29].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CONFIGURED_XSTREAM_PROPERTY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
    { "SOURCE_OBJECT_LIST_PROPERTY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 32, -1, -1 },
    { "entityResolver_", "LOrgXmlSaxEntityResolver;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dtdHandler_", "LOrgXmlSaxDTDHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "contentHandler_", "LOrgXmlSaxContentHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "errorHandler_", "LOrgXmlSaxErrorHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "features_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "properties_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "includeEnclosingDocument_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "depth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "elementStack_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buffer_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "startTagInProgress_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "attributeList_", "LOrgXmlSaxHelpersAttributesImpl;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComThoughtworksXstreamIoNamingNameCoder;", "ZLComThoughtworksXstreamIoNamingNameCoder;", "LComThoughtworksXstreamIoXmlXmlFriendlyReplacer;", "ZLComThoughtworksXstreamIoXmlXmlFriendlyReplacer;", "Z", "setFeature", "LNSString;Z", "LOrgXmlSaxSAXNotRecognizedException;", "getFeature", "LNSString;", "setProperty", "LNSString;LNSObject;", "LOrgXmlSaxSAXNotRecognizedException;LOrgXmlSaxSAXNotSupportedException;", "getProperty", "setEntityResolver", "LOrgXmlSaxEntityResolver;", "setDTDHandler", "LOrgXmlSaxDTDHandler;", "setContentHandler", "LOrgXmlSaxContentHandler;", "setErrorHandler", "LOrgXmlSaxErrorHandler;", "parse", "LOrgXmlSaxSAXException;", "LOrgXmlSaxInputSource;", "startNode", "addAttribute", "LNSString;LNSString;", "setValue", "startDocument", "endDocument", &ComThoughtworksXstreamIoXmlSaxWriter_CONFIGURED_XSTREAM_PROPERTY, &ComThoughtworksXstreamIoXmlSaxWriter_SOURCE_OBJECT_LIST_PROPERTY };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoXmlSaxWriter = { "SaxWriter", "com.thoughtworks.xstream.io.xml", ptrTable, methods, fields, 7, 0x11, 30, 14, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamIoXmlSaxWriter;
}

@end

void ComThoughtworksXstreamIoXmlSaxWriter_initWithComThoughtworksXstreamIoNamingNameCoder_(ComThoughtworksXstreamIoXmlSaxWriter *self, id<ComThoughtworksXstreamIoNamingNameCoder> nameCoder) {
  ComThoughtworksXstreamIoXmlSaxWriter_initWithBoolean_withComThoughtworksXstreamIoNamingNameCoder_(self, true, nameCoder);
}

ComThoughtworksXstreamIoXmlSaxWriter *new_ComThoughtworksXstreamIoXmlSaxWriter_initWithComThoughtworksXstreamIoNamingNameCoder_(id<ComThoughtworksXstreamIoNamingNameCoder> nameCoder) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamIoXmlSaxWriter, initWithComThoughtworksXstreamIoNamingNameCoder_, nameCoder)
}

ComThoughtworksXstreamIoXmlSaxWriter *create_ComThoughtworksXstreamIoXmlSaxWriter_initWithComThoughtworksXstreamIoNamingNameCoder_(id<ComThoughtworksXstreamIoNamingNameCoder> nameCoder) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamIoXmlSaxWriter, initWithComThoughtworksXstreamIoNamingNameCoder_, nameCoder)
}

void ComThoughtworksXstreamIoXmlSaxWriter_initWithBoolean_withComThoughtworksXstreamIoNamingNameCoder_(ComThoughtworksXstreamIoXmlSaxWriter *self, jboolean includeEnclosingDocument, id<ComThoughtworksXstreamIoNamingNameCoder> nameCoder) {
  ComThoughtworksXstreamIoXmlAbstractXmlWriter_initWithComThoughtworksXstreamIoNamingNameCoder_(self, nameCoder);
  JreStrongAssign(&self->entityResolver_, nil);
  JreStrongAssign(&self->dtdHandler_, nil);
  JreStrongAssign(&self->contentHandler_, nil);
  JreStrongAssign(&self->errorHandler_, nil);
  JreStrongAssignAndConsume(&self->features_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->properties_, new_JavaUtilHashMap_init());
  self->depth_ = 0;
  JreStrongAssignAndConsume(&self->elementStack_, new_JavaUtilLinkedList_init());
  JreStrongAssignAndConsume(&self->buffer_, [IOSCharArray newArrayWithLength:128]);
  self->startTagInProgress_ = false;
  JreStrongAssignAndConsume(&self->attributeList_, new_OrgXmlSaxHelpersAttributesImpl_init());
  self->includeEnclosingDocument_ = includeEnclosingDocument;
}

ComThoughtworksXstreamIoXmlSaxWriter *new_ComThoughtworksXstreamIoXmlSaxWriter_initWithBoolean_withComThoughtworksXstreamIoNamingNameCoder_(jboolean includeEnclosingDocument, id<ComThoughtworksXstreamIoNamingNameCoder> nameCoder) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamIoXmlSaxWriter, initWithBoolean_withComThoughtworksXstreamIoNamingNameCoder_, includeEnclosingDocument, nameCoder)
}

ComThoughtworksXstreamIoXmlSaxWriter *create_ComThoughtworksXstreamIoXmlSaxWriter_initWithBoolean_withComThoughtworksXstreamIoNamingNameCoder_(jboolean includeEnclosingDocument, id<ComThoughtworksXstreamIoNamingNameCoder> nameCoder) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamIoXmlSaxWriter, initWithBoolean_withComThoughtworksXstreamIoNamingNameCoder_, includeEnclosingDocument, nameCoder)
}

void ComThoughtworksXstreamIoXmlSaxWriter_initWithComThoughtworksXstreamIoXmlXmlFriendlyReplacer_(ComThoughtworksXstreamIoXmlSaxWriter *self, ComThoughtworksXstreamIoXmlXmlFriendlyReplacer *replacer) {
  ComThoughtworksXstreamIoXmlSaxWriter_initWithBoolean_withComThoughtworksXstreamIoXmlXmlFriendlyReplacer_(self, true, replacer);
}

ComThoughtworksXstreamIoXmlSaxWriter *new_ComThoughtworksXstreamIoXmlSaxWriter_initWithComThoughtworksXstreamIoXmlXmlFriendlyReplacer_(ComThoughtworksXstreamIoXmlXmlFriendlyReplacer *replacer) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamIoXmlSaxWriter, initWithComThoughtworksXstreamIoXmlXmlFriendlyReplacer_, replacer)
}

ComThoughtworksXstreamIoXmlSaxWriter *create_ComThoughtworksXstreamIoXmlSaxWriter_initWithComThoughtworksXstreamIoXmlXmlFriendlyReplacer_(ComThoughtworksXstreamIoXmlXmlFriendlyReplacer *replacer) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamIoXmlSaxWriter, initWithComThoughtworksXstreamIoXmlXmlFriendlyReplacer_, replacer)
}

void ComThoughtworksXstreamIoXmlSaxWriter_initWithBoolean_withComThoughtworksXstreamIoXmlXmlFriendlyReplacer_(ComThoughtworksXstreamIoXmlSaxWriter *self, jboolean includeEnclosingDocument, ComThoughtworksXstreamIoXmlXmlFriendlyReplacer *replacer) {
  ComThoughtworksXstreamIoXmlSaxWriter_initWithBoolean_withComThoughtworksXstreamIoNamingNameCoder_(self, includeEnclosingDocument, replacer);
}

ComThoughtworksXstreamIoXmlSaxWriter *new_ComThoughtworksXstreamIoXmlSaxWriter_initWithBoolean_withComThoughtworksXstreamIoXmlXmlFriendlyReplacer_(jboolean includeEnclosingDocument, ComThoughtworksXstreamIoXmlXmlFriendlyReplacer *replacer) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamIoXmlSaxWriter, initWithBoolean_withComThoughtworksXstreamIoXmlXmlFriendlyReplacer_, includeEnclosingDocument, replacer)
}

ComThoughtworksXstreamIoXmlSaxWriter *create_ComThoughtworksXstreamIoXmlSaxWriter_initWithBoolean_withComThoughtworksXstreamIoXmlXmlFriendlyReplacer_(jboolean includeEnclosingDocument, ComThoughtworksXstreamIoXmlXmlFriendlyReplacer *replacer) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamIoXmlSaxWriter, initWithBoolean_withComThoughtworksXstreamIoXmlXmlFriendlyReplacer_, includeEnclosingDocument, replacer)
}

void ComThoughtworksXstreamIoXmlSaxWriter_initWithBoolean_(ComThoughtworksXstreamIoXmlSaxWriter *self, jboolean includeEnclosingDocument) {
  ComThoughtworksXstreamIoXmlSaxWriter_initWithBoolean_withComThoughtworksXstreamIoNamingNameCoder_(self, includeEnclosingDocument, create_ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_init());
}

ComThoughtworksXstreamIoXmlSaxWriter *new_ComThoughtworksXstreamIoXmlSaxWriter_initWithBoolean_(jboolean includeEnclosingDocument) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamIoXmlSaxWriter, initWithBoolean_, includeEnclosingDocument)
}

ComThoughtworksXstreamIoXmlSaxWriter *create_ComThoughtworksXstreamIoXmlSaxWriter_initWithBoolean_(jboolean includeEnclosingDocument) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamIoXmlSaxWriter, initWithBoolean_, includeEnclosingDocument)
}

void ComThoughtworksXstreamIoXmlSaxWriter_init(ComThoughtworksXstreamIoXmlSaxWriter *self) {
  ComThoughtworksXstreamIoXmlSaxWriter_initWithBoolean_(self, true);
}

ComThoughtworksXstreamIoXmlSaxWriter *new_ComThoughtworksXstreamIoXmlSaxWriter_init() {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamIoXmlSaxWriter, init)
}

ComThoughtworksXstreamIoXmlSaxWriter *create_ComThoughtworksXstreamIoXmlSaxWriter_init() {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamIoXmlSaxWriter, init)
}

void ComThoughtworksXstreamIoXmlSaxWriter_parse(ComThoughtworksXstreamIoXmlSaxWriter *self) {
  ComThoughtworksXstreamXStream *xstream = (ComThoughtworksXstreamXStream *) cast_chk(([((id<JavaUtilMap>) nil_chk(self->properties_)) getWithId:ComThoughtworksXstreamIoXmlSaxWriter_CONFIGURED_XSTREAM_PROPERTY]), [ComThoughtworksXstreamXStream class]);
  if (xstream == nil) {
    xstream = create_ComThoughtworksXstreamXStream_init();
  }
  id<JavaUtilList> source = (id<JavaUtilList>) cast_check(([self->properties_ getWithId:ComThoughtworksXstreamIoXmlSaxWriter_SOURCE_OBJECT_LIST_PROPERTY]), JavaUtilList_class_());
  if ((source == nil) || ([((id<JavaUtilList>) nil_chk(source)) isEmpty])) {
    @throw create_OrgXmlSaxSAXException_initWithNSString_(JreStrcat("$$$", @"Missing or empty source object list. Setting property \"", ComThoughtworksXstreamIoXmlSaxWriter_SOURCE_OBJECT_LIST_PROPERTY, @"\" is mandatory"));
  }
  @try {
    ComThoughtworksXstreamIoXmlSaxWriter_startDocumentWithBoolean_(self, true);
    for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(source)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
      [xstream marshalWithId:[i next] withComThoughtworksXstreamIoHierarchicalStreamWriter:self];
    }
    ComThoughtworksXstreamIoXmlSaxWriter_endDocumentWithBoolean_(self, true);
  }
  @catch (ComThoughtworksXstreamIoStreamException *e) {
    if ([[e getCause] isKindOfClass:[OrgXmlSaxSAXException class]]) {
      @throw nil_chk((OrgXmlSaxSAXException *) cast_chk(([e getCause]), [OrgXmlSaxSAXException class]));
    }
    else {
      @throw create_OrgXmlSaxSAXException_initWithJavaLangException_(e);
    }
  }
}

void ComThoughtworksXstreamIoXmlSaxWriter_startDocumentWithBoolean_(ComThoughtworksXstreamIoXmlSaxWriter *self, jboolean multiObjectMode) {
  if (self->depth_ == 0) {
    [((id<OrgXmlSaxContentHandler>) nil_chk(self->contentHandler_)) startDocument];
    if (multiObjectMode) {
      self->depth_++;
    }
  }
}

void ComThoughtworksXstreamIoXmlSaxWriter_endDocumentWithBoolean_(ComThoughtworksXstreamIoXmlSaxWriter *self, jboolean multiObjectMode) {
  if ((self->depth_ == 0) || ((self->depth_ == 1) && (multiObjectMode))) {
    [((id<OrgXmlSaxContentHandler>) nil_chk(self->contentHandler_)) endDocument];
    self->depth_ = 0;
  }
}

void ComThoughtworksXstreamIoXmlSaxWriter_flushStartTag(ComThoughtworksXstreamIoXmlSaxWriter *self) {
  if (self->startTagInProgress_) {
    NSString *tagName = (NSString *) cast_chk(([((id<JavaUtilList>) nil_chk(self->elementStack_)) getWithInt:0]), [NSString class]);
    [((id<OrgXmlSaxContentHandler>) nil_chk(self->contentHandler_)) startElementWithNSString:@"" withNSString:tagName withNSString:tagName withOrgXmlSaxAttributes:self->attributeList_];
    [((OrgXmlSaxHelpersAttributesImpl *) nil_chk(self->attributeList_)) clear];
    self->startTagInProgress_ = false;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamIoXmlSaxWriter)
