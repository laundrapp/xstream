//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/core/util/Fields.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComThoughtworksXstreamCoreUtilFields")
#ifdef RESTRICT_ComThoughtworksXstreamCoreUtilFields
#define INCLUDE_ALL_ComThoughtworksXstreamCoreUtilFields 0
#else
#define INCLUDE_ALL_ComThoughtworksXstreamCoreUtilFields 1
#endif
#undef RESTRICT_ComThoughtworksXstreamCoreUtilFields

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComThoughtworksXstreamCoreUtilFields_) && (INCLUDE_ALL_ComThoughtworksXstreamCoreUtilFields || defined(INCLUDE_ComThoughtworksXstreamCoreUtilFields))
#define ComThoughtworksXstreamCoreUtilFields_

@class IOSClass;
@class JavaLangReflectField;

/*!
 @brief Slightly nicer way to find, get and set fields in classes.Wraps standard java.lang.reflect.Field calls but wraps
  wraps exception in XStreamExceptions.
 @author Joe Walnes
 @author J&ouml;rg Schaible
 */
@interface ComThoughtworksXstreamCoreUtilFields : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (JavaLangReflectField *)findWithIOSClass:(IOSClass *)type
                              withNSString:(NSString *)name;

+ (JavaLangReflectField *)locateWithIOSClass:(IOSClass *)definedIn
                                withIOSClass:(IOSClass *)fieldType
                                 withBoolean:(jboolean)isStatic;

+ (id)readWithJavaLangReflectField:(JavaLangReflectField *)field
                            withId:(id)instance;

+ (void)writeWithJavaLangReflectField:(JavaLangReflectField *)field
                               withId:(id)instance
                               withId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(ComThoughtworksXstreamCoreUtilFields)

FOUNDATION_EXPORT void ComThoughtworksXstreamCoreUtilFields_init(ComThoughtworksXstreamCoreUtilFields *self);

FOUNDATION_EXPORT ComThoughtworksXstreamCoreUtilFields *new_ComThoughtworksXstreamCoreUtilFields_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamCoreUtilFields *create_ComThoughtworksXstreamCoreUtilFields_init(void);

FOUNDATION_EXPORT JavaLangReflectField *ComThoughtworksXstreamCoreUtilFields_locateWithIOSClass_withIOSClass_withBoolean_(IOSClass *definedIn, IOSClass *fieldType, jboolean isStatic);

FOUNDATION_EXPORT JavaLangReflectField *ComThoughtworksXstreamCoreUtilFields_findWithIOSClass_withNSString_(IOSClass *type, NSString *name);

FOUNDATION_EXPORT void ComThoughtworksXstreamCoreUtilFields_writeWithJavaLangReflectField_withId_withId_(JavaLangReflectField *field, id instance, id value);

FOUNDATION_EXPORT id ComThoughtworksXstreamCoreUtilFields_readWithJavaLangReflectField_withId_(JavaLangReflectField *field, id instance);

J2OBJC_TYPE_LITERAL_HEADER(ComThoughtworksXstreamCoreUtilFields)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComThoughtworksXstreamCoreUtilFields")
