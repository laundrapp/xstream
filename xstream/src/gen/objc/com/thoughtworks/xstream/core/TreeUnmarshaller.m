//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/core/TreeUnmarshaller.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/Converter.h"
#include "com/thoughtworks/xstream/converters/ConverterLookup.h"
#include "com/thoughtworks/xstream/converters/DataHolder.h"
#include "com/thoughtworks/xstream/converters/ErrorReporter.h"
#include "com/thoughtworks/xstream/converters/ErrorWriter.h"
#include "com/thoughtworks/xstream/core/MapBackedDataHolder.h"
#include "com/thoughtworks/xstream/core/TreeUnmarshaller.h"
#include "com/thoughtworks/xstream/core/util/FastStack.h"
#include "com/thoughtworks/xstream/core/util/HierarchicalStreams.h"
#include "com/thoughtworks/xstream/core/util/PrioritizedList.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/util/Iterator.h"

@interface ComThoughtworksXstreamCoreTreeUnmarshaller () {
 @public
  id root_;
  id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup_;
  id<ComThoughtworksXstreamMapperMapper> mapper_;
  ComThoughtworksXstreamCoreUtilFastStack *types_;
  id<ComThoughtworksXstreamConvertersDataHolder> dataHolder_;
  ComThoughtworksXstreamCoreUtilPrioritizedList *validationList_;
}

- (void)addInformationToWithComThoughtworksXstreamConvertersErrorWriter:(id<ComThoughtworksXstreamConvertersErrorWriter>)errorWriter
                                                           withIOSClass:(IOSClass *)type
                          withComThoughtworksXstreamConvertersConverter:(id<ComThoughtworksXstreamConvertersConverter>)converter
                                                                 withId:(id)parent;

- (void)lazilyCreateDataHolder;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreTreeUnmarshaller, root_, id)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreTreeUnmarshaller, converterLookup_, id<ComThoughtworksXstreamConvertersConverterLookup>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreTreeUnmarshaller, mapper_, id<ComThoughtworksXstreamMapperMapper>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreTreeUnmarshaller, types_, ComThoughtworksXstreamCoreUtilFastStack *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreTreeUnmarshaller, dataHolder_, id<ComThoughtworksXstreamConvertersDataHolder>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreTreeUnmarshaller, validationList_, ComThoughtworksXstreamCoreUtilPrioritizedList *)

__attribute__((unused)) static void ComThoughtworksXstreamCoreTreeUnmarshaller_addInformationToWithComThoughtworksXstreamConvertersErrorWriter_withIOSClass_withComThoughtworksXstreamConvertersConverter_withId_(ComThoughtworksXstreamCoreTreeUnmarshaller *self, id<ComThoughtworksXstreamConvertersErrorWriter> errorWriter, IOSClass *type, id<ComThoughtworksXstreamConvertersConverter> converter, id parent);

__attribute__((unused)) static void ComThoughtworksXstreamCoreTreeUnmarshaller_lazilyCreateDataHolder(ComThoughtworksXstreamCoreTreeUnmarshaller *self);

@implementation ComThoughtworksXstreamCoreTreeUnmarshaller

- (instancetype __nonnull)initWithId:(id)root
withComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)converterLookup
withComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper {
  ComThoughtworksXstreamCoreTreeUnmarshaller_initWithId_withComThoughtworksXstreamIoHierarchicalStreamReader_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamMapperMapper_(self, root, reader, converterLookup, mapper);
  return self;
}

- (id)convertAnotherWithId:(id)parent
              withIOSClass:(IOSClass *)type {
  return [self convertAnotherWithId:parent withIOSClass:type withComThoughtworksXstreamConvertersConverter:nil];
}

- (id)convertAnotherWithId:(id)parent
              withIOSClass:(IOSClass *)type
withComThoughtworksXstreamConvertersConverter:(id<ComThoughtworksXstreamConvertersConverter>)converter {
  type = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper_)) defaultImplementationOfWithIOSClass:type];
  if (converter == nil) {
    converter = [((id<ComThoughtworksXstreamConvertersConverterLookup>) nil_chk(converterLookup_)) lookupConverterForTypeWithIOSClass:type];
  }
  else {
    if (![converter canConvertWithIOSClass:type]) {
      ComThoughtworksXstreamConvertersConversionException *e = create_ComThoughtworksXstreamConvertersConversionException_initWithNSString_(@"Explicit selected converter cannot handle type");
      [e addWithNSString:@"item-type" withNSString:[((IOSClass *) nil_chk(type)) getName]];
      [e addWithNSString:@"converter-type" withNSString:[[converter java_getClass] getName]];
      @throw e;
    }
  }
  return [self convertWithId:parent withIOSClass:type withComThoughtworksXstreamConvertersConverter:converter];
}

- (id)convertWithId:(id)parent
       withIOSClass:(IOSClass *)type
withComThoughtworksXstreamConvertersConverter:(id<ComThoughtworksXstreamConvertersConverter>)converter {
  @try {
    [((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(types_)) pushWithId:type];
    id result = [((id<ComThoughtworksXstreamConvertersConverter>) nil_chk(converter)) unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:reader_ withComThoughtworksXstreamConvertersUnmarshallingContext:self];
    [((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(types_)) popSilently];
    return result;
  }
  @catch (ComThoughtworksXstreamConvertersConversionException *conversionException) {
    ComThoughtworksXstreamCoreTreeUnmarshaller_addInformationToWithComThoughtworksXstreamConvertersErrorWriter_withIOSClass_withComThoughtworksXstreamConvertersConverter_withId_(self, conversionException, type, converter, parent);
    @throw conversionException;
  }
  @catch (JavaLangRuntimeException *e) {
    ComThoughtworksXstreamConvertersConversionException *conversionException = create_ComThoughtworksXstreamConvertersConversionException_initWithJavaLangThrowable_(e);
    ComThoughtworksXstreamCoreTreeUnmarshaller_addInformationToWithComThoughtworksXstreamConvertersErrorWriter_withIOSClass_withComThoughtworksXstreamConvertersConverter_withId_(self, conversionException, type, converter, parent);
    @throw conversionException;
  }
}

- (void)addInformationToWithComThoughtworksXstreamConvertersErrorWriter:(id<ComThoughtworksXstreamConvertersErrorWriter>)errorWriter
                                                           withIOSClass:(IOSClass *)type
                          withComThoughtworksXstreamConvertersConverter:(id<ComThoughtworksXstreamConvertersConverter>)converter
                                                                 withId:(id)parent {
  ComThoughtworksXstreamCoreTreeUnmarshaller_addInformationToWithComThoughtworksXstreamConvertersErrorWriter_withIOSClass_withComThoughtworksXstreamConvertersConverter_withId_(self, errorWriter, type, converter, parent);
}

- (void)addCompletionCallbackWithJavaLangRunnable:(id<JavaLangRunnable>)work
                                          withInt:(jint)priority {
  [((ComThoughtworksXstreamCoreUtilPrioritizedList *) nil_chk(validationList_)) addWithId:work withInt:priority];
}

- (id)currentObject {
  return [((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(types_)) size] == 1 ? root_ : nil;
}

- (IOSClass *)getRequiredType {
  return (IOSClass *) cast_chk([((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(types_)) peek], [IOSClass class]);
}

- (id)getWithId:(id)key {
  ComThoughtworksXstreamCoreTreeUnmarshaller_lazilyCreateDataHolder(self);
  return [((id<ComThoughtworksXstreamConvertersDataHolder>) nil_chk(dataHolder_)) getWithId:key];
}

- (void)putWithId:(id)key
           withId:(id)value {
  ComThoughtworksXstreamCoreTreeUnmarshaller_lazilyCreateDataHolder(self);
  [((id<ComThoughtworksXstreamConvertersDataHolder>) nil_chk(dataHolder_)) putWithId:key withId:value];
}

- (id<JavaUtilIterator>)keys {
  ComThoughtworksXstreamCoreTreeUnmarshaller_lazilyCreateDataHolder(self);
  return [((id<ComThoughtworksXstreamConvertersDataHolder>) nil_chk(dataHolder_)) keys];
}

- (void)lazilyCreateDataHolder {
  ComThoughtworksXstreamCoreTreeUnmarshaller_lazilyCreateDataHolder(self);
}

- (id)startWithComThoughtworksXstreamConvertersDataHolder:(id<ComThoughtworksXstreamConvertersDataHolder>)dataHolder {
  JreStrongAssign(&self->dataHolder_, dataHolder);
  IOSClass *type = ComThoughtworksXstreamCoreUtilHierarchicalStreams_readClassTypeWithComThoughtworksXstreamIoHierarchicalStreamReader_withComThoughtworksXstreamMapperMapper_(reader_, mapper_);
  id result = [self convertAnotherWithId:nil withIOSClass:type];
  id<JavaUtilIterator> validations = [((ComThoughtworksXstreamCoreUtilPrioritizedList *) nil_chk(validationList_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(validations)) hasNext]) {
    id<JavaLangRunnable> runnable = (id<JavaLangRunnable>) cast_check([validations next], JavaLangRunnable_class_());
    [((id<JavaLangRunnable>) nil_chk(runnable)) run];
  }
  return result;
}

- (id<ComThoughtworksXstreamMapperMapper>)getMapper {
  return self->mapper_;
}

- (void)dealloc {
  RELEASE_(root_);
  RELEASE_(reader_);
  RELEASE_(converterLookup_);
  RELEASE_(mapper_);
  RELEASE_(types_);
  RELEASE_(dataHolder_);
  RELEASE_(validationList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LComThoughtworksXstreamMapperMapper;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithId:withComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersConverterLookup:withComThoughtworksXstreamMapperMapper:);
  methods[1].selector = @selector(convertAnotherWithId:withIOSClass:);
  methods[2].selector = @selector(convertAnotherWithId:withIOSClass:withComThoughtworksXstreamConvertersConverter:);
  methods[3].selector = @selector(convertWithId:withIOSClass:withComThoughtworksXstreamConvertersConverter:);
  methods[4].selector = @selector(addInformationToWithComThoughtworksXstreamConvertersErrorWriter:withIOSClass:withComThoughtworksXstreamConvertersConverter:withId:);
  methods[5].selector = @selector(addCompletionCallbackWithJavaLangRunnable:withInt:);
  methods[6].selector = @selector(currentObject);
  methods[7].selector = @selector(getRequiredType);
  methods[8].selector = @selector(getWithId:);
  methods[9].selector = @selector(putWithId:withId:);
  methods[10].selector = @selector(keys);
  methods[11].selector = @selector(lazilyCreateDataHolder);
  methods[12].selector = @selector(startWithComThoughtworksXstreamConvertersDataHolder:);
  methods[13].selector = @selector(getMapper);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "root_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "reader_", "LComThoughtworksXstreamIoHierarchicalStreamReader;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "converterLookup_", "LComThoughtworksXstreamConvertersConverterLookup;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mapper_", "LComThoughtworksXstreamMapperMapper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "types_", "LComThoughtworksXstreamCoreUtilFastStack;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dataHolder_", "LComThoughtworksXstreamConvertersDataHolder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "validationList_", "LComThoughtworksXstreamCoreUtilPrioritizedList;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LComThoughtworksXstreamIoHierarchicalStreamReader;LComThoughtworksXstreamConvertersConverterLookup;LComThoughtworksXstreamMapperMapper;", "convertAnother", "LNSObject;LIOSClass;", "LNSObject;LIOSClass;LComThoughtworksXstreamConvertersConverter;", "convert", "addInformationTo", "LComThoughtworksXstreamConvertersErrorWriter;LIOSClass;LComThoughtworksXstreamConvertersConverter;LNSObject;", "addCompletionCallback", "LJavaLangRunnable;I", "get", "LNSObject;", "put", "LNSObject;LNSObject;", "start", "LComThoughtworksXstreamConvertersDataHolder;" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreTreeUnmarshaller = { "TreeUnmarshaller", "com.thoughtworks.xstream.core", ptrTable, methods, fields, 7, 0x1, 14, 7, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamCoreTreeUnmarshaller;
}

@end

void ComThoughtworksXstreamCoreTreeUnmarshaller_initWithId_withComThoughtworksXstreamIoHierarchicalStreamReader_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamMapperMapper_(ComThoughtworksXstreamCoreTreeUnmarshaller *self, id root, id<ComThoughtworksXstreamIoHierarchicalStreamReader> reader, id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup, id<ComThoughtworksXstreamMapperMapper> mapper) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->types_, new_ComThoughtworksXstreamCoreUtilFastStack_initWithInt_(16));
  JreStrongAssignAndConsume(&self->validationList_, new_ComThoughtworksXstreamCoreUtilPrioritizedList_init());
  JreStrongAssign(&self->root_, root);
  JreStrongAssign(&self->reader_, reader);
  JreStrongAssign(&self->converterLookup_, converterLookup);
  JreStrongAssign(&self->mapper_, mapper);
}

ComThoughtworksXstreamCoreTreeUnmarshaller *new_ComThoughtworksXstreamCoreTreeUnmarshaller_initWithId_withComThoughtworksXstreamIoHierarchicalStreamReader_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamMapperMapper_(id root, id<ComThoughtworksXstreamIoHierarchicalStreamReader> reader, id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup, id<ComThoughtworksXstreamMapperMapper> mapper) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamCoreTreeUnmarshaller, initWithId_withComThoughtworksXstreamIoHierarchicalStreamReader_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamMapperMapper_, root, reader, converterLookup, mapper)
}

ComThoughtworksXstreamCoreTreeUnmarshaller *create_ComThoughtworksXstreamCoreTreeUnmarshaller_initWithId_withComThoughtworksXstreamIoHierarchicalStreamReader_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamMapperMapper_(id root, id<ComThoughtworksXstreamIoHierarchicalStreamReader> reader, id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup, id<ComThoughtworksXstreamMapperMapper> mapper) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamCoreTreeUnmarshaller, initWithId_withComThoughtworksXstreamIoHierarchicalStreamReader_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamMapperMapper_, root, reader, converterLookup, mapper)
}

void ComThoughtworksXstreamCoreTreeUnmarshaller_addInformationToWithComThoughtworksXstreamConvertersErrorWriter_withIOSClass_withComThoughtworksXstreamConvertersConverter_withId_(ComThoughtworksXstreamCoreTreeUnmarshaller *self, id<ComThoughtworksXstreamConvertersErrorWriter> errorWriter, IOSClass *type, id<ComThoughtworksXstreamConvertersConverter> converter, id parent) {
  [((id<ComThoughtworksXstreamConvertersErrorWriter>) nil_chk(errorWriter)) addWithNSString:@"class" withNSString:[((IOSClass *) nil_chk(type)) getName]];
  [errorWriter addWithNSString:@"required-type" withNSString:[((IOSClass *) nil_chk([self getRequiredType])) getName]];
  [errorWriter addWithNSString:@"converter-type" withNSString:[[((id<ComThoughtworksXstreamConvertersConverter>) nil_chk(converter)) java_getClass] getName]];
  if ([ComThoughtworksXstreamConvertersErrorReporter_class_() isInstance:converter]) {
    [((id<ComThoughtworksXstreamConvertersErrorReporter>) cast_check(converter, ComThoughtworksXstreamConvertersErrorReporter_class_())) appendErrorsWithComThoughtworksXstreamConvertersErrorWriter:errorWriter];
  }
  if ([ComThoughtworksXstreamConvertersErrorReporter_class_() isInstance:parent]) {
    [((id<ComThoughtworksXstreamConvertersErrorReporter>) nil_chk(((id<ComThoughtworksXstreamConvertersErrorReporter>) cast_check(parent, ComThoughtworksXstreamConvertersErrorReporter_class_())))) appendErrorsWithComThoughtworksXstreamConvertersErrorWriter:errorWriter];
  }
  [((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(self->reader_)) appendErrorsWithComThoughtworksXstreamConvertersErrorWriter:errorWriter];
}

void ComThoughtworksXstreamCoreTreeUnmarshaller_lazilyCreateDataHolder(ComThoughtworksXstreamCoreTreeUnmarshaller *self) {
  if (self->dataHolder_ == nil) {
    JreStrongAssignAndConsume(&self->dataHolder_, new_ComThoughtworksXstreamCoreMapBackedDataHolder_init());
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamCoreTreeUnmarshaller)
