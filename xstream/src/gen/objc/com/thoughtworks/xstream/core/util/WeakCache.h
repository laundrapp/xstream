//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/core/util/WeakCache.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComThoughtworksXstreamCoreUtilWeakCache")
#ifdef RESTRICT_ComThoughtworksXstreamCoreUtilWeakCache
#define INCLUDE_ALL_ComThoughtworksXstreamCoreUtilWeakCache 0
#else
#define INCLUDE_ALL_ComThoughtworksXstreamCoreUtilWeakCache 1
#endif
#undef RESTRICT_ComThoughtworksXstreamCoreUtilWeakCache

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComThoughtworksXstreamCoreUtilWeakCache_) && (INCLUDE_ALL_ComThoughtworksXstreamCoreUtilWeakCache || defined(INCLUDE_ComThoughtworksXstreamCoreUtilWeakCache))
#define ComThoughtworksXstreamCoreUtilWeakCache_

#define RESTRICT_JavaUtilAbstractMap 1
#define INCLUDE_JavaUtilAbstractMap 1
#include "java/util/AbstractMap.h"

@class JavaLangRefReference;
@protocol JavaUtilCollection;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

/*!
 @brief A HashMap implementation with weak references values and by default for the key.When the
  value is garbage collected, the key will also vanish from the map.
 @author J&ouml;rg Schaible
 @since 1.4
 */
@interface ComThoughtworksXstreamCoreUtilWeakCache : JavaUtilAbstractMap

#pragma mark Public

/*!
 @brief Construct a WeakCache with weak keys.
 <p>Note, that the internally used WeakHashMap is <b>not</b> thread-safe.</p>
 @param map the map to use
 @since 1.4
 */
- (instancetype __nonnull)init;

/*!
 @brief Construct a WeakCache.
 @param map the map to use
 @since 1.4
 */
- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)map;

- (void)clear;

- (jboolean)containsKeyWithId:(id)key;

- (jboolean)containsValueWithId:(id)value;

- (id<JavaUtilSet>)entrySet;

- (jboolean)isEqual:(id)o;

- (id)getWithId:(id)key;

- (NSUInteger)hash;

- (id<JavaUtilSet>)keySet;

- (id)putWithId:(id)key
         withId:(id)value;

- (id)removeWithId:(id)key;

- (jint)size;

- (NSString *)description;

- (id<JavaUtilCollection>)values;

#pragma mark Protected

- (JavaLangRefReference *)createReferenceWithId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(ComThoughtworksXstreamCoreUtilWeakCache)

FOUNDATION_EXPORT void ComThoughtworksXstreamCoreUtilWeakCache_init(ComThoughtworksXstreamCoreUtilWeakCache *self);

FOUNDATION_EXPORT ComThoughtworksXstreamCoreUtilWeakCache *new_ComThoughtworksXstreamCoreUtilWeakCache_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamCoreUtilWeakCache *create_ComThoughtworksXstreamCoreUtilWeakCache_init(void);

FOUNDATION_EXPORT void ComThoughtworksXstreamCoreUtilWeakCache_initWithJavaUtilMap_(ComThoughtworksXstreamCoreUtilWeakCache *self, id<JavaUtilMap> map);

FOUNDATION_EXPORT ComThoughtworksXstreamCoreUtilWeakCache *new_ComThoughtworksXstreamCoreUtilWeakCache_initWithJavaUtilMap_(id<JavaUtilMap> map) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamCoreUtilWeakCache *create_ComThoughtworksXstreamCoreUtilWeakCache_initWithJavaUtilMap_(id<JavaUtilMap> map);

J2OBJC_TYPE_LITERAL_HEADER(ComThoughtworksXstreamCoreUtilWeakCache)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComThoughtworksXstreamCoreUtilWeakCache")
