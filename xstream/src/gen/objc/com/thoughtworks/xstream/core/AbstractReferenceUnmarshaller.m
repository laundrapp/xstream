//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/core/AbstractReferenceUnmarshaller.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/Converter.h"
#include "com/thoughtworks/xstream/converters/ConverterLookup.h"
#include "com/thoughtworks/xstream/core/AbstractReferenceUnmarshaller.h"
#include "com/thoughtworks/xstream/core/TreeUnmarshaller.h"
#include "com/thoughtworks/xstream/core/util/FastStack.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@interface ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller () {
 @public
  id<JavaUtilMap> values_;
  ComThoughtworksXstreamCoreUtilFastStack *parentStack_;
}

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller, values_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller, parentStack_, ComThoughtworksXstreamCoreUtilFastStack *)

inline id ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_get_NULL(void);
static id ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_NULL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller, NULL, id)

J2OBJC_INITIALIZED_DEFN(ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller)

@implementation ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller

- (instancetype __nonnull)initWithId:(id)root
withComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)converterLookup
withComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper {
  ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_initWithId_withComThoughtworksXstreamIoHierarchicalStreamReader_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamMapperMapper_(self, root, reader, converterLookup, mapper);
  return self;
}

- (id)convertWithId:(id)parent
       withIOSClass:(IOSClass *)type
withComThoughtworksXstreamConvertersConverter:(id<ComThoughtworksXstreamConvertersConverter>)converter {
  if ([((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(parentStack_)) size] > 0) {
    id parentReferenceKey = [((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(parentStack_)) peek];
    if (parentReferenceKey != nil) {
      if (![((id<JavaUtilMap>) nil_chk(values_)) containsKeyWithId:parentReferenceKey]) {
        [((id<JavaUtilMap>) nil_chk(values_)) putWithId:parentReferenceKey withId:parent];
      }
    }
  }
  id result;
  NSString *attributeName = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk([self getMapper])) aliasForSystemAttributeWithNSString:@"reference"];
  NSString *reference = attributeName == nil ? nil : [((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader_)) getAttributeWithNSString:attributeName];
  if (reference != nil) {
    id cache = [((id<JavaUtilMap>) nil_chk(values_)) getWithId:[self getReferenceKeyWithNSString:reference]];
    if (cache == nil) {
      ComThoughtworksXstreamConvertersConversionException *ex = create_ComThoughtworksXstreamConvertersConversionException_initWithNSString_(@"Invalid reference");
      [ex addWithNSString:@"reference" withNSString:reference];
      @throw ex;
    }
    result = cache == ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_NULL ? nil : cache;
  }
  else {
    id currentReferenceKey = [self getCurrentReferenceKey];
    [((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(parentStack_)) pushWithId:currentReferenceKey];
    result = [super convertWithId:parent withIOSClass:type withComThoughtworksXstreamConvertersConverter:converter];
    if (currentReferenceKey != nil) {
      [((id<JavaUtilMap>) nil_chk(values_)) putWithId:currentReferenceKey withId:result == nil ? ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_NULL : result];
    }
    [((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(parentStack_)) popSilently];
  }
  return result;
}

- (id)getReferenceKeyWithNSString:(NSString *)reference {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)getCurrentReferenceKey {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(values_);
  RELEASE_(parentStack_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x404, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x404, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithId:withComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersConverterLookup:withComThoughtworksXstreamMapperMapper:);
  methods[1].selector = @selector(convertWithId:withIOSClass:withComThoughtworksXstreamConvertersConverter:);
  methods[2].selector = @selector(getReferenceKeyWithNSString:);
  methods[3].selector = @selector(getCurrentReferenceKey);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NULL", "LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "values_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "parentStack_", "LComThoughtworksXstreamCoreUtilFastStack;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LComThoughtworksXstreamIoHierarchicalStreamReader;LComThoughtworksXstreamConvertersConverterLookup;LComThoughtworksXstreamMapperMapper;", "convert", "LNSObject;LIOSClass;LComThoughtworksXstreamConvertersConverter;", "getReferenceKey", "LNSString;", &ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_NULL };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller = { "AbstractReferenceUnmarshaller", "com.thoughtworks.xstream.core", ptrTable, methods, fields, 7, 0x401, 4, 3, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller;
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller class]) {
    JreStrongAssignAndConsume(&ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_NULL, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller)
  }
}

@end

void ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_initWithId_withComThoughtworksXstreamIoHierarchicalStreamReader_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamMapperMapper_(ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller *self, id root, id<ComThoughtworksXstreamIoHierarchicalStreamReader> reader, id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup, id<ComThoughtworksXstreamMapperMapper> mapper) {
  ComThoughtworksXstreamCoreTreeUnmarshaller_initWithId_withComThoughtworksXstreamIoHierarchicalStreamReader_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamMapperMapper_(self, root, reader, converterLookup, mapper);
  JreStrongAssignAndConsume(&self->values_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->parentStack_, new_ComThoughtworksXstreamCoreUtilFastStack_initWithInt_(16));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller)
