//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/core/TreeMarshaller.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/Converter.h"
#include "com/thoughtworks/xstream/converters/ConverterLookup.h"
#include "com/thoughtworks/xstream/converters/DataHolder.h"
#include "com/thoughtworks/xstream/core/MapBackedDataHolder.h"
#include "com/thoughtworks/xstream/core/TreeMarshaller.h"
#include "com/thoughtworks/xstream/core/util/ObjectIdDictionary.h"
#include "com/thoughtworks/xstream/io/ExtendedHierarchicalStreamWriterHelper.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamWriter.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/util/Iterator.h"

@interface ComThoughtworksXstreamCoreTreeMarshaller () {
 @public
  id<ComThoughtworksXstreamMapperMapper> mapper_;
  ComThoughtworksXstreamCoreUtilObjectIdDictionary *parentObjects_;
  id<ComThoughtworksXstreamConvertersDataHolder> dataHolder_;
}

- (void)lazilyCreateDataHolder;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreTreeMarshaller, mapper_, id<ComThoughtworksXstreamMapperMapper>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreTreeMarshaller, parentObjects_, ComThoughtworksXstreamCoreUtilObjectIdDictionary *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreTreeMarshaller, dataHolder_, id<ComThoughtworksXstreamConvertersDataHolder>)

__attribute__((unused)) static void ComThoughtworksXstreamCoreTreeMarshaller_lazilyCreateDataHolder(ComThoughtworksXstreamCoreTreeMarshaller *self);

@implementation ComThoughtworksXstreamCoreTreeMarshaller

- (instancetype __nonnull)initWithComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
                               withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)converterLookup
                                            withComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper {
  ComThoughtworksXstreamCoreTreeMarshaller_initWithComThoughtworksXstreamIoHierarchicalStreamWriter_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamMapperMapper_(self, writer, converterLookup, mapper);
  return self;
}

- (void)convertAnotherWithId:(id)item {
  [self convertAnotherWithId:item withComThoughtworksXstreamConvertersConverter:nil];
}

- (void)convertAnotherWithId:(id)item
withComThoughtworksXstreamConvertersConverter:(id<ComThoughtworksXstreamConvertersConverter>)converter {
  if (converter == nil) {
    converter = [((id<ComThoughtworksXstreamConvertersConverterLookup>) nil_chk(converterLookup_)) lookupConverterForTypeWithIOSClass:[nil_chk(item) java_getClass]];
  }
  else {
    if (![converter canConvertWithIOSClass:[nil_chk(item) java_getClass]]) {
      ComThoughtworksXstreamConvertersConversionException *e = create_ComThoughtworksXstreamConvertersConversionException_initWithNSString_(@"Explicit selected converter cannot handle item");
      [e addWithNSString:@"item-type" withNSString:[[item java_getClass] getName]];
      [e addWithNSString:@"converter-type" withNSString:[[converter java_getClass] getName]];
      @throw e;
    }
  }
  [self convertWithId:item withComThoughtworksXstreamConvertersConverter:converter];
}

- (void)convertWithId:(id)item
withComThoughtworksXstreamConvertersConverter:(id<ComThoughtworksXstreamConvertersConverter>)converter {
  if ([((ComThoughtworksXstreamCoreUtilObjectIdDictionary *) nil_chk(parentObjects_)) containsIdWithId:item]) {
    ComThoughtworksXstreamConvertersConversionException *e = create_ComThoughtworksXstreamCoreTreeMarshaller_CircularReferenceException_initWithNSString_(@"Recursive reference to parent object");
    [e addWithNSString:@"item-type" withNSString:[[nil_chk(item) java_getClass] getName]];
    [e addWithNSString:@"converter-type" withNSString:[[((id<ComThoughtworksXstreamConvertersConverter>) nil_chk(converter)) java_getClass] getName]];
    @throw e;
  }
  [((ComThoughtworksXstreamCoreUtilObjectIdDictionary *) nil_chk(parentObjects_)) associateIdWithId:item withId:@""];
  [((id<ComThoughtworksXstreamConvertersConverter>) nil_chk(converter)) marshalWithId:item withComThoughtworksXstreamIoHierarchicalStreamWriter:writer_ withComThoughtworksXstreamConvertersMarshallingContext:self];
  [((ComThoughtworksXstreamCoreUtilObjectIdDictionary *) nil_chk(parentObjects_)) removeIdWithId:item];
}

- (void)startWithId:(id)item
withComThoughtworksXstreamConvertersDataHolder:(id<ComThoughtworksXstreamConvertersDataHolder>)dataHolder {
  JreStrongAssign(&self->dataHolder_, dataHolder);
  if (item == nil) {
    [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer_)) startNodeWithNSString:[((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper_)) serializedClassWithIOSClass:nil]];
    [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer_)) endNode];
  }
  else {
    ComThoughtworksXstreamIoExtendedHierarchicalStreamWriterHelper_startNodeWithComThoughtworksXstreamIoHierarchicalStreamWriter_withNSString_withIOSClass_(writer_, [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper_)) serializedClassWithIOSClass:[item java_getClass]], [item java_getClass]);
    [self convertAnotherWithId:item];
    [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer_)) endNode];
  }
}

- (id)getWithId:(id)key {
  ComThoughtworksXstreamCoreTreeMarshaller_lazilyCreateDataHolder(self);
  return [((id<ComThoughtworksXstreamConvertersDataHolder>) nil_chk(dataHolder_)) getWithId:key];
}

- (void)putWithId:(id)key
           withId:(id)value {
  ComThoughtworksXstreamCoreTreeMarshaller_lazilyCreateDataHolder(self);
  [((id<ComThoughtworksXstreamConvertersDataHolder>) nil_chk(dataHolder_)) putWithId:key withId:value];
}

- (id<JavaUtilIterator>)keys {
  ComThoughtworksXstreamCoreTreeMarshaller_lazilyCreateDataHolder(self);
  return [((id<ComThoughtworksXstreamConvertersDataHolder>) nil_chk(dataHolder_)) keys];
}

- (void)lazilyCreateDataHolder {
  ComThoughtworksXstreamCoreTreeMarshaller_lazilyCreateDataHolder(self);
}

- (id<ComThoughtworksXstreamMapperMapper>)getMapper {
  return self->mapper_;
}

- (void)dealloc {
  RELEASE_(writer_);
  RELEASE_(converterLookup_);
  RELEASE_(mapper_);
  RELEASE_(parentObjects_);
  RELEASE_(dataHolder_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComThoughtworksXstreamMapperMapper;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComThoughtworksXstreamIoHierarchicalStreamWriter:withComThoughtworksXstreamConvertersConverterLookup:withComThoughtworksXstreamMapperMapper:);
  methods[1].selector = @selector(convertAnotherWithId:);
  methods[2].selector = @selector(convertAnotherWithId:withComThoughtworksXstreamConvertersConverter:);
  methods[3].selector = @selector(convertWithId:withComThoughtworksXstreamConvertersConverter:);
  methods[4].selector = @selector(startWithId:withComThoughtworksXstreamConvertersDataHolder:);
  methods[5].selector = @selector(getWithId:);
  methods[6].selector = @selector(putWithId:withId:);
  methods[7].selector = @selector(keys);
  methods[8].selector = @selector(lazilyCreateDataHolder);
  methods[9].selector = @selector(getMapper);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "writer_", "LComThoughtworksXstreamIoHierarchicalStreamWriter;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "converterLookup_", "LComThoughtworksXstreamConvertersConverterLookup;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mapper_", "LComThoughtworksXstreamMapperMapper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "parentObjects_", "LComThoughtworksXstreamCoreUtilObjectIdDictionary;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dataHolder_", "LComThoughtworksXstreamConvertersDataHolder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComThoughtworksXstreamIoHierarchicalStreamWriter;LComThoughtworksXstreamConvertersConverterLookup;LComThoughtworksXstreamMapperMapper;", "convertAnother", "LNSObject;", "LNSObject;LComThoughtworksXstreamConvertersConverter;", "convert", "start", "LNSObject;LComThoughtworksXstreamConvertersDataHolder;", "get", "put", "LNSObject;LNSObject;", "LComThoughtworksXstreamCoreTreeMarshaller_CircularReferenceException;" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreTreeMarshaller = { "TreeMarshaller", "com.thoughtworks.xstream.core", ptrTable, methods, fields, 7, 0x1, 10, 5, -1, 10, -1, -1, -1 };
  return &_ComThoughtworksXstreamCoreTreeMarshaller;
}

@end

void ComThoughtworksXstreamCoreTreeMarshaller_initWithComThoughtworksXstreamIoHierarchicalStreamWriter_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamMapperMapper_(ComThoughtworksXstreamCoreTreeMarshaller *self, id<ComThoughtworksXstreamIoHierarchicalStreamWriter> writer, id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup, id<ComThoughtworksXstreamMapperMapper> mapper) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->parentObjects_, new_ComThoughtworksXstreamCoreUtilObjectIdDictionary_init());
  JreStrongAssign(&self->writer_, writer);
  JreStrongAssign(&self->converterLookup_, converterLookup);
  JreStrongAssign(&self->mapper_, mapper);
}

ComThoughtworksXstreamCoreTreeMarshaller *new_ComThoughtworksXstreamCoreTreeMarshaller_initWithComThoughtworksXstreamIoHierarchicalStreamWriter_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamIoHierarchicalStreamWriter> writer, id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup, id<ComThoughtworksXstreamMapperMapper> mapper) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamCoreTreeMarshaller, initWithComThoughtworksXstreamIoHierarchicalStreamWriter_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamMapperMapper_, writer, converterLookup, mapper)
}

ComThoughtworksXstreamCoreTreeMarshaller *create_ComThoughtworksXstreamCoreTreeMarshaller_initWithComThoughtworksXstreamIoHierarchicalStreamWriter_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamIoHierarchicalStreamWriter> writer, id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup, id<ComThoughtworksXstreamMapperMapper> mapper) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamCoreTreeMarshaller, initWithComThoughtworksXstreamIoHierarchicalStreamWriter_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamMapperMapper_, writer, converterLookup, mapper)
}

void ComThoughtworksXstreamCoreTreeMarshaller_lazilyCreateDataHolder(ComThoughtworksXstreamCoreTreeMarshaller *self) {
  if (self->dataHolder_ == nil) {
    JreStrongAssignAndConsume(&self->dataHolder_, new_ComThoughtworksXstreamCoreMapBackedDataHolder_init());
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamCoreTreeMarshaller)

@implementation ComThoughtworksXstreamCoreTreeMarshaller_CircularReferenceException

- (instancetype __nonnull)initWithNSString:(NSString *)msg {
  ComThoughtworksXstreamCoreTreeMarshaller_CircularReferenceException_initWithNSString_(self, msg);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LComThoughtworksXstreamCoreTreeMarshaller;" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreTreeMarshaller_CircularReferenceException = { "CircularReferenceException", "com.thoughtworks.xstream.core", ptrTable, methods, NULL, 7, 0x9, 1, 0, 1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamCoreTreeMarshaller_CircularReferenceException;
}

@end

void ComThoughtworksXstreamCoreTreeMarshaller_CircularReferenceException_initWithNSString_(ComThoughtworksXstreamCoreTreeMarshaller_CircularReferenceException *self, NSString *msg) {
  ComThoughtworksXstreamConvertersConversionException_initWithNSString_(self, msg);
}

ComThoughtworksXstreamCoreTreeMarshaller_CircularReferenceException *new_ComThoughtworksXstreamCoreTreeMarshaller_CircularReferenceException_initWithNSString_(NSString *msg) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamCoreTreeMarshaller_CircularReferenceException, initWithNSString_, msg)
}

ComThoughtworksXstreamCoreTreeMarshaller_CircularReferenceException *create_ComThoughtworksXstreamCoreTreeMarshaller_CircularReferenceException_initWithNSString_(NSString *msg) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamCoreTreeMarshaller_CircularReferenceException, initWithNSString_, msg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamCoreTreeMarshaller_CircularReferenceException)
