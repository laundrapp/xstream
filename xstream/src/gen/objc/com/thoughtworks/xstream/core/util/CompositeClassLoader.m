//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/core/util/CompositeClassLoader.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/core/JVM.h"
#include "com/thoughtworks/xstream/core/util/CompositeClassLoader.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/Thread.h"
#include "java/lang/ref/Reference.h"
#include "java/lang/ref/ReferenceQueue.h"
#include "java/lang/ref/WeakReference.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface ComThoughtworksXstreamCoreUtilCompositeClassLoader () {
 @public
  JavaLangRefReferenceQueue *queue_;
  id<JavaUtilList> classLoaders_;
}

- (void)addInternalWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader;

- (void)cleanup;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreUtilCompositeClassLoader, queue_, JavaLangRefReferenceQueue *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreUtilCompositeClassLoader, classLoaders_, id<JavaUtilList>)

__attribute__((unused)) static void ComThoughtworksXstreamCoreUtilCompositeClassLoader_addInternalWithJavaLangClassLoader_(ComThoughtworksXstreamCoreUtilCompositeClassLoader *self, JavaLangClassLoader *classLoader);

__attribute__((unused)) static void ComThoughtworksXstreamCoreUtilCompositeClassLoader_cleanup(ComThoughtworksXstreamCoreUtilCompositeClassLoader *self);

@interface ComThoughtworksXstreamCoreUtilCompositeClassLoader_1 : JavaUtilArrayList

- (instancetype __nonnull)initWithInt:(jint)x0;

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (jboolean)addWithId:(id)ref;

@end

J2OBJC_EMPTY_STATIC_INIT(ComThoughtworksXstreamCoreUtilCompositeClassLoader_1)

__attribute__((unused)) static void ComThoughtworksXstreamCoreUtilCompositeClassLoader_1_initWithInt_(ComThoughtworksXstreamCoreUtilCompositeClassLoader_1 *self, jint x0);

__attribute__((unused)) static ComThoughtworksXstreamCoreUtilCompositeClassLoader_1 *new_ComThoughtworksXstreamCoreUtilCompositeClassLoader_1_initWithInt_(jint x0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComThoughtworksXstreamCoreUtilCompositeClassLoader_1 *create_ComThoughtworksXstreamCoreUtilCompositeClassLoader_1_initWithInt_(jint x0);

J2OBJC_INITIALIZED_DEFN(ComThoughtworksXstreamCoreUtilCompositeClassLoader)

@implementation ComThoughtworksXstreamCoreUtilCompositeClassLoader

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComThoughtworksXstreamCoreUtilCompositeClassLoader_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader {
  @synchronized(self) {
    ComThoughtworksXstreamCoreUtilCompositeClassLoader_cleanup(self);
    if (classLoader != nil) {
      ComThoughtworksXstreamCoreUtilCompositeClassLoader_addInternalWithJavaLangClassLoader_(self, classLoader);
    }
  }
}

- (void)addInternalWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader {
  ComThoughtworksXstreamCoreUtilCompositeClassLoader_addInternalWithJavaLangClassLoader_(self, classLoader);
}

- (IOSClass *)loadClassWithNSString:(NSString *)name {
  id<JavaUtilList> copy_ = create_ComThoughtworksXstreamCoreUtilCompositeClassLoader_1_initWithInt_([((id<JavaUtilList>) nil_chk(classLoaders_)) size]);
  @synchronized(self) {
    ComThoughtworksXstreamCoreUtilCompositeClassLoader_cleanup(self);
    [copy_ addAllWithJavaUtilCollection:classLoaders_];
  }
  JavaLangClassLoader *contextClassLoader = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getContextClassLoader];
  for (id<JavaUtilIterator> iterator = [copy_ iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
    JavaLangClassLoader *classLoader = (JavaLangClassLoader *) cast_chk([iterator next], [JavaLangClassLoader class]);
    if (classLoader == contextClassLoader) {
      contextClassLoader = nil;
    }
    @try {
      return [((JavaLangClassLoader *) nil_chk(classLoader)) loadClassWithNSString:name];
    }
    @catch (JavaLangClassNotFoundException *notFound) {
    }
  }
  if (contextClassLoader != nil) {
    return [contextClassLoader loadClassWithNSString:name];
  }
  else {
    @throw create_JavaLangClassNotFoundException_initWithNSString_(name);
  }
}

- (void)cleanup {
  ComThoughtworksXstreamCoreUtilCompositeClassLoader_cleanup(self);
}

- (void)dealloc {
  RELEASE_(queue_);
  RELEASE_(classLoaders_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addWithJavaLangClassLoader:);
  methods[2].selector = @selector(addInternalWithJavaLangClassLoader:);
  methods[3].selector = @selector(loadClassWithNSString:);
  methods[4].selector = @selector(cleanup);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "queue_", "LJavaLangRefReferenceQueue;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "classLoaders_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "add", "LJavaLangClassLoader;", "addInternal", "loadClass", "LNSString;", "LJavaLangClassNotFoundException;" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilCompositeClassLoader = { "CompositeClassLoader", "com.thoughtworks.xstream.core.util", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamCoreUtilCompositeClassLoader;
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamCoreUtilCompositeClassLoader class]) {
    {
      if (ComThoughtworksXstreamCoreJVM_is17()) {
        @try {
          JavaLangReflectMethod *m = [JavaLangClassLoader_class_() getDeclaredMethod:@"registerAsParallelCapable" parameterTypes:nil];
          if (![((JavaLangReflectMethod *) nil_chk(m)) isAccessible]) {
            [m setAccessibleWithBoolean:true];
          }
          [m invokeWithId:nil withNSObjectArray:nil];
        }
        @catch (JavaLangException *e) {
        }
      }
    }
    J2OBJC_SET_INITIALIZED(ComThoughtworksXstreamCoreUtilCompositeClassLoader)
  }
}

@end

void ComThoughtworksXstreamCoreUtilCompositeClassLoader_init(ComThoughtworksXstreamCoreUtilCompositeClassLoader *self) {
  JavaLangClassLoader_init(self);
  JreStrongAssignAndConsume(&self->queue_, new_JavaLangRefReferenceQueue_init());
  JreStrongAssignAndConsume(&self->classLoaders_, new_JavaUtilArrayList_init());
  ComThoughtworksXstreamCoreUtilCompositeClassLoader_addInternalWithJavaLangClassLoader_(self, [NSObject_class_() getClassLoader]);
  ComThoughtworksXstreamCoreUtilCompositeClassLoader_addInternalWithJavaLangClassLoader_(self, [[self java_getClass] getClassLoader]);
}

ComThoughtworksXstreamCoreUtilCompositeClassLoader *new_ComThoughtworksXstreamCoreUtilCompositeClassLoader_init() {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamCoreUtilCompositeClassLoader, init)
}

ComThoughtworksXstreamCoreUtilCompositeClassLoader *create_ComThoughtworksXstreamCoreUtilCompositeClassLoader_init() {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamCoreUtilCompositeClassLoader, init)
}

void ComThoughtworksXstreamCoreUtilCompositeClassLoader_addInternalWithJavaLangClassLoader_(ComThoughtworksXstreamCoreUtilCompositeClassLoader *self, JavaLangClassLoader *classLoader) {
  JavaLangRefWeakReference *refClassLoader = nil;
  for (id<JavaUtilIterator> iterator = [((id<JavaUtilList>) nil_chk(self->classLoaders_)) iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
    JavaLangRefWeakReference *ref = (JavaLangRefWeakReference *) cast_chk([iterator next], [JavaLangRefWeakReference class]);
    JavaLangClassLoader *cl = (JavaLangClassLoader *) cast_chk([((JavaLangRefWeakReference *) nil_chk(ref)) get], [JavaLangClassLoader class]);
    if (cl == nil) {
      [iterator remove];
    }
    else if (cl == classLoader) {
      [iterator remove];
      refClassLoader = ref;
    }
  }
  [self->classLoaders_ addWithInt:0 withId:refClassLoader != nil ? refClassLoader : create_JavaLangRefWeakReference_initWithId_withJavaLangRefReferenceQueue_(classLoader, self->queue_)];
}

void ComThoughtworksXstreamCoreUtilCompositeClassLoader_cleanup(ComThoughtworksXstreamCoreUtilCompositeClassLoader *self) {
  JavaLangRefWeakReference *ref;
  while ((ref = (JavaLangRefWeakReference *) cast_chk([((JavaLangRefReferenceQueue *) nil_chk(self->queue_)) poll], [JavaLangRefWeakReference class])) != nil) {
    [((id<JavaUtilList>) nil_chk(self->classLoaders_)) removeWithId:ref];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamCoreUtilCompositeClassLoader)

@implementation ComThoughtworksXstreamCoreUtilCompositeClassLoader_1

- (instancetype __nonnull)initWithInt:(jint)x0 {
  ComThoughtworksXstreamCoreUtilCompositeClassLoader_1_initWithInt_(self, x0);
  return self;
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  jboolean result = false;
  for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk(c)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    result |= [self addWithId:[iter next]];
  }
  return result;
}

- (jboolean)addWithId:(id)ref {
  id classLoader = [((JavaLangRefWeakReference *) nil_chk(((JavaLangRefWeakReference *) cast_chk(ref, [JavaLangRefWeakReference class])))) get];
  if (classLoader != nil) {
    return [super addWithId:classLoader];
  }
  return false;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(addAllWithJavaUtilCollection:);
  methods[2].selector = @selector(addWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "addAll", "LJavaUtilCollection;", "add", "LNSObject;", "LComThoughtworksXstreamCoreUtilCompositeClassLoader;", "loadClassWithNSString:" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilCompositeClassLoader_1 = { "", "com.thoughtworks.xstream.core.util", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 5, -1, 6, -1, -1 };
  return &_ComThoughtworksXstreamCoreUtilCompositeClassLoader_1;
}

@end

void ComThoughtworksXstreamCoreUtilCompositeClassLoader_1_initWithInt_(ComThoughtworksXstreamCoreUtilCompositeClassLoader_1 *self, jint x0) {
  JavaUtilArrayList_initWithInt_(self, x0);
}

ComThoughtworksXstreamCoreUtilCompositeClassLoader_1 *new_ComThoughtworksXstreamCoreUtilCompositeClassLoader_1_initWithInt_(jint x0) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamCoreUtilCompositeClassLoader_1, initWithInt_, x0)
}

ComThoughtworksXstreamCoreUtilCompositeClassLoader_1 *create_ComThoughtworksXstreamCoreUtilCompositeClassLoader_1_initWithInt_(jint x0) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamCoreUtilCompositeClassLoader_1, initWithInt_, x0)
}
