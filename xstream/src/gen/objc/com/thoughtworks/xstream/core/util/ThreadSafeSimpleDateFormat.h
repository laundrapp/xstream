//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/core/util/ThreadSafeSimpleDateFormat.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat")
#ifdef RESTRICT_ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat
#define INCLUDE_ALL_ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat 0
#else
#define INCLUDE_ALL_ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat 1
#endif
#undef RESTRICT_ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat_) && (INCLUDE_ALL_ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat || defined(INCLUDE_ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat))
#define ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat_

@class JavaUtilDate;
@class JavaUtilLocale;
@class JavaUtilTimeZone;

/*!
 @brief Wrapper around java.text.SimpleDateFormat that can
  be called by multiple threads concurrently.
 <p>SimpleDateFormat has a high overhead in creating
  and is not thread safe. To make best use of resources,
  the ThreadSafeSimpleDateFormat provides a dynamically
  sizing pool of instances, each of which will only
  be called by a single thread at a time.</p>
  <p>The pool has a maximum capacity, to limit overhead.
  If all instances in the pool are in use and another is
  required, it shall block until one becomes available.</p>
 @author Joe Walnes
 @author J&ouml;rg Schaible
 */
@interface ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat : NSObject

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)format
                      withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                                   withInt:(jint)initialPoolSize
                                   withInt:(jint)maxPoolSize
                               withBoolean:(jboolean)lenient;

- (instancetype __nonnull)initWithNSString:(NSString *)format
                      withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                        withJavaUtilLocale:(JavaUtilLocale *)locale
                                   withInt:(jint)initialPoolSize
                                   withInt:(jint)maxPoolSize
                               withBoolean:(jboolean)lenient;

- (NSString *)formatWithJavaUtilDate:(JavaUtilDate *)date;

- (JavaUtilDate *)parseWithNSString:(NSString *)date;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat)

FOUNDATION_EXPORT void ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat_initWithNSString_withJavaUtilTimeZone_withInt_withInt_withBoolean_(ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *self, NSString *format, JavaUtilTimeZone *timeZone, jint initialPoolSize, jint maxPoolSize, jboolean lenient);

FOUNDATION_EXPORT ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *new_ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat_initWithNSString_withJavaUtilTimeZone_withInt_withInt_withBoolean_(NSString *format, JavaUtilTimeZone *timeZone, jint initialPoolSize, jint maxPoolSize, jboolean lenient) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *create_ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat_initWithNSString_withJavaUtilTimeZone_withInt_withInt_withBoolean_(NSString *format, JavaUtilTimeZone *timeZone, jint initialPoolSize, jint maxPoolSize, jboolean lenient);

FOUNDATION_EXPORT void ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withInt_withInt_withBoolean_(ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *self, NSString *format, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale, jint initialPoolSize, jint maxPoolSize, jboolean lenient);

FOUNDATION_EXPORT ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *new_ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withInt_withInt_withBoolean_(NSString *format, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale, jint initialPoolSize, jint maxPoolSize, jboolean lenient) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *create_ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withInt_withInt_withBoolean_(NSString *format, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale, jint initialPoolSize, jint maxPoolSize, jboolean lenient);

J2OBJC_TYPE_LITERAL_HEADER(ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat")
