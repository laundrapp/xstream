//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/core/util/XmlHeaderAwareReader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/core/util/XmlHeaderAwareReader.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PushbackInputStream.h"
#include "java/io/Reader.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/StringBuffer.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@interface ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader () {
 @public
  JavaIoInputStreamReader *reader_;
  jdouble version__;
}

- (id<JavaUtilMap>)getHeaderWithJavaIoPushbackInputStreamArray:(IOSObjectArray *)inArg;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader, reader_, JavaIoInputStreamReader *)

inline NSString *ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_get_KEY_ENCODING(void);
static NSString *ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_KEY_ENCODING = @"encoding";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader, KEY_ENCODING, NSString *)

inline NSString *ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_get_KEY_VERSION(void);
static NSString *ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_KEY_VERSION = @"version";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader, KEY_VERSION, NSString *)

inline NSString *ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_get_XML_TOKEN(void);
static NSString *ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_XML_TOKEN = @"?xml";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader, XML_TOKEN, NSString *)

inline jint ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_get_STATE_BOM(void);
#define ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_STATE_BOM 0
J2OBJC_STATIC_FIELD_CONSTANT(ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader, STATE_BOM, jint)

inline jint ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_get_STATE_START(void);
#define ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_STATE_START 1
J2OBJC_STATIC_FIELD_CONSTANT(ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader, STATE_START, jint)

inline jint ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_get_STATE_AWAIT_XML_HEADER(void);
#define ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_STATE_AWAIT_XML_HEADER 2
J2OBJC_STATIC_FIELD_CONSTANT(ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader, STATE_AWAIT_XML_HEADER, jint)

inline jint ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_get_STATE_ATTR_NAME(void);
#define ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_STATE_ATTR_NAME 3
J2OBJC_STATIC_FIELD_CONSTANT(ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader, STATE_ATTR_NAME, jint)

inline jint ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_get_STATE_ATTR_VALUE(void);
#define ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_STATE_ATTR_VALUE 4
J2OBJC_STATIC_FIELD_CONSTANT(ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader, STATE_ATTR_VALUE, jint)

__attribute__((unused)) static id<JavaUtilMap> ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_getHeaderWithJavaIoPushbackInputStreamArray_(ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader *self, IOSObjectArray *inArg);

@implementation ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_initWithJavaIoInputStream_(self, inArg);
  return self;
}

- (id<JavaUtilMap>)getHeaderWithJavaIoPushbackInputStreamArray:(IOSObjectArray *)inArg {
  return ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_getHeaderWithJavaIoPushbackInputStreamArray_(self, inArg);
}

- (NSString *)getEncoding {
  return [((JavaIoInputStreamReader *) nil_chk(reader_)) getEncoding];
}

- (jdouble)getVersion {
  return version__;
}

- (void)markWithInt:(jint)readAheadLimit {
  [((JavaIoInputStreamReader *) nil_chk(reader_)) markWithInt:readAheadLimit];
}

- (jboolean)markSupported {
  return [((JavaIoInputStreamReader *) nil_chk(reader_)) markSupported];
}

- (jint)read {
  return [((JavaIoInputStreamReader *) nil_chk(reader_)) read];
}

- (jint)readWithCharArray:(IOSCharArray *)cbuf
                  withInt:(jint)offset
                  withInt:(jint)length {
  return [((JavaIoInputStreamReader *) nil_chk(reader_)) readWithCharArray:cbuf withInt:offset withInt:length];
}

- (jint)readWithCharArray:(IOSCharArray *)cbuf {
  return [((JavaIoInputStreamReader *) nil_chk(reader_)) readWithCharArray:cbuf];
}

- (jboolean)ready {
  return [((JavaIoInputStreamReader *) nil_chk(reader_)) ready];
}

- (void)reset {
  [((JavaIoInputStreamReader *) nil_chk(reader_)) reset];
}

- (jlong)skipWithLong:(jlong)n {
  return [((JavaIoInputStreamReader *) nil_chk(reader_)) skipWithLong:n];
}

- (void)close {
  [((JavaIoInputStreamReader *) nil_chk(reader_)) close];
}

- (jboolean)isEqual:(id)obj {
  return [((JavaIoInputStreamReader *) nil_chk(reader_)) isEqual:obj];
}

- (NSUInteger)hash {
  return ((jint) [((JavaIoInputStreamReader *) nil_chk(reader_)) hash]);
}

- (NSString *)description {
  return [((JavaIoInputStreamReader *) nil_chk(reader_)) description];
}

- (void)dealloc {
  RELEASE_(reader_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 2, 3, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 8, 4, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 9, 4, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "J", 0x1, 10, 11, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 14, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoInputStream:);
  methods[1].selector = @selector(getHeaderWithJavaIoPushbackInputStreamArray:);
  methods[2].selector = @selector(getEncoding);
  methods[3].selector = @selector(getVersion);
  methods[4].selector = @selector(markWithInt:);
  methods[5].selector = @selector(markSupported);
  methods[6].selector = @selector(read);
  methods[7].selector = @selector(readWithCharArray:withInt:withInt:);
  methods[8].selector = @selector(readWithCharArray:);
  methods[9].selector = @selector(ready);
  methods[10].selector = @selector(reset);
  methods[11].selector = @selector(skipWithLong:);
  methods[12].selector = @selector(close);
  methods[13].selector = @selector(isEqual:);
  methods[14].selector = @selector(hash);
  methods[15].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "reader_", "LJavaIoInputStreamReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "version__", "D", .constantValue.asLong = 0, 0x12, 16, -1, -1, -1 },
    { "KEY_ENCODING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "KEY_VERSION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "XML_TOKEN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "STATE_BOM", "I", .constantValue.asInt = ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_STATE_BOM, 0x1a, -1, -1, -1, -1 },
    { "STATE_START", "I", .constantValue.asInt = ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_STATE_START, 0x1a, -1, -1, -1, -1 },
    { "STATE_AWAIT_XML_HEADER", "I", .constantValue.asInt = ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_STATE_AWAIT_XML_HEADER, 0x1a, -1, -1, -1, -1 },
    { "STATE_ATTR_NAME", "I", .constantValue.asInt = ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_STATE_ATTR_NAME, 0x1a, -1, -1, -1, -1 },
    { "STATE_ATTR_VALUE", "I", .constantValue.asInt = ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_STATE_ATTR_VALUE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;", "LJavaIoUnsupportedEncodingException;LJavaIoIOException;", "getHeader", "[LJavaIoPushbackInputStream;", "LJavaIoIOException;", "mark", "I", "read", "[CII", "[C", "skip", "J", "equals", "LNSObject;", "hashCode", "toString", "version", &ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_KEY_ENCODING, &ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_KEY_VERSION, &ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_XML_TOKEN };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader = { "XmlHeaderAwareReader", "com.thoughtworks.xstream.core.util", ptrTable, methods, fields, 7, 0x11, 16, 10, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader;
}

@end

void ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_initWithJavaIoInputStream_(ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader *self, JavaIoInputStream *inArg) {
  JavaIoReader_init(self);
  IOSObjectArray *pin = [IOSObjectArray arrayWithObjects:(id[]){ [inArg isKindOfClass:[JavaIoPushbackInputStream class]] ? (JavaIoPushbackInputStream *) cast_chk(inArg, [JavaIoPushbackInputStream class]) : create_JavaIoPushbackInputStream_initWithJavaIoInputStream_withInt_(inArg, 64) } count:1 type:JavaIoPushbackInputStream_class_()];
  id<JavaUtilMap> header = ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_getHeaderWithJavaIoPushbackInputStreamArray_(self, pin);
  self->version__ = JavaLangDouble_parseDoubleWithNSString_((NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(header)) getWithId:ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_KEY_VERSION], [NSString class]));
  JreStrongAssignAndConsume(&self->reader_, new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(IOSObjectArray_Get(pin, 0), (NSString *) cast_chk([header getWithId:ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_KEY_ENCODING], [NSString class])));
}

ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader *new_ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_initWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader, initWithJavaIoInputStream_, inArg)
}

ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader *create_ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_initWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader, initWithJavaIoInputStream_, inArg)
}

id<JavaUtilMap> ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_getHeaderWithJavaIoPushbackInputStreamArray_(ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader *self, IOSObjectArray *inArg) {
  id<JavaUtilMap> header = create_JavaUtilHashMap_init();
  [header putWithId:ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_KEY_ENCODING withId:@"utf-8"];
  [header putWithId:ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_KEY_VERSION withId:@"1.0"];
  jint state = ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_STATE_BOM;
  JavaIoByteArrayOutputStream *out = create_JavaIoByteArrayOutputStream_initWithInt_(64);
  jint i = 0;
  jchar ch = 0;
  jchar valueEnd = 0;
  JavaLangStringBuffer *name = create_JavaLangStringBuffer_init();
  JavaLangStringBuffer *value = create_JavaLangStringBuffer_init();
  jboolean escape = false;
  while (i != -1 && (i = [((JavaIoPushbackInputStream *) nil_chk(IOSObjectArray_Get(nil_chk(inArg), 0))) read]) != -1) {
    [out writeWithInt:i];
    ch = (jchar) i;
    switch (state) {
      case ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_STATE_BOM:
      if ((ch == (jint) 0xEF && [out size] == 1) || (ch == (jint) 0xBB && [out size] == 2) || (ch == (jint) 0xBF && [out size] == 3)) {
        if (ch == (jint) 0xBF) {
          [out reset];
          state = ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_STATE_START;
        }
        break;
      }
      else if ([out size] > 1) {
        i = -1;
        break;
      }
      else {
        state = ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_STATE_START;
      }
      case ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_STATE_START:
      if (!JavaLangCharacter_isWhitespaceWithChar_(ch)) {
        if (ch == '<') {
          state = ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_STATE_AWAIT_XML_HEADER;
        }
        else {
          i = -1;
        }
      }
      break;
      case ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_STATE_AWAIT_XML_HEADER:
      if (!JavaLangCharacter_isWhitespaceWithChar_(ch)) {
        [name appendWithChar:JavaLangCharacter_toLowerCaseWithChar_(ch)];
        if (![((NSString *) nil_chk(ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_XML_TOKEN)) java_hasPrefix:[name substringWithInt:0]]) {
          i = -1;
        }
      }
      else {
        if ([((NSString *) nil_chk([name description])) isEqual:ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_XML_TOKEN]) {
          state = ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_STATE_ATTR_NAME;
          [name setLengthWithInt:0];
        }
        else {
          i = -1;
        }
      }
      break;
      case ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_STATE_ATTR_NAME:
      if (!JavaLangCharacter_isWhitespaceWithChar_(ch)) {
        if (ch == '=') {
          state = ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_STATE_ATTR_VALUE;
        }
        else {
          ch = JavaLangCharacter_toLowerCaseWithChar_(ch);
          if (JavaLangCharacter_isLetterWithChar_(ch)) {
            [name appendWithChar:ch];
          }
          else {
            i = -1;
          }
        }
      }
      else if ([name java_length] > 0) {
        i = -1;
      }
      break;
      case ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_STATE_ATTR_VALUE:
      if (valueEnd == 0) {
        if (ch == '"' || ch == '\'') {
          valueEnd = ch;
        }
        else {
          i = -1;
        }
      }
      else {
        if (ch == '\\' && !escape) {
          escape = true;
          break;
        }
        if (ch == valueEnd && !escape) {
          valueEnd = 0;
          state = ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader_STATE_ATTR_NAME;
          [header putWithId:[name description] withId:[value description]];
          [name setLengthWithInt:0];
          [value setLengthWithInt:0];
        }
        else {
          escape = false;
          if (ch != 0x000a) {
            [value appendWithChar:ch];
          }
          else {
            i = -1;
          }
        }
      }
      break;
    }
  }
  IOSByteArray *pushbackData = [out toByteArray];
  for (i = ((IOSByteArray *) nil_chk(pushbackData))->size_; i-- > 0; ) {
    jbyte b = IOSByteArray_Get(pushbackData, i);
    @try {
      [((JavaIoPushbackInputStream *) nil_chk(IOSObjectArray_Get(nil_chk(inArg), 0))) unreadWithInt:b];
    }
    @catch (JavaIoIOException *ex) {
      IOSObjectArray_SetAndConsume(inArg, 0, new_JavaIoPushbackInputStream_initWithJavaIoInputStream_withInt_(IOSObjectArray_Get(inArg, 0), ++i));
    }
  }
  return header;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamCoreUtilXmlHeaderAwareReader)
