//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/XStreamer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/MarshallingStrategy.h"
#include "com/thoughtworks/xstream/XStream.h"
#include "com/thoughtworks/xstream/XStreamer.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/ConverterLookup.h"
#include "com/thoughtworks/xstream/converters/ConverterMatcher.h"
#include "com/thoughtworks/xstream/converters/ConverterRegistry.h"
#include "com/thoughtworks/xstream/converters/MarshallingContext.h"
#include "com/thoughtworks/xstream/converters/UnmarshallingContext.h"
#include "com/thoughtworks/xstream/converters/javabean/JavaBeanProvider.h"
#include "com/thoughtworks/xstream/converters/reflection/FieldKeySorter.h"
#include "com/thoughtworks/xstream/converters/reflection/ReflectionProvider.h"
#include "com/thoughtworks/xstream/core/JVM.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamDriver.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/io/naming/NameCoder.h"
#include "com/thoughtworks/xstream/io/xml/XppDriver.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "com/thoughtworks/xstream/security/AnyTypePermission.h"
#include "com/thoughtworks/xstream/security/TypeHierarchyPermission.h"
#include "com/thoughtworks/xstream/security/TypePermission.h"
#include "com/thoughtworks/xstream/security/WildcardTypePermission.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/ObjectStreamException.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Package.h"
#include "javax/xml/datatype/DatatypeFactory.h"

inline IOSObjectArray *ComThoughtworksXstreamXStreamer_get_PERMISSIONS(void);
static IOSObjectArray *ComThoughtworksXstreamXStreamer_PERMISSIONS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComThoughtworksXstreamXStreamer, PERMISSIONS, IOSObjectArray *)

J2OBJC_INITIALIZED_DEFN(ComThoughtworksXstreamXStreamer)

@implementation ComThoughtworksXstreamXStreamer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComThoughtworksXstreamXStreamer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)toXMLWithComThoughtworksXstreamXStream:(ComThoughtworksXstreamXStream *)xstream
                                              withId:(id)obj {
  JavaIoWriter *writer = create_JavaIoStringWriter_init();
  @try {
    [self toXMLWithComThoughtworksXstreamXStream:xstream withId:obj withJavaIoWriter:writer];
  }
  @catch (JavaIoObjectStreamException *e) {
    @throw e;
  }
  @catch (JavaIoIOException *e) {
    @throw create_ComThoughtworksXstreamConvertersConversionException_initWithNSString_withJavaLangThrowable_(@"Unexpected IO error from a StringWriter", e);
  }
  return [writer description];
}

- (void)toXMLWithComThoughtworksXstreamXStream:(ComThoughtworksXstreamXStream *)xstream
                                        withId:(id)obj
                              withJavaIoWriter:(JavaIoWriter *)outArg {
  ComThoughtworksXstreamXStream *outer = create_ComThoughtworksXstreamXStream_init();
  JavaIoObjectOutputStream *oos = [outer createObjectOutputStreamWithJavaIoWriter:outArg];
  @try {
    [((JavaIoObjectOutputStream *) nil_chk(oos)) writeObjectWithId:xstream];
    [oos flush];
    [((ComThoughtworksXstreamXStream *) nil_chk(xstream)) toXMLWithId:obj withJavaIoWriter:outArg];
  }
  @finally {
    [oos close];
  }
}

- (id)fromXMLWithNSString:(NSString *)xml {
  @try {
    return [self fromXMLWithJavaIoReader:create_JavaIoStringReader_initWithNSString_(xml)];
  }
  @catch (JavaIoObjectStreamException *e) {
    @throw e;
  }
  @catch (JavaIoIOException *e) {
    @throw create_ComThoughtworksXstreamConvertersConversionException_initWithNSString_withJavaLangThrowable_(@"Unexpected IO error from a StringReader", e);
  }
}

- (id)fromXMLWithNSString:(NSString *)xml
withComThoughtworksXstreamSecurityTypePermissionArray:(IOSObjectArray *)permissions {
  @try {
    return [self fromXMLWithJavaIoReader:create_JavaIoStringReader_initWithNSString_(xml) withComThoughtworksXstreamSecurityTypePermissionArray:permissions];
  }
  @catch (JavaIoObjectStreamException *e) {
    @throw e;
  }
  @catch (JavaIoIOException *e) {
    @throw create_ComThoughtworksXstreamConvertersConversionException_initWithNSString_withJavaLangThrowable_(@"Unexpected IO error from a StringReader", e);
  }
}

- (id)fromXMLWithComThoughtworksXstreamIoHierarchicalStreamDriver:(id<ComThoughtworksXstreamIoHierarchicalStreamDriver>)driver
                                                     withNSString:(NSString *)xml {
  @try {
    return [self fromXMLWithComThoughtworksXstreamIoHierarchicalStreamDriver:driver withJavaIoReader:create_JavaIoStringReader_initWithNSString_(xml)];
  }
  @catch (JavaIoObjectStreamException *e) {
    @throw e;
  }
  @catch (JavaIoIOException *e) {
    @throw create_ComThoughtworksXstreamConvertersConversionException_initWithNSString_withJavaLangThrowable_(@"Unexpected IO error from a StringReader", e);
  }
}

- (id)fromXMLWithComThoughtworksXstreamIoHierarchicalStreamDriver:(id<ComThoughtworksXstreamIoHierarchicalStreamDriver>)driver
                                                     withNSString:(NSString *)xml
            withComThoughtworksXstreamSecurityTypePermissionArray:(IOSObjectArray *)permissions {
  @try {
    return [self fromXMLWithComThoughtworksXstreamIoHierarchicalStreamDriver:driver withJavaIoReader:create_JavaIoStringReader_initWithNSString_(xml) withComThoughtworksXstreamSecurityTypePermissionArray:permissions];
  }
  @catch (JavaIoObjectStreamException *e) {
    @throw e;
  }
  @catch (JavaIoIOException *e) {
    @throw create_ComThoughtworksXstreamConvertersConversionException_initWithNSString_withJavaLangThrowable_(@"Unexpected IO error from a StringReader", e);
  }
}

- (id)fromXMLWithJavaIoReader:(JavaIoReader *)xml {
  return [self fromXMLWithComThoughtworksXstreamIoHierarchicalStreamDriver:create_ComThoughtworksXstreamIoXmlXppDriver_init() withJavaIoReader:xml];
}

- (id)fromXMLWithJavaIoReader:(JavaIoReader *)xml
withComThoughtworksXstreamSecurityTypePermissionArray:(IOSObjectArray *)permissions {
  return [self fromXMLWithComThoughtworksXstreamIoHierarchicalStreamDriver:create_ComThoughtworksXstreamIoXmlXppDriver_init() withJavaIoReader:xml withComThoughtworksXstreamSecurityTypePermissionArray:permissions];
}

- (id)fromXMLWithComThoughtworksXstreamIoHierarchicalStreamDriver:(id<ComThoughtworksXstreamIoHierarchicalStreamDriver>)driver
                                                 withJavaIoReader:(JavaIoReader *)xml {
  return [self fromXMLWithComThoughtworksXstreamIoHierarchicalStreamDriver:driver withJavaIoReader:xml withComThoughtworksXstreamSecurityTypePermissionArray:[IOSObjectArray arrayWithObjects:(id[]){ JreLoadStatic(ComThoughtworksXstreamSecurityAnyTypePermission, ANY) } count:1 type:ComThoughtworksXstreamSecurityTypePermission_class_()]];
}

- (id)fromXMLWithComThoughtworksXstreamIoHierarchicalStreamDriver:(id<ComThoughtworksXstreamIoHierarchicalStreamDriver>)driver
                                                 withJavaIoReader:(JavaIoReader *)xml
            withComThoughtworksXstreamSecurityTypePermissionArray:(IOSObjectArray *)permissions {
  ComThoughtworksXstreamXStream *outer = create_ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamIoHierarchicalStreamDriver_(driver);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(permissions))->size_; ++i) {
    [outer addPermissionWithComThoughtworksXstreamSecurityTypePermission:IOSObjectArray_Get(permissions, i)];
  }
  id<ComThoughtworksXstreamIoHierarchicalStreamReader> reader = [((id<ComThoughtworksXstreamIoHierarchicalStreamDriver>) nil_chk(driver)) createReaderWithJavaIoReader:xml];
  JavaIoObjectInputStream *configIn = [outer createObjectInputStreamWithComThoughtworksXstreamIoHierarchicalStreamReader:reader];
  @try {
    ComThoughtworksXstreamXStream *configured = (ComThoughtworksXstreamXStream *) cast_chk([((JavaIoObjectInputStream *) nil_chk(configIn)) readObject], [ComThoughtworksXstreamXStream class]);
    JavaIoObjectInputStream *in = [((ComThoughtworksXstreamXStream *) nil_chk(configured)) createObjectInputStreamWithComThoughtworksXstreamIoHierarchicalStreamReader:reader];
    @try {
      return [((JavaIoObjectInputStream *) nil_chk(in)) readObject];
    }
    @finally {
      [in close];
    }
  }
  @finally {
    [configIn close];
  }
}

+ (IOSObjectArray *)getDefaultPermissions {
  return ComThoughtworksXstreamXStreamer_getDefaultPermissions();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 3, 4, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 6, 7, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 8, 7, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 9, 7, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 10, 7, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 11, 12, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 13, 12, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 14, 12, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 15, 12, -1, -1, -1 },
    { NULL, "[LComThoughtworksXstreamSecurityTypePermission;", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(toXMLWithComThoughtworksXstreamXStream:withId:);
  methods[2].selector = @selector(toXMLWithComThoughtworksXstreamXStream:withId:withJavaIoWriter:);
  methods[3].selector = @selector(fromXMLWithNSString:);
  methods[4].selector = @selector(fromXMLWithNSString:withComThoughtworksXstreamSecurityTypePermissionArray:);
  methods[5].selector = @selector(fromXMLWithComThoughtworksXstreamIoHierarchicalStreamDriver:withNSString:);
  methods[6].selector = @selector(fromXMLWithComThoughtworksXstreamIoHierarchicalStreamDriver:withNSString:withComThoughtworksXstreamSecurityTypePermissionArray:);
  methods[7].selector = @selector(fromXMLWithJavaIoReader:);
  methods[8].selector = @selector(fromXMLWithJavaIoReader:withComThoughtworksXstreamSecurityTypePermissionArray:);
  methods[9].selector = @selector(fromXMLWithComThoughtworksXstreamIoHierarchicalStreamDriver:withJavaIoReader:);
  methods[10].selector = @selector(fromXMLWithComThoughtworksXstreamIoHierarchicalStreamDriver:withJavaIoReader:withComThoughtworksXstreamSecurityTypePermissionArray:);
  methods[11].selector = @selector(getDefaultPermissions);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PERMISSIONS", "[LComThoughtworksXstreamSecurityTypePermission;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
  };
  static const void *ptrTable[] = { "toXML", "LComThoughtworksXstreamXStream;LNSObject;", "LJavaIoObjectStreamException;", "LComThoughtworksXstreamXStream;LNSObject;LJavaIoWriter;", "LJavaIoIOException;", "fromXML", "LNSString;", "LJavaLangClassNotFoundException;LJavaIoObjectStreamException;", "LNSString;[LComThoughtworksXstreamSecurityTypePermission;", "LComThoughtworksXstreamIoHierarchicalStreamDriver;LNSString;", "LComThoughtworksXstreamIoHierarchicalStreamDriver;LNSString;[LComThoughtworksXstreamSecurityTypePermission;", "LJavaIoReader;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "LJavaIoReader;[LComThoughtworksXstreamSecurityTypePermission;", "LComThoughtworksXstreamIoHierarchicalStreamDriver;LJavaIoReader;", "LComThoughtworksXstreamIoHierarchicalStreamDriver;LJavaIoReader;[LComThoughtworksXstreamSecurityTypePermission;", &ComThoughtworksXstreamXStreamer_PERMISSIONS };
  static const J2ObjcClassInfo _ComThoughtworksXstreamXStreamer = { "XStreamer", "com.thoughtworks.xstream", ptrTable, methods, fields, 7, 0x1, 12, 1, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamXStreamer;
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamXStreamer class]) {
    JreStrongAssignAndConsume(&ComThoughtworksXstreamXStreamer_PERMISSIONS, [IOSObjectArray newArrayWithObjects:(id[]){ create_ComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(ComThoughtworksXstreamConvertersConverterMatcher_class_()), create_ComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(ComThoughtworksXstreamMapperMapper_class_()), create_ComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(ComThoughtworksXstreamXStream_class_()), create_ComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(ComThoughtworksXstreamConvertersReflectionReflectionProvider_class_()), create_ComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(ComThoughtworksXstreamConvertersJavabeanJavaBeanProvider_class_()), create_ComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(ComThoughtworksXstreamConvertersReflectionFieldKeySorter_class_()), create_ComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(ComThoughtworksXstreamConvertersConverterLookup_class_()), create_ComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(ComThoughtworksXstreamConvertersConverterRegistry_class_()), create_ComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(ComThoughtworksXstreamIoHierarchicalStreamDriver_class_()), create_ComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(ComThoughtworksXstreamMarshallingStrategy_class_()), create_ComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(ComThoughtworksXstreamConvertersMarshallingContext_class_()), create_ComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(ComThoughtworksXstreamConvertersUnmarshallingContext_class_()), create_ComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(ComThoughtworksXstreamIoNamingNameCoder_class_()), create_ComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(ComThoughtworksXstreamSecurityTypePermission_class_()), create_ComThoughtworksXstreamSecurityWildcardTypePermission_initWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ JreStrcat("$$", [((JavaLangPackage *) nil_chk([ComThoughtworksXstreamCoreJVM_class_() getPackage])) getName], @".**") } count:1 type:NSString_class_()]), create_ComThoughtworksXstreamSecurityTypeHierarchyPermission_initWithIOSClass_(JavaxXmlDatatypeDatatypeFactory_class_()) } count:16 type:ComThoughtworksXstreamSecurityTypePermission_class_()]);
    J2OBJC_SET_INITIALIZED(ComThoughtworksXstreamXStreamer)
  }
}

@end

void ComThoughtworksXstreamXStreamer_init(ComThoughtworksXstreamXStreamer *self) {
  NSObject_init(self);
}

ComThoughtworksXstreamXStreamer *new_ComThoughtworksXstreamXStreamer_init() {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamXStreamer, init)
}

ComThoughtworksXstreamXStreamer *create_ComThoughtworksXstreamXStreamer_init() {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamXStreamer, init)
}

IOSObjectArray *ComThoughtworksXstreamXStreamer_getDefaultPermissions() {
  ComThoughtworksXstreamXStreamer_initialize();
  return [((IOSObjectArray *) nil_chk(ComThoughtworksXstreamXStreamer_PERMISSIONS)) java_clone];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamXStreamer)
