//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/XStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComThoughtworksXstreamXStream")
#ifdef RESTRICT_ComThoughtworksXstreamXStream
#define INCLUDE_ALL_ComThoughtworksXstreamXStream 0
#else
#define INCLUDE_ALL_ComThoughtworksXstreamXStream 1
#endif
#undef RESTRICT_ComThoughtworksXstreamXStream

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComThoughtworksXstreamXStream_) && (INCLUDE_ALL_ComThoughtworksXstreamXStream || defined(INCLUDE_ComThoughtworksXstreamXStream))
#define ComThoughtworksXstreamXStream_

@class ComThoughtworksXstreamCoreClassLoaderReference;
@class ComThoughtworksXstreamMapperMapperWrapper;
@class IOSClass;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaIoInputStream;
@class JavaIoObjectInputStream;
@class JavaIoObjectOutputStream;
@class JavaIoOutputStream;
@class JavaIoReader;
@class JavaIoWriter;
@class JavaLangClassLoader;
@class JavaNetURL;
@protocol ComThoughtworksXstreamConvertersConverter;
@protocol ComThoughtworksXstreamConvertersConverterLookup;
@protocol ComThoughtworksXstreamConvertersConverterRegistry;
@protocol ComThoughtworksXstreamConvertersDataHolder;
@protocol ComThoughtworksXstreamConvertersReflectionReflectionProvider;
@protocol ComThoughtworksXstreamConvertersSingleValueConverter;
@protocol ComThoughtworksXstreamIoHierarchicalStreamDriver;
@protocol ComThoughtworksXstreamIoHierarchicalStreamReader;
@protocol ComThoughtworksXstreamIoHierarchicalStreamWriter;
@protocol ComThoughtworksXstreamMapperMapper;
@protocol ComThoughtworksXstreamMarshallingStrategy;
@protocol ComThoughtworksXstreamSecurityTypePermission;

/*!
 @brief Simple facade to XStream library, a Java-XML serialization tool.
 <p>
  <hr>
  <b>Example</b><blockquote>
  
 @code

  XStream xstream = new XStream();
  String xml = xstream.toXML(myObject); // serialize to XML
  Object myObject2 = xstream.fromXML(xml); // deserialize from XML 
  
@endcode
  
 </blockquote>
  <hr>
   
 <h3>Aliasing classes</h3>
   
 <p>
  To create shorter XML, you can specify aliases for classes using the <code>alias()</code>
  method. For example, you can shorten all occurrences of element 
 <code>&lt;com.blah.MyThing&gt;</code> to <code>&lt;my-thing&gt;</code> by registering an
  alias for the class. 
 <p>
  <hr>
  <blockquote>
  
 @code

  xstream.alias(&quot;my-thing&quot;, MyThing.class); 
  
@endcode
  
 </blockquote>
  <hr>
   
 <h3>Converters</h3>
   
 <p>
  XStream contains a map of <code>com.thoughtworks.xstream.converters.Converter</code> instances, each
  of which acts as a strategy for converting a particular type of class to XML and back again. Out
  of the box, XStream contains converters for most basic types (String, Date, int, boolean, etc)
  and collections (Map, List, Set, Properties, etc). For other objects reflection is used to
  serialize each field recursively. 
 </p>
   
 <p>
  Extra converters can be registered using the <code>registerConverter()</code> method. Some
  non-standard converters are supplied in the <code>com.thoughtworks.xstream.converters.extended</code>
  package and you can create your own by implementing the 
 <code>com.thoughtworks.xstream.converters.Converter</code> interface. 
 </p>
   
 <p>
  <hr>
  <b>Example</b><blockquote>
  
 @code

  xstream.registerConverter(new SqlTimestampConverter());
  xstream.registerConverter(new DynamicProxyConverter()); 
  
@endcode
  
 </blockquote>
  <hr>
  <p>
  The converters can be registered with an explicit priority. By default they are registered with 
  XStream.PRIORITY_NORMAL. Converters of same priority will be used in the reverse sequence
  they have been registered. The default converter, i.e. the converter which will be used if
  no other registered converter is suitable, can be registered with priority
  XStream.PRIORITY_VERY_LOW. XStream uses by default the 
 <code>com.thoughtworks.xstream.converters.reflection.ReflectionConverter</code> as the fallback
  converter. 
 </p>
   
 <p>
  <hr>
  <b>Example</b><blockquote>
  
 @code

  xstream.registerConverter(new CustomDefaultConverter(), XStream.PRIORITY_VERY_LOW); 
  
@endcode
  
 </blockquote>
  <hr>
   
 <h3>Object graphs</h3>
   
 <p>
  XStream has support for object graphs; a deserialized object graph will keep references intact,
  including circular references. 
 </p>
   
 <p>
  XStream can signify references in XML using either relative/absolute XPath or IDs. The mode can be changed using 
 <code>setMode()</code>:
  </p>
   
 <table border='1'>
  <caption></caption>
  <tr>
  <td><code>xstream.setMode(XStream.XPATH_RELATIVE_REFERENCES);</code></td>
  <td><i>(Default)</i> Uses XPath relative references to signify duplicate references. This produces XML
  with the least clutter.</td>
  </tr>
  <tr>
  <td><code>xstream.setMode(XStream.XPATH_ABSOLUTE_REFERENCES);</code></td>
  <td>Uses XPath absolute references to signify duplicate
  references. This produces XML with the least clutter.</td>
  </tr>
  <tr>
  <td><code>xstream.setMode(XStream.SINGLE_NODE_XPATH_RELATIVE_REFERENCES);</code></td>
  <td>Uses XPath relative references to signify duplicate references. The XPath expression ensures that
  a single node only is selected always.</td>
  </tr>
  <tr>
  <td><code>xstream.setMode(XStream.SINGLE_NODE_XPATH_ABSOLUTE_REFERENCES);</code></td>
  <td>Uses XPath absolute references to signify duplicate references.  The XPath expression ensures that
  a single node only is selected always.</td>
  </tr>
  <tr>
  <td><code>xstream.setMode(XStream.ID_REFERENCES);</code></td>
  <td>Uses ID references to signify duplicate references. In some scenarios, such as when using
  hand-written XML, this is easier to work with.</td>
  </tr>
  <tr>
  <td><code>xstream.setMode(XStream.NO_REFERENCES);</code></td>
  <td>This disables object graph support and treats the object structure like a tree. Duplicate
  references are treated as two separate objects and circular references cause an exception. This
  is slightly faster and uses less memory than the other two modes.</td>
  </tr>
  </table>
  <h3>Thread safety</h3>
  <p>
  The XStream instance is thread-safe. That is, once the XStream instance has been created and
  configured, it may be shared across multiple threads allowing objects to be
  serialized/deserialized concurrently. <em>Note, that this only applies if annotations are not 
  auto-detected on-the-fly.</em>
  </p>
  <h3>Implicit collections</h3>
   
 <p>
  To avoid the need for special tags for collections, you can define implicit collections using one
  of the <code>addImplicitCollection</code> methods. 
 </p>
 @author Joe Walnes
 @author J&ouml;rg Schaible
 @author Mauro Talevi
 @author Guilherme Silveira
 */
@interface ComThoughtworksXstreamXStream : NSObject

#pragma mark Public

/*!
 @brief Constructs a default XStream.
 <p>
  The instance will use the <code>XppDriver</code> as default and tries to determine the best
  match for the <code>ReflectionProvider</code> on its own. 
 </p>
 @throw InitializationExceptionin case of an initialization problem
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructs an XStream with a special <code>HierarchicalStreamDriver</code>.
 <p>
  The instance will tries to determine the best match for the <code>ReflectionProvider</code> on
  its own. 
 </p>
 @param hierarchicalStreamDriver the driver instance
 @throw InitializationExceptionin case of an initialization problem
 */
- (instancetype __nonnull)initWithComThoughtworksXstreamIoHierarchicalStreamDriver:(id<ComThoughtworksXstreamIoHierarchicalStreamDriver>)hierarchicalStreamDriver;

/*!
 @brief Constructs an XStream with a special <code>ReflectionProvider</code>.
 <p>
  The instance will use the <code>XppDriver</code> as default. 
 </p>
 @param reflectionProvider the reflection provider to use or  <em> null </em>  for best
              matching reflection provider
 @throw InitializationExceptionin case of an initialization problem
 */
- (instancetype __nonnull)initWithComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)reflectionProvider;

/*!
 @brief Constructs an XStream with a special <code>HierarchicalStreamDriver</code> and 
 <code>ReflectionProvider</code>.
 @param reflectionProvider the reflection provider to use or  <em> null </em>  for best
              matching Provider
 @param hierarchicalStreamDriver the driver instance
 @throw InitializationExceptionin case of an initialization problem
 */
- (instancetype __nonnull)initWithComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)reflectionProvider
                                          withComThoughtworksXstreamIoHierarchicalStreamDriver:(id<ComThoughtworksXstreamIoHierarchicalStreamDriver>)hierarchicalStreamDriver;

/*!
 @brief Constructs an XStream with a special <code>HierarchicalStreamDriver</code>,
  <code>ReflectionProvider</code> and the <code>ClassLoader</code> to use.
 @throw InitializationExceptionin case of an initialization problem
 @since 1.3
 */
- (instancetype __nonnull)initWithComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)reflectionProvider
                                          withComThoughtworksXstreamIoHierarchicalStreamDriver:(id<ComThoughtworksXstreamIoHierarchicalStreamDriver>)driver
                                                                       withJavaLangClassLoader:(JavaLangClassLoader *)classLoader;

/*!
 @brief Constructs an XStream with a special <code>HierarchicalStreamDriver</code>,
  <code>ReflectionProvider</code>, a prepared <code>Mapper</code> chain and the <code>ClassLoader</code>
  to use.
 @param reflectionProvider the reflection provider to use or  <em> null </em>  for best
              matching Provider
 @param driver the driver instance
 @param classLoader the <code>ClassLoader</code>  to use
 @param mapper the instance with the <code>Mapper</code>  chain or  <em> null </em>  for the default
              chain
 @throw InitializationExceptionin case of an initialization problem
 @since 1.3
 */
- (instancetype __nonnull)initWithComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)reflectionProvider
                                          withComThoughtworksXstreamIoHierarchicalStreamDriver:(id<ComThoughtworksXstreamIoHierarchicalStreamDriver>)driver
                                                                       withJavaLangClassLoader:(JavaLangClassLoader *)classLoader
                                                        withComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper;

/*!
 @brief Constructs an XStream with a special <code>HierarchicalStreamDriver</code>,
  <code>ReflectionProvider</code>, a prepared <code>Mapper</code> chain, the 
 <code>ClassLoaderReference</code> and an own <code>ConverterLookup</code> and 
 <code>ConverterRegistry</code>.
 @param reflectionProvider the reflection provider to use or  <em> null </em>  for best
              matching Provider
 @param driver the driver instance
 @param classLoader the <code>ClassLoader</code>  to use
 @param mapper the instance with the <code>Mapper</code>  chain or  <em> null </em>  for the default
              chain
 @param converterLookup the instance that is used to lookup the converters
 @param converterRegistry an instance to manage the converter instances
 @throw InitializationExceptionin case of an initialization problem
 @since 1.3
 */
- (instancetype __nonnull)initWithComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)reflectionProvider
                                          withComThoughtworksXstreamIoHierarchicalStreamDriver:(id<ComThoughtworksXstreamIoHierarchicalStreamDriver>)driver
                                                                       withJavaLangClassLoader:(JavaLangClassLoader *)classLoader
                                                        withComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
                                           withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)converterLookup
                                         withComThoughtworksXstreamConvertersConverterRegistry:(id<ComThoughtworksXstreamConvertersConverterRegistry>)converterRegistry;

/*!
 @brief Constructs an XStream with a special <code>HierarchicalStreamDriver</code>,
  <code>ReflectionProvider</code> and a <code>ClassLoaderReference</code>.
 @param reflectionProvider the reflection provider to use or  <em> null </em>  for best
              matching Provider
 @param driver the driver instance
 @param classLoaderReference the reference to the <code>ClassLoader</code>  to use
 @throw InitializationExceptionin case of an initialization problem
 @since 1.4.5
 */
- (instancetype __nonnull)initWithComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)reflectionProvider
                                          withComThoughtworksXstreamIoHierarchicalStreamDriver:(id<ComThoughtworksXstreamIoHierarchicalStreamDriver>)driver
                                            withComThoughtworksXstreamCoreClassLoaderReference:(ComThoughtworksXstreamCoreClassLoaderReference *)classLoaderReference;

/*!
 @brief Constructs an XStream with a special <code>HierarchicalStreamDriver</code>,
  <code>ReflectionProvider</code>, a prepared <code>Mapper</code> chain and the 
 <code>ClassLoaderReference</code>.
 <p>
  The <code>ClassLoaderReference</code> should also be used for the <code>Mapper</code> chain. 
 </p>
 @param reflectionProvider the reflection provider to use or  <em> null </em>  for best
              matching Provider
 @param driver the driver instance
 @param classLoaderReference the reference to the <code>ClassLoader</code>  to use
 @param mapper the instance with the <code>Mapper</code>  chain or  <em> null </em>  for the default
              chain
 @throw InitializationExceptionin case of an initialization problem
 @since 1.4.5
 */
- (instancetype __nonnull)initWithComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)reflectionProvider
                                          withComThoughtworksXstreamIoHierarchicalStreamDriver:(id<ComThoughtworksXstreamIoHierarchicalStreamDriver>)driver
                                            withComThoughtworksXstreamCoreClassLoaderReference:(ComThoughtworksXstreamCoreClassLoaderReference *)classLoaderReference
                                                        withComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper;

/*!
 @brief Constructs an XStream with a special <code>HierarchicalStreamDriver</code>,
  <code>ReflectionProvider</code>, a prepared <code>Mapper</code> chain, the 
 <code>ClassLoaderReference</code> and an own <code>ConverterLookup</code> and 
 <code>ConverterRegistry</code>.
 <p>
  The ClassLoaderReference should also be used for the Mapper chain. The ConverterLookup
  should access the ConverterRegistry if you intent to register <code>Converter</code> instances
  with XStream facade or you are using annotations. 
 </p>
 @param reflectionProvider the reflection provider to use or  <em> null </em>  for best
              matching Provider
 @param driver the driver instance
 @param classLoaderReference the reference to the <code>ClassLoader</code>  to use
 @param mapper the instance with the <code>Mapper</code>  chain or  <em> null </em>  for the default
              chain
 @param converterLookup the instance that is used to lookup the converters
 @param converterRegistry an instance to manage the converter instances or  <em> null </em>
              to prevent any further registry (including annotations)
 @throw InitializationExceptionin case of an initialization problem
 @since 1.4.5
 */
- (instancetype __nonnull)initWithComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)reflectionProvider
                                          withComThoughtworksXstreamIoHierarchicalStreamDriver:(id<ComThoughtworksXstreamIoHierarchicalStreamDriver>)driver
                                            withComThoughtworksXstreamCoreClassLoaderReference:(ComThoughtworksXstreamCoreClassLoaderReference *)classLoaderReference
                                                        withComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
                                           withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)converterLookup
                                         withComThoughtworksXstreamConvertersConverterRegistry:(id<ComThoughtworksXstreamConvertersConverterRegistry>)converterRegistry;

/*!
 @brief Constructs an XStream with a special <code>HierarchicalStreamDriver</code>,
  <code>ReflectionProvider</code> and a prepared <code>Mapper</code> chain.
 @param reflectionProvider the reflection provider to use or  <em> null </em>  for best
              matching Provider
 @param mapper the instance with the <code>Mapper</code>  chain or  <em> null </em>  for the default
              chain
 @param driver the driver instance
 @throw InitializationExceptionin case of an initialization problem
 */
- (instancetype __nonnull)initWithComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)reflectionProvider
                                                        withComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
                                          withComThoughtworksXstreamIoHierarchicalStreamDriver:(id<ComThoughtworksXstreamIoHierarchicalStreamDriver>)driver;

/*!
 @brief Associate a default implementation of a class with an object.Whenever XStream encounters
  an instance of this type, it will use the default implementation instead.
 For example,
  java.util.ArrayList is the default implementation of java.util.List.
 @param defaultImplementation
 @param ofType
 @throw InitializationExceptionif no <code>DefaultImplementationsMapper</code> is available
 */
- (void)addDefaultImplementationWithIOSClass:(IOSClass *)defaultImplementation
                                withIOSClass:(IOSClass *)ofType;

/*!
 @brief Add immutable types.The value of the instances of these types will always be written
  into the stream even if they appear multiple times.
 @throw InitializationExceptionif no <code>ImmutableTypesMapper</code> is available
 */
- (void)addImmutableTypeWithIOSClass:(IOSClass *)type;

/*!
 @brief Adds an implicit array.
 @param ownerType class owning the implicit array
 @param fieldName name of the array field
 @since 1.4
 */
- (void)addImplicitArrayWithIOSClass:(IOSClass *)ownerType
                        withNSString:(NSString *)fieldName;

/*!
 @brief Adds an implicit array which is used for all items of the given itemType when the array
  type matches.
 @param ownerType class owning the implicit array
 @param fieldName name of the array field in the ownerType
 @param itemType type of the items to be part of this array
 @throw InitializationExceptionif no <code>ImplicitCollectionMapper</code> is available or the
  array type does not match the itemType
 @since 1.4
 */
- (void)addImplicitArrayWithIOSClass:(IOSClass *)ownerType
                        withNSString:(NSString *)fieldName
                        withIOSClass:(IOSClass *)itemType;

/*!
 @brief Adds an implicit array which is used for all items of the given element name defined by
  itemName.
 @param ownerType class owning the implicit array
 @param fieldName name of the array field in the ownerType
 @param itemName alias name of the items
 @throw InitializationExceptionif no <code>ImplicitCollectionMapper</code> is available
 @since 1.4
 */
- (void)addImplicitArrayWithIOSClass:(IOSClass *)ownerType
                        withNSString:(NSString *)fieldName
                        withNSString:(NSString *)itemName;

/*!
 @brief Adds a default implicit collection which is used for any unmapped XML tag.
 @param ownerType class owning the implicit collection
 @param fieldName name of the field in the ownerType. This field must be a concrete             collection type or matching the default implementation type of the collection
              type.
 */
- (void)addImplicitCollectionWithIOSClass:(IOSClass *)ownerType
                             withNSString:(NSString *)fieldName;

/*!
 @brief Adds implicit collection which is used for all items of the given itemType.
 @param ownerType class owning the implicit collection
 @param fieldName name of the field in the ownerType. This field must be a concrete             collection type or matching the default implementation type of the collection
              type.
 @param itemType type of the items to be part of this collection
 @throw InitializationExceptionif no <code>ImplicitCollectionMapper</code> is available
 */
- (void)addImplicitCollectionWithIOSClass:(IOSClass *)ownerType
                             withNSString:(NSString *)fieldName
                             withIOSClass:(IOSClass *)itemType;

/*!
 @brief Adds implicit collection which is used for all items of the given element name defined by
  itemFieldName.
 @param ownerType class owning the implicit collection
 @param fieldName name of the field in the ownerType. This field must be a concrete             collection type or matching the default implementation type of the collection
              type.
 @param itemFieldName element name of the implicit collection
 @param itemType item type to be aliases be the itemFieldName
 @throw InitializationExceptionif no <code>ImplicitCollectionMapper</code> is available
 */
- (void)addImplicitCollectionWithIOSClass:(IOSClass *)ownerType
                             withNSString:(NSString *)fieldName
                             withNSString:(NSString *)itemFieldName
                             withIOSClass:(IOSClass *)itemType;

/*!
 @brief Adds an implicit map.
 @param ownerType class owning the implicit map
 @param fieldName name of the field in the ownerType. This field must be a concrete             map type or matching the default implementation type of the map
              type.
 @param itemType type of the items to be part of this map as value
 @param keyFieldName the name of the field of the itemType that is used for the key in the map
 @since 1.4
 */
- (void)addImplicitMapWithIOSClass:(IOSClass *)ownerType
                      withNSString:(NSString *)fieldName
                      withIOSClass:(IOSClass *)itemType
                      withNSString:(NSString *)keyFieldName;

/*!
 @brief Adds an implicit map.
 @param ownerType class owning the implicit map
 @param fieldName name of the field in the ownerType. This field must be a concrete             map type or matching the default implementation type of the map
              type.
 @param itemName alias name of the items
 @param itemType type of the items to be part of this map as value
 @param keyFieldName the name of the field of the itemType that is used for the key in the map
 @since 1.4
 */
- (void)addImplicitMapWithIOSClass:(IOSClass *)ownerType
                      withNSString:(NSString *)fieldName
                      withNSString:(NSString *)itemName
                      withIOSClass:(IOSClass *)itemType
                      withNSString:(NSString *)keyFieldName;

/*!
 @brief Add a new security permission.
 <p>
  Permissions are evaluated in the added sequence. An instance of <code>NoTypePermission</code> or 
 <code>AnyTypePermission</code> will implicitly wipe any existing permission. 
 </p>
 @param permission the permission to add
 @since 1.4.7
 */
- (void)addPermissionWithComThoughtworksXstreamSecurityTypePermission:(id<ComThoughtworksXstreamSecurityTypePermission>)permission;

/*!
 @brief Alias a Class to a shorter name to be used in XML elements.
 @param name Short name
 @param type Type to be aliased
 @throw InitializationExceptionif no <code>ClassAliasingMapper</code> is available
 */
- (void)aliasWithNSString:(NSString *)name
             withIOSClass:(IOSClass *)type;

/*!
 @brief Alias a Class to a shorter name to be used in XML elements.
 @param name Short name
 @param type Type to be aliased
 @param defaultImplementation Default implementation of type to use if no other specified.
 @throw InitializationExceptionif no <code>DefaultImplementationsMapper</code> or no
              <code>ClassAliasingMapper</code> is available
 */
- (void)aliasWithNSString:(NSString *)name
             withIOSClass:(IOSClass *)type
             withIOSClass:(IOSClass *)defaultImplementation;

/*!
 @brief Create an alias for an attribute.
 @param definedIn the type where the attribute is defined
 @param attributeName the name of the attribute
 @param alias the alias itself
 @throw InitializationExceptionif no <code>AttributeAliasingMapper</code> is available
 @since 1.2.2
 */
- (void)aliasAttributeWithIOSClass:(IOSClass *)definedIn
                      withNSString:(NSString *)attributeName
                      withNSString:(NSString *)alias;

/*!
 @brief Create an alias for an attribute
 @param alias the alias itself
 @param attributeName the name of the attribute
 @throw InitializationExceptionif no <code>AttributeAliasingMapper</code> is available
 */
- (void)aliasAttributeWithNSString:(NSString *)alias
                      withNSString:(NSString *)attributeName;

/*!
 @brief Create an alias for a field name.
 @param alias the alias itself
 @param definedIn the type that declares the field
 @param fieldName the name of the field
 @throw InitializationExceptionif no <code>FieldAliasingMapper</code> is available
 */
- (void)aliasFieldWithNSString:(NSString *)alias
                  withIOSClass:(IOSClass *)definedIn
                  withNSString:(NSString *)fieldName;

/*!
 @brief Alias a package to a shorter name to be used in XML elements.
 @param name Short name
 @param pkgName package to be aliased
 @throw InitializationExceptionif no <code>DefaultImplementationsMapper</code> or no
              <code>PackageAliasingMapper</code> is available
 @since 1.3.1
 */
- (void)aliasPackageWithNSString:(NSString *)name
                    withNSString:(NSString *)pkgName;

/*!
 @brief Create an alias for a system attribute.XStream will not write a system attribute if its
  alias is set to <code>null</code>.
 However, this is not reversible, i.e. deserialization
  of the result is likely to fail afterwards and will not produce an object equal to the
  originally written one.
 @param alias the alias itself (may be  <code> null </code>
  )
 @param systemAttributeName the name of the system attribute
 @throw InitializationExceptionif no <code>SystemAttributeAliasingMapper</code> is available
 @since 1.3.1
 */
- (void)aliasSystemAttributeWithNSString:(NSString *)alias
                            withNSString:(NSString *)systemAttributeName;

/*!
 @brief Alias a type to a shorter name to be used in XML elements.Any class that is assignable
  to this type will be aliased to the same name.
 @param name Short name
 @param type Type to be aliased
 @since 1.2
 @throw InitializationExceptionif no <code>ClassAliasingMapper</code> is available
 */
- (void)aliasTypeWithNSString:(NSString *)name
                 withIOSClass:(IOSClass *)type;

/*!
 @brief Add security permission for a type hierarchy.
 @param type the base type to allow
 @since 1.4.7
 */
- (void)allowTypeHierarchyWithIOSClass:(IOSClass *)type;

/*!
 @brief Add security permission for explicit types.
 @param types the types to allow
 @since 1.4.7
 */
- (void)allowTypesWithIOSClassArray:(IOSObjectArray *)types;

/*!
 @brief Add security permission for explicit types by name.
 @param names the type names to allow
 @since 1.4.7
 */
- (void)allowTypesWithNSStringArray:(IOSObjectArray *)names;

/*!
 @brief Add security permission for types matching one of the specified regular expressions.
 @param regexps the regular expressions to allow type names
 @since 1.4.7
 */
- (void)allowTypesByRegExpWithJavaUtilRegexPatternArray:(IOSObjectArray *)regexps;

/*!
 @brief Add security permission for types matching one of the specified regular expressions.
 @param regexps the regular expressions to allow type names
 @since 1.4.7
 */
- (void)allowTypesByRegExpWithNSStringArray:(IOSObjectArray *)regexps;

/*!
 @brief Add security permission for types matching one of the specified wildcard patterns.
 <p>
  Supported are patterns with path expressions using dot as separator: 
 </p>
  <ul>
  <li>?: one non-control character except separator, e.g. for 'java.net.Inet?Address'</li>
  <li>
 *: arbitrary number of non-control characters except separator, e.g. for types in a package like 'java.lang.*'</li> <li>
 **: arbitrary number of non-control characters including separator, e.g. for types in a package and subpackages like 'java.lang.**'</li> </ul>
 @param patterns the patterns to allow type names
 @since 1.4.7
 */
- (void)allowTypesByWildcardWithNSStringArray:(IOSObjectArray *)patterns;

/*!
 @brief Set the auto-detection mode of the AnnotationMapper.Note that auto-detection implies
  that the XStream is configured while it is processing the XML steams.
 This is a potential
  concurrency problem. Also is it technically not possible to detect all class aliases at
  deserialization. You have been warned!
 @param mode <code> true </code>  if annotations are auto-detected
 @since 1.3
 */
- (void)autodetectAnnotationsWithBoolean:(jboolean)mode;

/*!
 @brief Creates an ObjectInputStream that deserializes a stream of objects from a reader using
  XStream.
 <h3>Example</h3>
   
 @code

  ObjectInputStream in = xstream.createObjectOutputStream(aReader);
  int a = out.readInt();
  Object b = out.readObject();
  Object c = out.readObject(); 
  
@endcode
 - seealso: #createObjectOutputStream(com.thoughtworks.xstream.io.HierarchicalStreamWriter,
      String)
 @since 1.0.3
 */
- (JavaIoObjectInputStream *)createObjectInputStreamWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader;

/*!
 @brief Creates an ObjectInputStream that deserializes a stream of objects from an InputStream
  using XStream.
 - seealso: #createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader)
 - seealso: #createObjectOutputStream(com.thoughtworks.xstream.io.HierarchicalStreamWriter,
      String)
 @since 1.3
 */
- (JavaIoObjectInputStream *)createObjectInputStreamWithJavaIoInputStream:(JavaIoInputStream *)inArg;

/*!
 @brief Creates an ObjectInputStream that deserializes a stream of objects from a reader using
  XStream.
 - seealso: #createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader)
 - seealso: #createObjectOutputStream(com.thoughtworks.xstream.io.HierarchicalStreamWriter,
      String)
 @since 1.0.3
 */
- (JavaIoObjectInputStream *)createObjectInputStreamWithJavaIoReader:(JavaIoReader *)xmlReader;

/*!
 @brief Creates an ObjectOutputStream that serializes a stream of objects to the writer using
  XStream.
 <p>
  To change the name of the root element (from &lt;object-stream&gt;), use 
 <code>String)</code>.
  </p>
 - seealso: #createObjectOutputStream(com.thoughtworks.xstream.io.HierarchicalStreamWriter,
      String)
 - seealso: #createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader)
 @since 1.0.3
 */
- (JavaIoObjectOutputStream *)createObjectOutputStreamWithComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer;

/*!
 @brief Creates an ObjectOutputStream that serializes a stream of objects to the writer using
  XStream.
 <p>
  Because an ObjectOutputStream can contain multiple items and XML only allows a single
  root node, the stream must be written inside an enclosing node. 
 </p>
  <p>
  It is necessary to call ObjectOutputStream.close() when done, otherwise the stream will
  be incomplete. 
 </p>
  <h3>Example</h3>
   
 @code

   ObjectOutputStream out = xstream.createObjectOutputStream(aWriter, &quot;things&quot;);
    out.writeInt(123);
    out.writeObject(&quot;Hello&quot;);
    out.writeObject(someObject)
    out.close(); 
  
@endcode
 @param writer The writer to serialize the objects to.
 @param rootNodeName The name of the root node enclosing the stream of objects.
 - seealso: #createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader)
 @since 1.0.3
 */
- (JavaIoObjectOutputStream *)createObjectOutputStreamWithComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
                                                                                              withNSString:(NSString *)rootNodeName;

/*!
 @brief Creates an ObjectOutputStream that serializes a stream of objects to the OutputStream
  using XStream.
 <p>
  To change the name of the root element (from &lt;object-stream&gt;), use 
 <code>String)</code>.
  </p>
 - seealso: #createObjectOutputStream(com.thoughtworks.xstream.io.HierarchicalStreamWriter,
      String)
 - seealso: #createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader)
 @since 1.3
 */
- (JavaIoObjectOutputStream *)createObjectOutputStreamWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

/*!
 @brief Creates an ObjectOutputStream that serializes a stream of objects to the OutputStream
  using XStream.
 - seealso: #createObjectOutputStream(com.thoughtworks.xstream.io.HierarchicalStreamWriter,
      String)
 - seealso: #createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader)
 @since 1.3
 */
- (JavaIoObjectOutputStream *)createObjectOutputStreamWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                                                withNSString:(NSString *)rootNodeName;

/*!
 @brief Creates an ObjectOutputStream that serializes a stream of objects to the writer using
  XStream.
 <p>
  To change the name of the root element (from &lt;object-stream&gt;), use 
 <code>String)</code>.
  </p>
 - seealso: #createObjectOutputStream(com.thoughtworks.xstream.io.HierarchicalStreamWriter,
      String)
 - seealso: #createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader)
 @since 1.0.3
 */
- (JavaIoObjectOutputStream *)createObjectOutputStreamWithJavaIoWriter:(JavaIoWriter *)writer;

/*!
 @brief Creates an ObjectOutputStream that serializes a stream of objects to the writer using
  XStream.
 - seealso: #createObjectOutputStream(com.thoughtworks.xstream.io.HierarchicalStreamWriter,
      String)
 - seealso: #createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader)
 @since 1.0.3
 */
- (JavaIoObjectOutputStream *)createObjectOutputStreamWithJavaIoWriter:(JavaIoWriter *)writer
                                                          withNSString:(NSString *)rootNodeName;

/*!
 @brief Add security permission denying another one.
 @param permission the permission to deny
 @since 1.4.7
 */
- (void)denyPermissionWithComThoughtworksXstreamSecurityTypePermission:(id<ComThoughtworksXstreamSecurityTypePermission>)permission;

/*!
 @brief Add security permission forbidding a type hierarchy.
 @param type the base type to forbid
 @since 1.4.7
 */
- (void)denyTypeHierarchyWithIOSClass:(IOSClass *)type;

/*!
 @brief Add security permission forbidding explicit types.
 @param types the types to forbid
 @since 1.4.7
 */
- (void)denyTypesWithIOSClassArray:(IOSObjectArray *)types;

/*!
 @brief Add security permission forbidding explicit types by name.
 @param names the type names to forbid
 @since 1.4.7
 */
- (void)denyTypesWithNSStringArray:(IOSObjectArray *)names;

/*!
 @brief Add security permission forbidding types matching one of the specified regular expressions.
 @param regexps the regular expressions to forbid type names
 @since 1.4.7
 */
- (void)denyTypesByRegExpWithJavaUtilRegexPatternArray:(IOSObjectArray *)regexps;

/*!
 @brief Add security permission forbidding types matching one of the specified regular expressions.
 @param regexps the regular expressions to forbid type names
 @since 1.4.7
 */
- (void)denyTypesByRegExpWithNSStringArray:(IOSObjectArray *)regexps;

/*!
 @brief Add security permission forbidding types matching one of the specified wildcard patterns.
 <p>
  Supported are patterns with path expressions using dot as separator: 
 </p>
  <ul>
  <li>?: one non-control character except separator, e.g. for 'java.net.Inet?Address'</li>
  <li>*: arbitrary number of non-control characters except separator, e.g. for types in a package like 'java.lang.*'</li>
  <li>**: arbitrary number of non-control characters including separator, e.g. for types in a package and subpackages like 'java.lang.**'</li>
  </ul>
 @param patterns the patterns to forbid names
 @since 1.4.7
 */
- (void)denyTypesByWildcardWithNSStringArray:(IOSObjectArray *)patterns;

/*!
 @brief Deserialize an object from a file.
 Depending on the parser implementation, some might take the file path as SystemId to
  resolve additional references.
 @throw XStreamExceptionif the object cannot be deserialized
 @since 1.4
 */
- (id)fromXMLWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Deserialize an object from a file, populating the fields of the given root
  object instead of instantiating a new one.Note, that this is a special use case!
 With
  the ReflectionConverter XStream will write directly into the raw memory area of the
  existing object. Use with care! 
  Depending on the parser implementation, some might take the file path as SystemId to
  resolve additional references.
 @throw XStreamExceptionif the object cannot be deserialized
 @since 1.4
 */
- (id)fromXMLWithJavaIoFile:(JavaIoFile *)file
                     withId:(id)root;

/*!
 @brief Deserialize an object from an XML InputStream.
 @throw XStreamExceptionif the object cannot be deserialized
 */
- (id)fromXMLWithJavaIoInputStream:(JavaIoInputStream *)input;

/*!
 @brief Deserialize an object from an XML InputStream, populating the fields of the given root
  object instead of instantiating a new one.Note, that this is a special use case!
 With
  the ReflectionConverter XStream will write directly into the raw memory area of the
  existing object. Use with care!
 @throw XStreamExceptionif the object cannot be deserialized
 */
- (id)fromXMLWithJavaIoInputStream:(JavaIoInputStream *)input
                            withId:(id)root;

/*!
 @brief Deserialize an object from an XML Reader.
 @throw XStreamExceptionif the object cannot be deserialized
 */
- (id)fromXMLWithJavaIoReader:(JavaIoReader *)reader;

/*!
 @brief Deserialize an object from an XML Reader, populating the fields of the given root object
  instead of instantiating a new one.Note, that this is a special use case!
 With the
  ReflectionConverter XStream will write directly into the raw memory area of the existing
  object. Use with care!
 @throw XStreamExceptionif the object cannot be deserialized
 */
- (id)fromXMLWithJavaIoReader:(JavaIoReader *)xml
                       withId:(id)root;

/*!
 @brief Deserialize an object from an XML String.
 @throw XStreamExceptionif the object cannot be deserialized
 */
- (id)fromXMLWithNSString:(NSString *)xml;

/*!
 @brief Deserialize an object from an XML String, populating the fields of the given root object
  instead of instantiating a new one.Note, that this is a special use case!
 With the
  ReflectionConverter XStream will write directly into the raw memory area of the existing
  object. Use with care!
 @throw XStreamExceptionif the object cannot be deserialized
 */
- (id)fromXMLWithNSString:(NSString *)xml
                   withId:(id)root;

/*!
 @brief Deserialize an object from a URL.
 Depending on the parser implementation, some might take the file path as SystemId to
  resolve additional references.
 @throw XStreamExceptionif the object cannot be deserialized
 @since 1.4
 */
- (id)fromXMLWithJavaNetURL:(JavaNetURL *)url;

/*!
 @brief Deserialize an object from a URL, populating the fields of the given root
  object instead of instantiating a new one.Note, that this is a special use case!
 With
  the ReflectionConverter XStream will write directly into the raw memory area of the
  existing object. Use with care! 
  Depending on the parser implementation, some might take the file path as SystemId to
  resolve additional references.
 @throw XStreamExceptionif the object cannot be deserialized
 @since 1.4
 */
- (id)fromXMLWithJavaNetURL:(JavaNetURL *)url
                     withId:(id)root;

/*!
 @brief Retrieve the ClassLoader XStream uses to load classes.
 @since 1.1.1
 */
- (JavaLangClassLoader *)getClassLoader;

/*!
 @brief Retrieve the reference to this instance' ClassLoader.Use this reference for other
  XStream components (like converters) to ensure that they will use a changed ClassLoader
  instance automatically.
 @return the reference
 @since 1.4.5
 */
- (ComThoughtworksXstreamCoreClassLoaderReference *)getClassLoaderReference;

- (id<ComThoughtworksXstreamConvertersConverterLookup>)getConverterLookup;

/*!
 @brief Retrieve the <code>Mapper</code>.This is by default a chain of <code>MapperWrappers</code>
 .
 @return the mapper
 @since 1.2
 */
- (id<ComThoughtworksXstreamMapperMapper>)getMapper;

/*!
 @brief Retrieve the <code>ReflectionProvider</code> in use.
 @return the mapper
 @since 1.2.1
 */
- (id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)getReflectionProvider;

/*!
 @brief Ignore all unknown elements.
 @since 1.4.5
 */
- (void)ignoreUnknownElements;

/*!
 @brief Add pattern for unknown element names to ignore.
 @param pattern the name pattern as regular expression
 @since 1.4.5
 */
- (void)ignoreUnknownElementsWithNSString:(NSString *)pattern;

/*!
 @brief Serialize and object to a hierarchical data structure (such as XML).
 @throw XStreamExceptionif the object cannot be serialized
 */
- (void)marshalWithId:(id)obj
withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer;

/*!
 @brief Serialize and object to a hierarchical data structure (such as XML).
 @param dataHolder Extra data you can use to pass to your converters. Use this as you             want. If not present, XStream shall create one lazily as needed.
 @throw XStreamExceptionif the object cannot be serialized
 */
- (void)marshalWithId:(id)obj
withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
withComThoughtworksXstreamConvertersDataHolder:(id<ComThoughtworksXstreamConvertersDataHolder>)dataHolder;

/*!
 @brief Create a DataHolder that can be used to pass data to the converters.The DataHolder is
  provided with a call to <code>HierarchicalStreamWriter, DataHolder)</code> or 
 <code>Object, DataHolder)</code>.
 @return a new <code>DataHolder</code>
 */
- (id<ComThoughtworksXstreamConvertersDataHolder>)newDataHolder OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Prevents a field from being serialized.To omit a field you must always provide the
  declaring type and not necessarily the type that is converted.
 @since 1.1.3
 @throw InitializationExceptionif no <code>FieldAliasingMapper</code> is available
 */
- (void)omitFieldWithIOSClass:(IOSClass *)definedIn
                 withNSString:(NSString *)fieldName;

/*!
 @brief Process the annotations of the given type and configure the XStream.A call of this
  method will automatically turn the auto-detection mode for annotations off.
 @param type the type with XStream annotations
 @since 1.3
 */
- (void)processAnnotationsWithIOSClass:(IOSClass *)type;

/*!
 @brief Process the annotations of the given types and configure the XStream.
 @param types the types with XStream annotations
 @since 1.3
 */
- (void)processAnnotationsWithIOSClassArray:(IOSObjectArray *)types;

- (void)registerConverterWithComThoughtworksXstreamConvertersConverter:(id<ComThoughtworksXstreamConvertersConverter>)converter;

- (void)registerConverterWithComThoughtworksXstreamConvertersConverter:(id<ComThoughtworksXstreamConvertersConverter>)converter
                                                               withInt:(jint)priority;

- (void)registerConverterWithComThoughtworksXstreamConvertersSingleValueConverter:(id<ComThoughtworksXstreamConvertersSingleValueConverter>)converter;

- (void)registerConverterWithComThoughtworksXstreamConvertersSingleValueConverter:(id<ComThoughtworksXstreamConvertersSingleValueConverter>)converter
                                                                          withInt:(jint)priority;

/*!
 @brief Register a local <code>Converter</code> for a field.
 @param definedIn the class type the field is defined in
 @param fieldName the field name
 @param converter the converter to use
 @since 1.3
 */
- (void)registerLocalConverterWithIOSClass:(IOSClass *)definedIn
                              withNSString:(NSString *)fieldName
withComThoughtworksXstreamConvertersConverter:(id<ComThoughtworksXstreamConvertersConverter>)converter;

/*!
 @brief Register a local <code>SingleValueConverter</code> for a field.
 @param definedIn the class type the field is defined in
 @param fieldName the field name
 @param converter the converter to use
 @since 1.3
 */
- (void)registerLocalConverterWithIOSClass:(IOSClass *)definedIn
                              withNSString:(NSString *)fieldName
withComThoughtworksXstreamConvertersSingleValueConverter:(id<ComThoughtworksXstreamConvertersSingleValueConverter>)converter;

/*!
 @brief Change the ClassLoader XStream uses to load classes.Creating an XStream instance it will
  register for all kind of classes and types of the current JDK, but not for any 3rd party
  type.
 To ensure that all other types are loaded with your class loader, you should call
  this method as early as possible - or consider to provide the class loader directly in
  the constructor.
 @since 1.1.1
 */
- (void)setClassLoaderWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader;

- (void)setMarshallingStrategyWithComThoughtworksXstreamMarshallingStrategy:(id<ComThoughtworksXstreamMarshallingStrategy>)marshallingStrategy;

/*!
 @brief Change mode for dealing with duplicate references.Valid values are 
 <code>XPATH_ABSOLUTE_REFERENCES</code>, <code>XPATH_RELATIVE_REFERENCES</code>,
  <code>XStream.ID_REFERENCES</code> and <code>XStream.NO_REFERENCES</code>.
 @throw IllegalArgumentExceptionif the mode is not one of the declared types
 - seealso: #XPATH_ABSOLUTE_REFERENCES
 - seealso: #XPATH_RELATIVE_REFERENCES
 - seealso: #ID_REFERENCES
 - seealso: #NO_REFERENCES
 */
- (void)setModeWithInt:(jint)mode;

/*!
 @brief Serialize an object to a pretty-printed XML String.
 @throw XStreamExceptionif the object cannot be serialized
 */
- (NSString *)toXMLWithId:(id)obj;

/*!
 @brief Serialize an object to the given OutputStream as pretty-printed XML.The OutputStream
  will be flushed afterwards and in case of an exception.
 @throw XStreamExceptionif the object cannot be serialized
 */
- (void)toXMLWithId:(id)obj
withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

/*!
 @brief Serialize an object to the given Writer as pretty-printed XML.The Writer will be flushed
  afterwards and in case of an exception.
 @throw XStreamExceptionif the object cannot be serialized
 */
- (void)toXMLWithId:(id)obj
   withJavaIoWriter:(JavaIoWriter *)outArg;

/*!
 @brief Deserialize an object from a hierarchical data structure (such as XML).
 @throw XStreamExceptionif the object cannot be deserialized
 */
- (id)unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader;

/*!
 @brief Deserialize an object from a hierarchical data structure (such as XML), populating the
  fields of the given root object instead of instantiating a new one.Note, that this is a
  special use case!
 With the ReflectionConverter XStream will write directly into the raw
  memory area of the existing object. Use with care!
 @throw XStreamExceptionif the object cannot be deserialized
 */
- (id)unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
                                                             withId:(id)root;

/*!
 @brief Deserialize an object from a hierarchical data structure (such as XML).
 @param root If present, the passed in object will have its fields populated, as opposed             to XStream creating a new instance. Note, that this is a special use case!
              With the ReflectionConverter XStream will write directly into the raw memory
              area of the existing object. Use with care!
 @param dataHolder Extra data you can use to pass to your converters. Use this as you             want. If not present, XStream shall create one lazily as needed.
 @throw XStreamExceptionif the object cannot be deserialized
 */
- (id)unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
                                                             withId:(id)root
                     withComThoughtworksXstreamConvertersDataHolder:(id<ComThoughtworksXstreamConvertersDataHolder>)dataHolder;

/*!
 @brief Use an attribute for an arbitrary type.
 @param type the Class of the type to be rendered as XML attribute
 @throw InitializationExceptionif no <code>AttributeMapper</code> is available
 @since 1.2
 */
- (void)useAttributeForWithIOSClass:(IOSClass *)type;

/*!
 @brief Use an attribute for a field declared in a specific type.
 @param fieldName the name of the field
 @param definedIn the Class containing such field
 @throw InitializationExceptionif no <code>AttributeMapper</code> is available
 @since 1.2.2
 */
- (void)useAttributeForWithIOSClass:(IOSClass *)definedIn
                       withNSString:(NSString *)fieldName;

/*!
 @brief Use an attribute for a field or a specific type.
 @param fieldName the name of the field
 @param type the Class of the type to be rendered as XML attribute
 @throw InitializationExceptionif no <code>AttributeMapper</code> is available
 @since 1.2
 */
- (void)useAttributeForWithNSString:(NSString *)fieldName
                       withIOSClass:(IOSClass *)type;

#pragma mark Protected

- (void)setupAliases;

- (void)setupConverters;

- (void)setupDefaultImplementations;

- (void)setupImmutableTypes;

- (void)setupSecurity;

- (jboolean)useXStream11XmlFriendlyMapper;

- (ComThoughtworksXstreamMapperMapperWrapper *)wrapMapperWithComThoughtworksXstreamMapperMapperWrapper:(ComThoughtworksXstreamMapperMapperWrapper *)next;

@end

J2OBJC_STATIC_INIT(ComThoughtworksXstreamXStream)

inline jint ComThoughtworksXstreamXStream_get_NO_REFERENCES(void);
#define ComThoughtworksXstreamXStream_NO_REFERENCES 1001
J2OBJC_STATIC_FIELD_CONSTANT(ComThoughtworksXstreamXStream, NO_REFERENCES, jint)

inline jint ComThoughtworksXstreamXStream_get_ID_REFERENCES(void);
#define ComThoughtworksXstreamXStream_ID_REFERENCES 1002
J2OBJC_STATIC_FIELD_CONSTANT(ComThoughtworksXstreamXStream, ID_REFERENCES, jint)

inline jint ComThoughtworksXstreamXStream_get_XPATH_RELATIVE_REFERENCES(void);
#define ComThoughtworksXstreamXStream_XPATH_RELATIVE_REFERENCES 1003
J2OBJC_STATIC_FIELD_CONSTANT(ComThoughtworksXstreamXStream, XPATH_RELATIVE_REFERENCES, jint)

inline jint ComThoughtworksXstreamXStream_get_XPATH_ABSOLUTE_REFERENCES(void);
#define ComThoughtworksXstreamXStream_XPATH_ABSOLUTE_REFERENCES 1004
J2OBJC_STATIC_FIELD_CONSTANT(ComThoughtworksXstreamXStream, XPATH_ABSOLUTE_REFERENCES, jint)

inline jint ComThoughtworksXstreamXStream_get_SINGLE_NODE_XPATH_RELATIVE_REFERENCES(void);
#define ComThoughtworksXstreamXStream_SINGLE_NODE_XPATH_RELATIVE_REFERENCES 1005
J2OBJC_STATIC_FIELD_CONSTANT(ComThoughtworksXstreamXStream, SINGLE_NODE_XPATH_RELATIVE_REFERENCES, jint)

inline jint ComThoughtworksXstreamXStream_get_SINGLE_NODE_XPATH_ABSOLUTE_REFERENCES(void);
#define ComThoughtworksXstreamXStream_SINGLE_NODE_XPATH_ABSOLUTE_REFERENCES 1006
J2OBJC_STATIC_FIELD_CONSTANT(ComThoughtworksXstreamXStream, SINGLE_NODE_XPATH_ABSOLUTE_REFERENCES, jint)

inline jint ComThoughtworksXstreamXStream_get_PRIORITY_VERY_HIGH(void);
#define ComThoughtworksXstreamXStream_PRIORITY_VERY_HIGH 10000
J2OBJC_STATIC_FIELD_CONSTANT(ComThoughtworksXstreamXStream, PRIORITY_VERY_HIGH, jint)

inline jint ComThoughtworksXstreamXStream_get_PRIORITY_NORMAL(void);
#define ComThoughtworksXstreamXStream_PRIORITY_NORMAL 0
J2OBJC_STATIC_FIELD_CONSTANT(ComThoughtworksXstreamXStream, PRIORITY_NORMAL, jint)

inline jint ComThoughtworksXstreamXStream_get_PRIORITY_LOW(void);
#define ComThoughtworksXstreamXStream_PRIORITY_LOW -10
J2OBJC_STATIC_FIELD_CONSTANT(ComThoughtworksXstreamXStream, PRIORITY_LOW, jint)

inline jint ComThoughtworksXstreamXStream_get_PRIORITY_VERY_LOW(void);
#define ComThoughtworksXstreamXStream_PRIORITY_VERY_LOW -20
J2OBJC_STATIC_FIELD_CONSTANT(ComThoughtworksXstreamXStream, PRIORITY_VERY_LOW, jint)

FOUNDATION_EXPORT void ComThoughtworksXstreamXStream_init(ComThoughtworksXstreamXStream *self);

FOUNDATION_EXPORT ComThoughtworksXstreamXStream *new_ComThoughtworksXstreamXStream_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamXStream *create_ComThoughtworksXstreamXStream_init(void);

FOUNDATION_EXPORT void ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_(ComThoughtworksXstreamXStream *self, id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider);

FOUNDATION_EXPORT ComThoughtworksXstreamXStream *new_ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamXStream *create_ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider);

FOUNDATION_EXPORT void ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamIoHierarchicalStreamDriver_(ComThoughtworksXstreamXStream *self, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> hierarchicalStreamDriver);

FOUNDATION_EXPORT ComThoughtworksXstreamXStream *new_ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamIoHierarchicalStreamDriver_(id<ComThoughtworksXstreamIoHierarchicalStreamDriver> hierarchicalStreamDriver) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamXStream *create_ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamIoHierarchicalStreamDriver_(id<ComThoughtworksXstreamIoHierarchicalStreamDriver> hierarchicalStreamDriver);

FOUNDATION_EXPORT void ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamIoHierarchicalStreamDriver_(ComThoughtworksXstreamXStream *self, id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> hierarchicalStreamDriver);

FOUNDATION_EXPORT ComThoughtworksXstreamXStream *new_ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamIoHierarchicalStreamDriver_(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> hierarchicalStreamDriver) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamXStream *create_ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamIoHierarchicalStreamDriver_(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> hierarchicalStreamDriver);

FOUNDATION_EXPORT void ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamIoHierarchicalStreamDriver_(ComThoughtworksXstreamXStream *self, id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamMapperMapper> mapper, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> driver);

FOUNDATION_EXPORT ComThoughtworksXstreamXStream *new_ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamIoHierarchicalStreamDriver_(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamMapperMapper> mapper, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> driver) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamXStream *create_ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamIoHierarchicalStreamDriver_(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamMapperMapper> mapper, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> driver);

FOUNDATION_EXPORT void ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamIoHierarchicalStreamDriver_withComThoughtworksXstreamCoreClassLoaderReference_(ComThoughtworksXstreamXStream *self, id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> driver, ComThoughtworksXstreamCoreClassLoaderReference *classLoaderReference);

FOUNDATION_EXPORT ComThoughtworksXstreamXStream *new_ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamIoHierarchicalStreamDriver_withComThoughtworksXstreamCoreClassLoaderReference_(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> driver, ComThoughtworksXstreamCoreClassLoaderReference *classLoaderReference) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamXStream *create_ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamIoHierarchicalStreamDriver_withComThoughtworksXstreamCoreClassLoaderReference_(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> driver, ComThoughtworksXstreamCoreClassLoaderReference *classLoaderReference);

FOUNDATION_EXPORT void ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamIoHierarchicalStreamDriver_withJavaLangClassLoader_(ComThoughtworksXstreamXStream *self, id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> driver, JavaLangClassLoader *classLoader);

FOUNDATION_EXPORT ComThoughtworksXstreamXStream *new_ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamIoHierarchicalStreamDriver_withJavaLangClassLoader_(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> driver, JavaLangClassLoader *classLoader) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamXStream *create_ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamIoHierarchicalStreamDriver_withJavaLangClassLoader_(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> driver, JavaLangClassLoader *classLoader);

FOUNDATION_EXPORT void ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamIoHierarchicalStreamDriver_withJavaLangClassLoader_withComThoughtworksXstreamMapperMapper_(ComThoughtworksXstreamXStream *self, id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> driver, JavaLangClassLoader *classLoader, id<ComThoughtworksXstreamMapperMapper> mapper);

FOUNDATION_EXPORT ComThoughtworksXstreamXStream *new_ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamIoHierarchicalStreamDriver_withJavaLangClassLoader_withComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> driver, JavaLangClassLoader *classLoader, id<ComThoughtworksXstreamMapperMapper> mapper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamXStream *create_ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamIoHierarchicalStreamDriver_withJavaLangClassLoader_withComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> driver, JavaLangClassLoader *classLoader, id<ComThoughtworksXstreamMapperMapper> mapper);

FOUNDATION_EXPORT void ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamIoHierarchicalStreamDriver_withComThoughtworksXstreamCoreClassLoaderReference_withComThoughtworksXstreamMapperMapper_(ComThoughtworksXstreamXStream *self, id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> driver, ComThoughtworksXstreamCoreClassLoaderReference *classLoaderReference, id<ComThoughtworksXstreamMapperMapper> mapper);

FOUNDATION_EXPORT ComThoughtworksXstreamXStream *new_ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamIoHierarchicalStreamDriver_withComThoughtworksXstreamCoreClassLoaderReference_withComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> driver, ComThoughtworksXstreamCoreClassLoaderReference *classLoaderReference, id<ComThoughtworksXstreamMapperMapper> mapper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamXStream *create_ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamIoHierarchicalStreamDriver_withComThoughtworksXstreamCoreClassLoaderReference_withComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> driver, ComThoughtworksXstreamCoreClassLoaderReference *classLoaderReference, id<ComThoughtworksXstreamMapperMapper> mapper);

FOUNDATION_EXPORT void ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamIoHierarchicalStreamDriver_withJavaLangClassLoader_withComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamConvertersConverterRegistry_(ComThoughtworksXstreamXStream *self, id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> driver, JavaLangClassLoader *classLoader, id<ComThoughtworksXstreamMapperMapper> mapper, id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup, id<ComThoughtworksXstreamConvertersConverterRegistry> converterRegistry);

FOUNDATION_EXPORT ComThoughtworksXstreamXStream *new_ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamIoHierarchicalStreamDriver_withJavaLangClassLoader_withComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamConvertersConverterRegistry_(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> driver, JavaLangClassLoader *classLoader, id<ComThoughtworksXstreamMapperMapper> mapper, id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup, id<ComThoughtworksXstreamConvertersConverterRegistry> converterRegistry) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamXStream *create_ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamIoHierarchicalStreamDriver_withJavaLangClassLoader_withComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamConvertersConverterRegistry_(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> driver, JavaLangClassLoader *classLoader, id<ComThoughtworksXstreamMapperMapper> mapper, id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup, id<ComThoughtworksXstreamConvertersConverterRegistry> converterRegistry);

FOUNDATION_EXPORT void ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamIoHierarchicalStreamDriver_withComThoughtworksXstreamCoreClassLoaderReference_withComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamConvertersConverterRegistry_(ComThoughtworksXstreamXStream *self, id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> driver, ComThoughtworksXstreamCoreClassLoaderReference *classLoaderReference, id<ComThoughtworksXstreamMapperMapper> mapper, id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup, id<ComThoughtworksXstreamConvertersConverterRegistry> converterRegistry);

FOUNDATION_EXPORT ComThoughtworksXstreamXStream *new_ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamIoHierarchicalStreamDriver_withComThoughtworksXstreamCoreClassLoaderReference_withComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamConvertersConverterRegistry_(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> driver, ComThoughtworksXstreamCoreClassLoaderReference *classLoaderReference, id<ComThoughtworksXstreamMapperMapper> mapper, id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup, id<ComThoughtworksXstreamConvertersConverterRegistry> converterRegistry) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamXStream *create_ComThoughtworksXstreamXStream_initWithComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamIoHierarchicalStreamDriver_withComThoughtworksXstreamCoreClassLoaderReference_withComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamConvertersConverterRegistry_(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, id<ComThoughtworksXstreamIoHierarchicalStreamDriver> driver, ComThoughtworksXstreamCoreClassLoaderReference *classLoaderReference, id<ComThoughtworksXstreamMapperMapper> mapper, id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup, id<ComThoughtworksXstreamConvertersConverterRegistry> converterRegistry);

J2OBJC_TYPE_LITERAL_HEADER(ComThoughtworksXstreamXStream)

#endif

#if !defined (ComThoughtworksXstreamXStream_InitializationException_) && (INCLUDE_ALL_ComThoughtworksXstreamXStream || defined(INCLUDE_ComThoughtworksXstreamXStream_InitializationException))
#define ComThoughtworksXstreamXStream_InitializationException_

#define RESTRICT_ComThoughtworksXstreamXStreamException 1
#define INCLUDE_ComThoughtworksXstreamXStreamException 1
#include "com/thoughtworks/xstream/XStreamException.h"

@class JavaLangThrowable;

/*!
 */
@interface ComThoughtworksXstreamXStream_InitializationException : ComThoughtworksXstreamXStreamException

#pragma mark Public

/*!
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message;

/*!
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message
                     withJavaLangThrowable:(JavaLangThrowable *)cause;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComThoughtworksXstreamXStream_InitializationException)

FOUNDATION_EXPORT void ComThoughtworksXstreamXStream_InitializationException_initWithNSString_withJavaLangThrowable_(ComThoughtworksXstreamXStream_InitializationException *self, NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT ComThoughtworksXstreamXStream_InitializationException *new_ComThoughtworksXstreamXStream_InitializationException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamXStream_InitializationException *create_ComThoughtworksXstreamXStream_InitializationException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT void ComThoughtworksXstreamXStream_InitializationException_initWithNSString_(ComThoughtworksXstreamXStream_InitializationException *self, NSString *message);

FOUNDATION_EXPORT ComThoughtworksXstreamXStream_InitializationException *new_ComThoughtworksXstreamXStream_InitializationException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComThoughtworksXstreamXStream_InitializationException *create_ComThoughtworksXstreamXStream_InitializationException_initWithNSString_(NSString *message);

J2OBJC_TYPE_LITERAL_HEADER(ComThoughtworksXstreamXStream_InitializationException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComThoughtworksXstreamXStream")
