//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/XStreamException.java
//

#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/XStreamException.h"
#include "com/thoughtworks/xstream/core/BaseException.h"
#include "java/lang/Throwable.h"

@interface ComThoughtworksXstreamXStreamException () {
 @public
  JavaLangThrowable *cause_XStreamException_;
}

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamXStreamException, cause_XStreamException_, JavaLangThrowable *)

@implementation ComThoughtworksXstreamXStreamException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComThoughtworksXstreamXStreamException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)message {
  ComThoughtworksXstreamXStreamException_initWithNSString_(self, message);
  return self;
}

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)cause {
  ComThoughtworksXstreamXStreamException_initWithJavaLangThrowable_(self, cause);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)message
                     withJavaLangThrowable:(JavaLangThrowable *)cause {
  ComThoughtworksXstreamXStreamException_initWithNSString_withJavaLangThrowable_(self, message, cause);
  return self;
}

- (JavaLangThrowable *)getCause {
  return cause_XStreamException_;
}

- (void)dealloc {
  RELEASE_(cause_XStreamException_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(initWithJavaLangThrowable:);
  methods[3].selector = @selector(initWithNSString:withJavaLangThrowable:);
  methods[4].selector = @selector(getCause);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cause_XStreamException_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x2, 3, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaLangThrowable;", "LNSString;LJavaLangThrowable;", "cause" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamXStreamException = { "XStreamException", "com.thoughtworks.xstream", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamXStreamException;
}

@end

void ComThoughtworksXstreamXStreamException_init(ComThoughtworksXstreamXStreamException *self) {
  ComThoughtworksXstreamXStreamException_initWithNSString_withJavaLangThrowable_(self, @"", nil);
}

ComThoughtworksXstreamXStreamException *new_ComThoughtworksXstreamXStreamException_init() {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamXStreamException, init)
}

ComThoughtworksXstreamXStreamException *create_ComThoughtworksXstreamXStreamException_init() {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamXStreamException, init)
}

void ComThoughtworksXstreamXStreamException_initWithNSString_(ComThoughtworksXstreamXStreamException *self, NSString *message) {
  ComThoughtworksXstreamXStreamException_initWithNSString_withJavaLangThrowable_(self, message, nil);
}

ComThoughtworksXstreamXStreamException *new_ComThoughtworksXstreamXStreamException_initWithNSString_(NSString *message) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamXStreamException, initWithNSString_, message)
}

ComThoughtworksXstreamXStreamException *create_ComThoughtworksXstreamXStreamException_initWithNSString_(NSString *message) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamXStreamException, initWithNSString_, message)
}

void ComThoughtworksXstreamXStreamException_initWithJavaLangThrowable_(ComThoughtworksXstreamXStreamException *self, JavaLangThrowable *cause) {
  ComThoughtworksXstreamXStreamException_initWithNSString_withJavaLangThrowable_(self, @"", cause);
}

ComThoughtworksXstreamXStreamException *new_ComThoughtworksXstreamXStreamException_initWithJavaLangThrowable_(JavaLangThrowable *cause) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamXStreamException, initWithJavaLangThrowable_, cause)
}

ComThoughtworksXstreamXStreamException *create_ComThoughtworksXstreamXStreamException_initWithJavaLangThrowable_(JavaLangThrowable *cause) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamXStreamException, initWithJavaLangThrowable_, cause)
}

void ComThoughtworksXstreamXStreamException_initWithNSString_withJavaLangThrowable_(ComThoughtworksXstreamXStreamException *self, NSString *message, JavaLangThrowable *cause) {
  ComThoughtworksXstreamCoreBaseException_initWithNSString_(self, JreStrcat("$$", message, (cause == nil ? @"" : JreStrcat("$$", @" : ", [cause getMessage]))));
  JreStrongAssign(&self->cause_XStreamException_, cause);
}

ComThoughtworksXstreamXStreamException *new_ComThoughtworksXstreamXStreamException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamXStreamException, initWithNSString_withJavaLangThrowable_, message, cause)
}

ComThoughtworksXstreamXStreamException *create_ComThoughtworksXstreamXStreamException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamXStreamException, initWithNSString_withJavaLangThrowable_, message, cause)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamXStreamException)
