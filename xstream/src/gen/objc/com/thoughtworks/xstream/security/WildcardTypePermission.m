//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/security/WildcardTypePermission.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/security/RegExpTypePermission.h"
#include "com/thoughtworks/xstream/security/WildcardTypePermission.h"
#include "java/lang/StringBuffer.h"

@interface ComThoughtworksXstreamSecurityWildcardTypePermission ()

+ (IOSObjectArray *)getRegExpPatternsWithNSStringArray:(IOSObjectArray *)wildcards;

@end

__attribute__((unused)) static IOSObjectArray *ComThoughtworksXstreamSecurityWildcardTypePermission_getRegExpPatternsWithNSStringArray_(IOSObjectArray *wildcards);

@implementation ComThoughtworksXstreamSecurityWildcardTypePermission

- (instancetype __nonnull)initWithNSStringArray:(IOSObjectArray *)patterns {
  ComThoughtworksXstreamSecurityWildcardTypePermission_initWithNSStringArray_(self, patterns);
  return self;
}

+ (IOSObjectArray *)getRegExpPatternsWithNSStringArray:(IOSObjectArray *)wildcards {
  return ComThoughtworksXstreamSecurityWildcardTypePermission_getRegExpPatternsWithNSStringArray_(wildcards);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0xa, 1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSStringArray:);
  methods[1].selector = @selector(getRegExpPatternsWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "[LNSString;", "getRegExpPatterns" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamSecurityWildcardTypePermission = { "WildcardTypePermission", "com.thoughtworks.xstream.security", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamSecurityWildcardTypePermission;
}

@end

void ComThoughtworksXstreamSecurityWildcardTypePermission_initWithNSStringArray_(ComThoughtworksXstreamSecurityWildcardTypePermission *self, IOSObjectArray *patterns) {
  ComThoughtworksXstreamSecurityRegExpTypePermission_initWithNSStringArray_(self, ComThoughtworksXstreamSecurityWildcardTypePermission_getRegExpPatternsWithNSStringArray_(patterns));
}

ComThoughtworksXstreamSecurityWildcardTypePermission *new_ComThoughtworksXstreamSecurityWildcardTypePermission_initWithNSStringArray_(IOSObjectArray *patterns) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamSecurityWildcardTypePermission, initWithNSStringArray_, patterns)
}

ComThoughtworksXstreamSecurityWildcardTypePermission *create_ComThoughtworksXstreamSecurityWildcardTypePermission_initWithNSStringArray_(IOSObjectArray *patterns) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamSecurityWildcardTypePermission, initWithNSStringArray_, patterns)
}

IOSObjectArray *ComThoughtworksXstreamSecurityWildcardTypePermission_getRegExpPatternsWithNSStringArray_(IOSObjectArray *wildcards) {
  ComThoughtworksXstreamSecurityWildcardTypePermission_initialize();
  if (wildcards == nil) return nil;
  IOSObjectArray *regexps = [IOSObjectArray arrayWithLength:wildcards->size_ type:NSString_class_()];
  for (jint i = 0; i < wildcards->size_; ++i) {
    NSString *wildcardExpression = IOSObjectArray_Get(wildcards, i);
    JavaLangStringBuffer *result = create_JavaLangStringBuffer_initWithInt_([((NSString *) nil_chk(wildcardExpression)) java_length] * 2);
    [result appendWithNSString:@"(?u)"];
    jint length = [wildcardExpression java_length];
    for (jint j = 0; j < length; j++) {
      jchar ch = [wildcardExpression charAtWithInt:j];
      switch (ch) {
        case '\\':
        case '.':
        case '+':
        case '|':
        case '[':
        case ']':
        case '(':
        case ')':
        case '^':
        case '$':
        [((JavaLangStringBuffer *) nil_chk([result appendWithChar:'\\'])) appendWithChar:ch];
        break;
        case '?':
        [result appendWithChar:'.'];
        break;
        case '*':
        if (j + 1 < length && [wildcardExpression charAtWithInt:j + 1] == '*') {
          [result appendWithNSString:@"[\\P{C}]*"];
          j++;
        }
        else {
          [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([result appendWithNSString:@"[\\P{C}&&[^"])) appendWithChar:'.'])) appendWithNSString:@"]]*"];
        }
        break;
        default:
        [result appendWithChar:ch];
        break;
      }
    }
    IOSObjectArray_Set(regexps, i, [result description]);
  }
  return regexps;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamSecurityWildcardTypePermission)
