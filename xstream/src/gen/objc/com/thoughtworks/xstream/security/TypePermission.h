//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/security/TypePermission.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComThoughtworksXstreamSecurityTypePermission")
#ifdef RESTRICT_ComThoughtworksXstreamSecurityTypePermission
#define INCLUDE_ALL_ComThoughtworksXstreamSecurityTypePermission 0
#else
#define INCLUDE_ALL_ComThoughtworksXstreamSecurityTypePermission 1
#endif
#undef RESTRICT_ComThoughtworksXstreamSecurityTypePermission

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComThoughtworksXstreamSecurityTypePermission_) && (INCLUDE_ALL_ComThoughtworksXstreamSecurityTypePermission || defined(INCLUDE_ComThoughtworksXstreamSecurityTypePermission))
#define ComThoughtworksXstreamSecurityTypePermission_

@class IOSClass;

/*!
 @brief Definition of a type permission.
 @author J&ouml;rg Schaible
 @since 1.4.7
 */
@protocol ComThoughtworksXstreamSecurityTypePermission < JavaObject >

/*!
 @brief Check permission for a provided type.
 @param type the type to check
 @return <code>true</code> if provided type is allowed, <code>false</code> if permission does not handle the type
 @throw ForbiddenClassExceptionif provided type is explicitly forbidden
 @since 1.4.7
 */
- (jboolean)allowsWithIOSClass:(IOSClass *)type;

@end

J2OBJC_EMPTY_STATIC_INIT(ComThoughtworksXstreamSecurityTypePermission)

J2OBJC_TYPE_LITERAL_HEADER(ComThoughtworksXstreamSecurityTypePermission)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComThoughtworksXstreamSecurityTypePermission")
