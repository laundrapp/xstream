//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xstream/xstream/src/java/com/thoughtworks/xstream/security/ExplicitTypePermission.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/security/ExplicitTypePermission.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@interface ComThoughtworksXstreamSecurityExplicitTypePermission_1 : NSObject {
 @public
  IOSObjectArray *val$types_;
}

- (instancetype __nonnull)initWithIOSClassArray:(IOSObjectArray *)capture$0;

- (IOSObjectArray *)getNames;

@end

J2OBJC_EMPTY_STATIC_INIT(ComThoughtworksXstreamSecurityExplicitTypePermission_1)

__attribute__((unused)) static void ComThoughtworksXstreamSecurityExplicitTypePermission_1_initWithIOSClassArray_(ComThoughtworksXstreamSecurityExplicitTypePermission_1 *self, IOSObjectArray *capture$0);

__attribute__((unused)) static ComThoughtworksXstreamSecurityExplicitTypePermission_1 *new_ComThoughtworksXstreamSecurityExplicitTypePermission_1_initWithIOSClassArray_(IOSObjectArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComThoughtworksXstreamSecurityExplicitTypePermission_1 *create_ComThoughtworksXstreamSecurityExplicitTypePermission_1_initWithIOSClassArray_(IOSObjectArray *capture$0);

@implementation ComThoughtworksXstreamSecurityExplicitTypePermission

- (instancetype __nonnull)initWithIOSClassArray:(IOSObjectArray *)types {
  ComThoughtworksXstreamSecurityExplicitTypePermission_initWithIOSClassArray_(self, types);
  return self;
}

- (instancetype __nonnull)initWithNSStringArray:(IOSObjectArray *)names {
  ComThoughtworksXstreamSecurityExplicitTypePermission_initWithNSStringArray_(self, names);
  return self;
}

- (jboolean)allowsWithIOSClass:(IOSClass *)type {
  if (type == nil) return false;
  return [((id<JavaUtilSet>) nil_chk(names_)) containsWithId:[type getName]];
}

- (void)dealloc {
  RELEASE_(names_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClassArray:);
  methods[1].selector = @selector(initWithNSStringArray:);
  methods[2].selector = @selector(allowsWithIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "names_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LIOSClass;", "[LNSString;", "allows", "LIOSClass;" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamSecurityExplicitTypePermission = { "ExplicitTypePermission", "com.thoughtworks.xstream.security", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_ComThoughtworksXstreamSecurityExplicitTypePermission;
}

@end

void ComThoughtworksXstreamSecurityExplicitTypePermission_initWithIOSClassArray_(ComThoughtworksXstreamSecurityExplicitTypePermission *self, IOSObjectArray *types) {
  ComThoughtworksXstreamSecurityExplicitTypePermission_initWithNSStringArray_(self, [create_ComThoughtworksXstreamSecurityExplicitTypePermission_1_initWithIOSClassArray_(types) getNames]);
}

ComThoughtworksXstreamSecurityExplicitTypePermission *new_ComThoughtworksXstreamSecurityExplicitTypePermission_initWithIOSClassArray_(IOSObjectArray *types) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamSecurityExplicitTypePermission, initWithIOSClassArray_, types)
}

ComThoughtworksXstreamSecurityExplicitTypePermission *create_ComThoughtworksXstreamSecurityExplicitTypePermission_initWithIOSClassArray_(IOSObjectArray *types) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamSecurityExplicitTypePermission, initWithIOSClassArray_, types)
}

void ComThoughtworksXstreamSecurityExplicitTypePermission_initWithNSStringArray_(ComThoughtworksXstreamSecurityExplicitTypePermission *self, IOSObjectArray *names) {
  NSObject_init(self);
  JreStrongAssign(&self->names_, names == nil ? JreLoadStatic(JavaUtilCollections, EMPTY_SET) : create_JavaUtilHashSet_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(names)));
}

ComThoughtworksXstreamSecurityExplicitTypePermission *new_ComThoughtworksXstreamSecurityExplicitTypePermission_initWithNSStringArray_(IOSObjectArray *names) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamSecurityExplicitTypePermission, initWithNSStringArray_, names)
}

ComThoughtworksXstreamSecurityExplicitTypePermission *create_ComThoughtworksXstreamSecurityExplicitTypePermission_initWithNSStringArray_(IOSObjectArray *names) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamSecurityExplicitTypePermission, initWithNSStringArray_, names)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamSecurityExplicitTypePermission)

@implementation ComThoughtworksXstreamSecurityExplicitTypePermission_1

- (instancetype __nonnull)initWithIOSClassArray:(IOSObjectArray *)capture$0 {
  ComThoughtworksXstreamSecurityExplicitTypePermission_1_initWithIOSClassArray_(self, capture$0);
  return self;
}

- (IOSObjectArray *)getNames {
  if (val$types_ == nil) return nil;
  IOSObjectArray *names = [IOSObjectArray arrayWithLength:val$types_->size_ type:NSString_class_()];
  for (jint i = 0; i < val$types_->size_; ++i) IOSObjectArray_Set(names, i, [((IOSClass *) nil_chk(IOSObjectArray_Get(val$types_, i))) getName]);
  return names;
}

- (void)dealloc {
  RELEASE_(val$types_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClassArray:);
  methods[1].selector = @selector(getNames);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$types_", "[LIOSClass;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComThoughtworksXstreamSecurityExplicitTypePermission;", "initWithIOSClassArray:" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamSecurityExplicitTypePermission_1 = { "", "com.thoughtworks.xstream.security", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, -1, -1 };
  return &_ComThoughtworksXstreamSecurityExplicitTypePermission_1;
}

@end

void ComThoughtworksXstreamSecurityExplicitTypePermission_1_initWithIOSClassArray_(ComThoughtworksXstreamSecurityExplicitTypePermission_1 *self, IOSObjectArray *capture$0) {
  JreStrongAssign(&self->val$types_, capture$0);
  NSObject_init(self);
}

ComThoughtworksXstreamSecurityExplicitTypePermission_1 *new_ComThoughtworksXstreamSecurityExplicitTypePermission_1_initWithIOSClassArray_(IOSObjectArray *capture$0) {
  J2OBJC_NEW_IMPL(ComThoughtworksXstreamSecurityExplicitTypePermission_1, initWithIOSClassArray_, capture$0)
}

ComThoughtworksXstreamSecurityExplicitTypePermission_1 *create_ComThoughtworksXstreamSecurityExplicitTypePermission_1_initWithIOSClassArray_(IOSObjectArray *capture$0) {
  J2OBJC_CREATE_IMPL(ComThoughtworksXstreamSecurityExplicitTypePermission_1, initWithIOSClassArray_, capture$0)
}
